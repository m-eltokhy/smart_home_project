
Graduation_Project_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004eb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00004eb6  00004f4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080009e  0080009e  00004f88  2**0
                  ALLOC
  3 .stab         00004614  00000000  00000000  00004f88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c8f  00000000  00000000  0000959c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_1>
       8:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__vector_2>
       c:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__vector_3>
      10:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__vector_4>
      14:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__vector_10>
      2c:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_11>
      30:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__vector_12>
      34:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 17 08 	jmp	0x102e	; 0x102e <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3b       	cpi	r26, 0xB2	; 178
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 04 26 	call	0x4c08	; 0x4c08 <main>
      8a:	0c 94 59 27 	jmp	0x4eb2	; 0x4eb2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0e 27 	jmp	0x4e1c	; 0x4e1c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2a 27 	jmp	0x4e54	; 0x4e54 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 36 27 	jmp	0x4e6c	; 0x4e6c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 36 27 	jmp	0x4e6c	; 0x4e6c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0e 27 	jmp	0x4e1c	; 0x4e1c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2a 27 	jmp	0x4e54	; 0x4e54 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 16 27 	jmp	0x4e2c	; 0x4e2c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e7       	ldi	r22, 0x7A	; 122
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 32 27 	jmp	0x4e64	; 0x4e64 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 36 27 	jmp	0x4e6c	; 0x4e6c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 36 27 	jmp	0x4e6c	; 0x4e6c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 36 27 	jmp	0x4e6c	; 0x4e6c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1e 27 	jmp	0x4e3c	; 0x4e3c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 3a 27 	jmp	0x4e74	; 0x4e74 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <itoa>:
     c9e:	fb 01       	movw	r30, r22
     ca0:	9f 01       	movw	r18, r30
     ca2:	e8 94       	clt
     ca4:	42 30       	cpi	r20, 0x02	; 2
     ca6:	c4 f0       	brlt	.+48     	; 0xcd8 <itoa+0x3a>
     ca8:	45 32       	cpi	r20, 0x25	; 37
     caa:	b4 f4       	brge	.+44     	; 0xcd8 <itoa+0x3a>
     cac:	4a 30       	cpi	r20, 0x0A	; 10
     cae:	29 f4       	brne	.+10     	; 0xcba <itoa+0x1c>
     cb0:	97 fb       	bst	r25, 7
     cb2:	1e f4       	brtc	.+6      	; 0xcba <itoa+0x1c>
     cb4:	90 95       	com	r25
     cb6:	81 95       	neg	r24
     cb8:	9f 4f       	sbci	r25, 0xFF	; 255
     cba:	64 2f       	mov	r22, r20
     cbc:	77 27       	eor	r23, r23
     cbe:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <__udivmodhi4>
     cc2:	80 5d       	subi	r24, 0xD0	; 208
     cc4:	8a 33       	cpi	r24, 0x3A	; 58
     cc6:	0c f0       	brlt	.+2      	; 0xcca <itoa+0x2c>
     cc8:	89 5d       	subi	r24, 0xD9	; 217
     cca:	81 93       	st	Z+, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	a1 f7       	brne	.-24     	; 0xcba <itoa+0x1c>
     cd2:	16 f4       	brtc	.+4      	; 0xcd8 <itoa+0x3a>
     cd4:	5d e2       	ldi	r21, 0x2D	; 45
     cd6:	51 93       	st	Z+, r21
     cd8:	10 82       	st	Z, r1
     cda:	c9 01       	movw	r24, r18
     cdc:	0c 94 70 06 	jmp	0xce0	; 0xce0 <strrev>

00000ce0 <strrev>:
     ce0:	dc 01       	movw	r26, r24
     ce2:	fc 01       	movw	r30, r24
     ce4:	67 2f       	mov	r22, r23
     ce6:	71 91       	ld	r23, Z+
     ce8:	77 23       	and	r23, r23
     cea:	e1 f7       	brne	.-8      	; 0xce4 <strrev+0x4>
     cec:	32 97       	sbiw	r30, 0x02	; 2
     cee:	04 c0       	rjmp	.+8      	; 0xcf8 <strrev+0x18>
     cf0:	7c 91       	ld	r23, X
     cf2:	6d 93       	st	X+, r22
     cf4:	70 83       	st	Z, r23
     cf6:	62 91       	ld	r22, -Z
     cf8:	ae 17       	cp	r26, r30
     cfa:	bf 07       	cpc	r27, r31
     cfc:	c8 f3       	brcs	.-14     	; 0xcf0 <strrev+0x10>
     cfe:	08 95       	ret

00000d00 <uart_init>:
#include "uart.h"

void (*ptftx)(void);
void (*ptfrx)(void);

void uart_init(void) {
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
	/* Set baud rate */
	UBRRL = (uint8)baud;
     d08:	e9 e2       	ldi	r30, 0x29	; 41
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	87 e6       	ldi	r24, 0x67	; 103
     d0e:	80 83       	st	Z, r24
	UBRRH = (uint8)(baud>>8);
     d10:	e0 e4       	ldi	r30, 0x40	; 64
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	10 82       	st	Z, r1

#if uart_type == Asynchronous
	UCSRC |= ((1 << URSEL) & ~(1 << UMSEL));
     d16:	a0 e4       	ldi	r26, 0x40	; 64
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e0 e4       	ldi	r30, 0x40	; 64
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 68       	ori	r24, 0x80	; 128
     d22:	8c 93       	st	X, r24
#elif uart_type == Synchronous
	UCSRC|= ((1<<URSEL) | (1<<UMSEL));
#endif

#if Parity_Mode == Disabled
	UCSRC |= ((1 << URSEL) & ~(1 << UPM1) & ~(1 << UPM0));
     d24:	a0 e4       	ldi	r26, 0x40	; 64
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e0 e4       	ldi	r30, 0x40	; 64
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	80 68       	ori	r24, 0x80	; 128
     d30:	8c 93       	st	X, r24
#elif Parity_Mode == Odd_Parity
	UCSRC |= ((1 << URSEL) | (1 << UPM1) | (1 << UPM0));
#endif

#if Stop_Bit == one_bit
	UCSRC |= ((1 << URSEL) & ~(1 << USBS));
     d32:	a0 e4       	ldi	r26, 0x40	; 64
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e0 e4       	ldi	r30, 0x40	; 64
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	80 68       	ori	r24, 0x80	; 128
     d3e:	8c 93       	st	X, r24
#elif Stop_Bit == two_bit
	UCSRC |= ((1 << URSEL) | (1 << USBS));
#endif

#if uart_speed == normal_speed
	CLEAR_BIT(UCSRA, U2X);
     d40:	ab e2       	ldi	r26, 0x2B	; 43
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	eb e2       	ldi	r30, 0x2B	; 43
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	8d 7f       	andi	r24, 0xFD	; 253
     d4c:	8c 93       	st	X, r24
#elif uart_speed == double_speed
	SET_BIT(UCSRA,U2X);
#endif

#if Transmitter
	SET_BIT(UCSRB, TXEN);
     d4e:	aa e2       	ldi	r26, 0x2A	; 42
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ea e2       	ldi	r30, 0x2A	; 42
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	88 60       	ori	r24, 0x08	; 8
     d5a:	8c 93       	st	X, r24
#else
	CLEAR_BIT(UCSRB,TXEN);
#endif

#if Receiver
	SET_BIT(UCSRB, RXEN);
     d5c:	aa e2       	ldi	r26, 0x2A	; 42
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	ea e2       	ldi	r30, 0x2A	; 42
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	80 61       	ori	r24, 0x10	; 16
     d68:	8c 93       	st	X, r24
#endif

#if TX_interrupt
	SET_BIT(UCSRB, TXCIE);
#else
	CLEAR_BIT(UCSRB,TXCIE);
     d6a:	aa e2       	ldi	r26, 0x2A	; 42
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	ea e2       	ldi	r30, 0x2A	; 42
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8f 7b       	andi	r24, 0xBF	; 191
     d76:	8c 93       	st	X, r24
#endif

#if RX_interrupt
	SET_BIT(UCSRB, RXCIE);
#else
	CLEAR_BIT(UCSRB,RXCIE);
     d78:	aa e2       	ldi	r26, 0x2A	; 42
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	ea e2       	ldi	r30, 0x2A	; 42
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	8f 77       	andi	r24, 0x7F	; 127
     d84:	8c 93       	st	X, r24
	UCSRC |= ((1 << URSEL) & ~(1 << UCSZ1) | (1 << UCSZ0));
#elif Character_Size == seven_bit
	CLEAR_BIT(UCSRB,UCSZ2);
	UCSRC |= ((1 << URSEL) & ~(1 << UCSZ1) & ~(1 << UCSZ0));
#elif Character_Size == eight_bit
	CLEAR_BIT(UCSRB, UCSZ2);
     d86:	aa e2       	ldi	r26, 0x2A	; 42
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	ea e2       	ldi	r30, 0x2A	; 42
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8b 7f       	andi	r24, 0xFB	; 251
     d92:	8c 93       	st	X, r24
	UCSRC |= ((1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0));
     d94:	a0 e4       	ldi	r26, 0x40	; 64
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e0 e4       	ldi	r30, 0x40	; 64
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	86 68       	ori	r24, 0x86	; 134
     da0:	8c 93       	st	X, r24
#elif Character_Size == nine_bit
	SET_BIT(UCSRB,UCSZ2);
	UCSRC |= ((1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0));
#endif
}
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <uart_transmit>:

void uart_transmit(uint8 data)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	0f 92       	push	r0
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
     db4:	ec e2       	ldi	r30, 0x2C	; 44
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	80 83       	st	Z, r24
	while ( !( UCSRA & (1<<UDRE)) );
     dbc:	eb e2       	ldi	r30, 0x2B	; 43
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	80 72       	andi	r24, 0x20	; 32
     dc8:	90 70       	andi	r25, 0x00	; 0
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	b9 f3       	breq	.-18     	; 0xdbc <uart_transmit+0x14>
}
     dce:	0f 90       	pop	r0
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <uart_transmit_data>:

void uart_transmit_data(uint8 *data)
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	6b 97       	sbiw	r28, 0x1b	; 27
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	9b 8f       	std	Y+27, r25	; 0x1b
     dec:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8 i=0;
     dee:	19 8e       	std	Y+25, r1	; 0x19
     df0:	d6 c0       	rjmp	.+428    	; 0xf9e <uart_transmit_data+0x1c8>
	while(data[i]!='\n'){
		while ( !( UCSRA & (1<<UDRE)) );
     df2:	eb e2       	ldi	r30, 0x2B	; 43
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	80 72       	andi	r24, 0x20	; 32
     dfe:	90 70       	andi	r25, 0x00	; 0
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	b9 f3       	breq	.-18     	; 0xdf2 <uart_transmit_data+0x1c>
		UDR=data[i];
     e04:	ac e2       	ldi	r26, 0x2C	; 44
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	89 8d       	ldd	r24, Y+25	; 0x19
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e10:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e12:	fc 01       	movw	r30, r24
     e14:	e2 0f       	add	r30, r18
     e16:	f3 1f       	adc	r31, r19
     e18:	80 81       	ld	r24, Z
     e1a:	8c 93       	st	X, r24
		i++;
     e1c:	89 8d       	ldd	r24, Y+25	; 0x19
     e1e:	8f 5f       	subi	r24, 0xFF	; 255
     e20:	89 8f       	std	Y+25, r24	; 0x19
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	a0 e2       	ldi	r26, 0x20	; 32
     e28:	b1 e4       	ldi	r27, 0x41	; 65
     e2a:	8d 8b       	std	Y+21, r24	; 0x15
     e2c:	9e 8b       	std	Y+22, r25	; 0x16
     e2e:	af 8b       	std	Y+23, r26	; 0x17
     e30:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e32:	6d 89       	ldd	r22, Y+21	; 0x15
     e34:	7e 89       	ldd	r23, Y+22	; 0x16
     e36:	8f 89       	ldd	r24, Y+23	; 0x17
     e38:	98 8d       	ldd	r25, Y+24	; 0x18
     e3a:	2b ea       	ldi	r18, 0xAB	; 171
     e3c:	3a ea       	ldi	r19, 0xAA	; 170
     e3e:	4a ea       	ldi	r20, 0xAA	; 170
     e40:	50 e4       	ldi	r21, 0x40	; 64
     e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	89 8b       	std	Y+17, r24	; 0x11
     e4c:	9a 8b       	std	Y+18, r25	; 0x12
     e4e:	ab 8b       	std	Y+19, r26	; 0x13
     e50:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     e52:	69 89       	ldd	r22, Y+17	; 0x11
     e54:	7a 89       	ldd	r23, Y+18	; 0x12
     e56:	8b 89       	ldd	r24, Y+19	; 0x13
     e58:	9c 89       	ldd	r25, Y+20	; 0x14
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e8       	ldi	r20, 0x80	; 128
     e60:	5f e3       	ldi	r21, 0x3F	; 63
     e62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e66:	88 23       	and	r24, r24
     e68:	1c f4       	brge	.+6      	; 0xe70 <uart_transmit_data+0x9a>
		__ticks = 1;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	88 8b       	std	Y+16, r24	; 0x10
     e6e:	91 c0       	rjmp	.+290    	; 0xf92 <uart_transmit_data+0x1bc>
	else if (__tmp > 255)
     e70:	69 89       	ldd	r22, Y+17	; 0x11
     e72:	7a 89       	ldd	r23, Y+18	; 0x12
     e74:	8b 89       	ldd	r24, Y+19	; 0x13
     e76:	9c 89       	ldd	r25, Y+20	; 0x14
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4f e7       	ldi	r20, 0x7F	; 127
     e7e:	53 e4       	ldi	r21, 0x43	; 67
     e80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e84:	18 16       	cp	r1, r24
     e86:	0c f0       	brlt	.+2      	; 0xe8a <uart_transmit_data+0xb4>
     e88:	7b c0       	rjmp	.+246    	; 0xf80 <uart_transmit_data+0x1aa>
	{
		_delay_ms(__us / 1000.0);
     e8a:	6d 89       	ldd	r22, Y+21	; 0x15
     e8c:	7e 89       	ldd	r23, Y+22	; 0x16
     e8e:	8f 89       	ldd	r24, Y+23	; 0x17
     e90:	98 8d       	ldd	r25, Y+24	; 0x18
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	4a e7       	ldi	r20, 0x7A	; 122
     e98:	54 e4       	ldi	r21, 0x44	; 68
     e9a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	8c 87       	std	Y+12, r24	; 0x0c
     ea4:	9d 87       	std	Y+13, r25	; 0x0d
     ea6:	ae 87       	std	Y+14, r26	; 0x0e
     ea8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eaa:	6c 85       	ldd	r22, Y+12	; 0x0c
     eac:	7d 85       	ldd	r23, Y+13	; 0x0d
     eae:	8e 85       	ldd	r24, Y+14	; 0x0e
     eb0:	9f 85       	ldd	r25, Y+15	; 0x0f
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	4a e7       	ldi	r20, 0x7A	; 122
     eb8:	55 e4       	ldi	r21, 0x45	; 69
     eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	88 87       	std	Y+8, r24	; 0x08
     ec4:	99 87       	std	Y+9, r25	; 0x09
     ec6:	aa 87       	std	Y+10, r26	; 0x0a
     ec8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     eca:	68 85       	ldd	r22, Y+8	; 0x08
     ecc:	79 85       	ldd	r23, Y+9	; 0x09
     ece:	8a 85       	ldd	r24, Y+10	; 0x0a
     ed0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e8       	ldi	r20, 0x80	; 128
     ed8:	5f e3       	ldi	r21, 0x3F	; 63
     eda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ede:	88 23       	and	r24, r24
     ee0:	2c f4       	brge	.+10     	; 0xeec <uart_transmit_data+0x116>
		__ticks = 1;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	9f 83       	std	Y+7, r25	; 0x07
     ee8:	8e 83       	std	Y+6, r24	; 0x06
     eea:	3f c0       	rjmp	.+126    	; 0xf6a <uart_transmit_data+0x194>
	else if (__tmp > 65535)
     eec:	68 85       	ldd	r22, Y+8	; 0x08
     eee:	79 85       	ldd	r23, Y+9	; 0x09
     ef0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ef2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	3f ef       	ldi	r19, 0xFF	; 255
     ef8:	4f e7       	ldi	r20, 0x7F	; 127
     efa:	57 e4       	ldi	r21, 0x47	; 71
     efc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f00:	18 16       	cp	r1, r24
     f02:	4c f5       	brge	.+82     	; 0xf56 <uart_transmit_data+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f04:	6c 85       	ldd	r22, Y+12	; 0x0c
     f06:	7d 85       	ldd	r23, Y+13	; 0x0d
     f08:	8e 85       	ldd	r24, Y+14	; 0x0e
     f0a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e2       	ldi	r20, 0x20	; 32
     f12:	51 e4       	ldi	r21, 0x41	; 65
     f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	bc 01       	movw	r22, r24
     f1e:	cd 01       	movw	r24, r26
     f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	9f 83       	std	Y+7, r25	; 0x07
     f2a:	8e 83       	std	Y+6, r24	; 0x06
     f2c:	0f c0       	rjmp	.+30     	; 0xf4c <uart_transmit_data+0x176>
     f2e:	80 e9       	ldi	r24, 0x90	; 144
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	9d 83       	std	Y+5, r25	; 0x05
     f34:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <uart_transmit_data+0x164>
     f3e:	9d 83       	std	Y+5, r25	; 0x05
     f40:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f42:	8e 81       	ldd	r24, Y+6	; 0x06
     f44:	9f 81       	ldd	r25, Y+7	; 0x07
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	9f 83       	std	Y+7, r25	; 0x07
     f4a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4c:	8e 81       	ldd	r24, Y+6	; 0x06
     f4e:	9f 81       	ldd	r25, Y+7	; 0x07
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	69 f7       	brne	.-38     	; 0xf2e <uart_transmit_data+0x158>
     f54:	24 c0       	rjmp	.+72     	; 0xf9e <uart_transmit_data+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f56:	68 85       	ldd	r22, Y+8	; 0x08
     f58:	79 85       	ldd	r23, Y+9	; 0x09
     f5a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f5c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	9f 83       	std	Y+7, r25	; 0x07
     f68:	8e 83       	std	Y+6, r24	; 0x06
     f6a:	8e 81       	ldd	r24, Y+6	; 0x06
     f6c:	9f 81       	ldd	r25, Y+7	; 0x07
     f6e:	9b 83       	std	Y+3, r25	; 0x03
     f70:	8a 83       	std	Y+2, r24	; 0x02
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	9b 81       	ldd	r25, Y+3	; 0x03
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <uart_transmit_data+0x1a0>
     f7a:	9b 83       	std	Y+3, r25	; 0x03
     f7c:	8a 83       	std	Y+2, r24	; 0x02
     f7e:	0f c0       	rjmp	.+30     	; 0xf9e <uart_transmit_data+0x1c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f80:	69 89       	ldd	r22, Y+17	; 0x11
     f82:	7a 89       	ldd	r23, Y+18	; 0x12
     f84:	8b 89       	ldd	r24, Y+19	; 0x13
     f86:	9c 89       	ldd	r25, Y+20	; 0x14
     f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	88 8b       	std	Y+16, r24	; 0x10
     f92:	88 89       	ldd	r24, Y+16	; 0x10
     f94:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	8a 95       	dec	r24
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <uart_transmit_data+0x1c2>
     f9c:	89 83       	std	Y+1, r24	; 0x01
}

void uart_transmit_data(uint8 *data)
{
	uint8 i=0;
	while(data[i]!='\n'){
     f9e:	89 8d       	ldd	r24, Y+25	; 0x19
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fa6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fa8:	fc 01       	movw	r30, r24
     faa:	e2 0f       	add	r30, r18
     fac:	f3 1f       	adc	r31, r19
     fae:	80 81       	ld	r24, Z
     fb0:	8a 30       	cpi	r24, 0x0A	; 10
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <uart_transmit_data+0x1e0>
     fb4:	1e cf       	rjmp	.-452    	; 0xdf2 <uart_transmit_data+0x1c>
		while ( !( UCSRA & (1<<UDRE)) );
		UDR=data[i];
		i++;
		_delay_us(10);
	}
}
     fb6:	6b 96       	adiw	r28, 0x1b	; 27
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <uart_receive>:

uint8 uart_receive(void)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
	while ( !(UCSRA & (1<<RXC)) );
     fd0:	eb e2       	ldi	r30, 0x2B	; 43
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 23       	and	r24, r24
     fd8:	dc f7       	brge	.-10     	; 0xfd0 <uart_receive+0x8>
	return UDR;
     fda:	ec e2       	ldi	r30, 0x2C	; 44
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
}
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <call_back_tx>:

void call_back_tx(void (*callback)(void)) {
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	00 d0       	rcall	.+0      	; 0xfec <call_back_tx+0x6>
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
	ptftx = callback;
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
     ff8:	90 93 a1 00 	sts	0x00A1, r25
     ffc:	80 93 a0 00 	sts	0x00A0, r24
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <call_back_rx>:

void call_back_rx(void (*callback)(void)) {
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <call_back_rx+0x6>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
	ptfrx = callback;
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	9a 81       	ldd	r25, Y+2	; 0x02
    101c:	90 93 9f 00 	sts	0x009F, r25
    1020:	80 93 9e 00 	sts	0x009E, r24
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <__vector_15>:

ISR(USART_TXC_vect) {
    102e:	1f 92       	push	r1
    1030:	0f 92       	push	r0
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	0f 92       	push	r0
    1036:	11 24       	eor	r1, r1
    1038:	2f 93       	push	r18
    103a:	3f 93       	push	r19
    103c:	4f 93       	push	r20
    103e:	5f 93       	push	r21
    1040:	6f 93       	push	r22
    1042:	7f 93       	push	r23
    1044:	8f 93       	push	r24
    1046:	9f 93       	push	r25
    1048:	af 93       	push	r26
    104a:	bf 93       	push	r27
    104c:	ef 93       	push	r30
    104e:	ff 93       	push	r31
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
	ptftx();
    1058:	e0 91 a0 00 	lds	r30, 0x00A0
    105c:	f0 91 a1 00 	lds	r31, 0x00A1
    1060:	09 95       	icall
}
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	ff 91       	pop	r31
    1068:	ef 91       	pop	r30
    106a:	bf 91       	pop	r27
    106c:	af 91       	pop	r26
    106e:	9f 91       	pop	r25
    1070:	8f 91       	pop	r24
    1072:	7f 91       	pop	r23
    1074:	6f 91       	pop	r22
    1076:	5f 91       	pop	r21
    1078:	4f 91       	pop	r20
    107a:	3f 91       	pop	r19
    107c:	2f 91       	pop	r18
    107e:	0f 90       	pop	r0
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	0f 90       	pop	r0
    1084:	1f 90       	pop	r1
    1086:	18 95       	reti

00001088 <__vector_13>:

ISR(USART_RXC_vect) {
    1088:	1f 92       	push	r1
    108a:	0f 92       	push	r0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	0f 92       	push	r0
    1090:	11 24       	eor	r1, r1
    1092:	2f 93       	push	r18
    1094:	3f 93       	push	r19
    1096:	4f 93       	push	r20
    1098:	5f 93       	push	r21
    109a:	6f 93       	push	r22
    109c:	7f 93       	push	r23
    109e:	8f 93       	push	r24
    10a0:	9f 93       	push	r25
    10a2:	af 93       	push	r26
    10a4:	bf 93       	push	r27
    10a6:	ef 93       	push	r30
    10a8:	ff 93       	push	r31
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
	ptfrx();
    10b2:	e0 91 9e 00 	lds	r30, 0x009E
    10b6:	f0 91 9f 00 	lds	r31, 0x009F
    10ba:	09 95       	icall
}
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	ff 91       	pop	r31
    10c2:	ef 91       	pop	r30
    10c4:	bf 91       	pop	r27
    10c6:	af 91       	pop	r26
    10c8:	9f 91       	pop	r25
    10ca:	8f 91       	pop	r24
    10cc:	7f 91       	pop	r23
    10ce:	6f 91       	pop	r22
    10d0:	5f 91       	pop	r21
    10d2:	4f 91       	pop	r20
    10d4:	3f 91       	pop	r19
    10d6:	2f 91       	pop	r18
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	0f 90       	pop	r0
    10de:	1f 90       	pop	r1
    10e0:	18 95       	reti

000010e2 <timer0_init>:
void (*ptf_t2_OVF)(void);
void (*ptf_t2_OCF)(void);

//timer0 initialization
void timer0_init(void)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62

	TCCR0|=timer0_prescaler_mode;
    10ea:	a3 e5       	ldi	r26, 0x53	; 83
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e3 e5       	ldi	r30, 0x53	; 83
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	85 60       	ori	r24, 0x05	; 5
    10f6:	8c 93       	st	X, r24

	TCNT0=TIMER0_init_val;
    10f8:	e2 e5       	ldi	r30, 0x52	; 82
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	10 82       	st	Z, r1
//	OCR0=TIMER0_OCR_val;

#if timer0_OV_interrupt
	SET_BIT(TIMSK,TOIE0);
    10fe:	a9 e5       	ldi	r26, 0x59	; 89
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e9 e5       	ldi	r30, 0x59	; 89
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	81 60       	ori	r24, 0x01	; 1
    110a:	8c 93       	st	X, r24
#endif

#if timer0_OC_interrupt
	SET_BIT(TIMSK,OCIE0);
#else
	CLEAR_BIT(TIMSK,OCIE0);
    110c:	a9 e5       	ldi	r26, 0x59	; 89
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e9 e5       	ldi	r30, 0x59	; 89
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8d 7f       	andi	r24, 0xFD	; 253
    1118:	8c 93       	st	X, r24
#endif

#if timer0_mode == normal
	CLEAR_BIT(TCCR0,WGM00);
    111a:	a3 e5       	ldi	r26, 0x53	; 83
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e3 e5       	ldi	r30, 0x53	; 83
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8f 7b       	andi	r24, 0xBF	; 191
    1126:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,WGM01);
    1128:	a3 e5       	ldi	r26, 0x53	; 83
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e3 e5       	ldi	r30, 0x53	; 83
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	87 7f       	andi	r24, 0xF7	; 247
    1134:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM00);
	SET_BIT(TCCR0,WGM01);
#endif

#if timer0_match_output == disconnected
	CLEAR_BIT(TCCR0,COM00);
    1136:	a3 e5       	ldi	r26, 0x53	; 83
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e3 e5       	ldi	r30, 0x53	; 83
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	8f 7e       	andi	r24, 0xEF	; 239
    1142:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,COM01);
    1144:	a3 e5       	ldi	r26, 0x53	; 83
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e3 e5       	ldi	r30, 0x53	; 83
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	8f 7d       	andi	r24, 0xDF	; 223
    1150:	8c 93       	st	X, r24
#elif timer0_match_output == set
	SET_BIT(TCCR0,COM00);
	SET_BIT(TCCR0,COM01);
#endif

}
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <timer2_init>:

//timer2 initialization
void timer2_init(void)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62

	TCCR2|=timer0_prescaler_mode;
    1160:	a5 e4       	ldi	r26, 0x45	; 69
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e5 e4       	ldi	r30, 0x45	; 69
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	85 60       	ori	r24, 0x05	; 5
    116c:	8c 93       	st	X, r24

	TCNT2=TIMER0_init_val;
    116e:	e4 e4       	ldi	r30, 0x44	; 68
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	10 82       	st	Z, r1
//	OCR2=TIMER0_OCR_val;

#if timer2_OV_interrupt
	SET_BIT(TIMSK,TOIE2);
#else
	CLEAR_BIT(TIMSK,TOIE2);
    1174:	a9 e5       	ldi	r26, 0x59	; 89
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e9 e5       	ldi	r30, 0x59	; 89
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	8f 7b       	andi	r24, 0xBF	; 191
    1180:	8c 93       	st	X, r24
#endif

#if timer2_OC_interrupt
	SET_BIT(TIMSK,OCIE2);
#else
	CLEAR_BIT(TIMSK,OCIE2);
    1182:	a9 e5       	ldi	r26, 0x59	; 89
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e9 e5       	ldi	r30, 0x59	; 89
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	8f 77       	andi	r24, 0x7F	; 127
    118e:	8c 93       	st	X, r24
#endif

#if timer2_mode == normal
	CLEAR_BIT(TCCR0,WGM20);
    1190:	a3 e5       	ldi	r26, 0x53	; 83
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e3 e5       	ldi	r30, 0x53	; 83
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	8f 7b       	andi	r24, 0xBF	; 191
    119c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,WGM21);
    119e:	a3 e5       	ldi	r26, 0x53	; 83
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e3 e5       	ldi	r30, 0x53	; 83
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	87 7f       	andi	r24, 0xF7	; 247
    11aa:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM20);
	SET_BIT(TCCR0,WGM21);
#endif

#if timer2_match_output == disconnected
	CLEAR_BIT(TCCR0,COM20);
    11ac:	a3 e5       	ldi	r26, 0x53	; 83
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e3 e5       	ldi	r30, 0x53	; 83
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	8f 7e       	andi	r24, 0xEF	; 239
    11b8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,COM21);
    11ba:	a3 e5       	ldi	r26, 0x53	; 83
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e3 e5       	ldi	r30, 0x53	; 83
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	8f 7d       	andi	r24, 0xDF	; 223
    11c6:	8c 93       	st	X, r24
#elif timer2_match_output == set
	SET_BIT(TCCR0,COM20);
	SET_BIT(TCCR0,COM21);
#endif

}
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <setcallback_T0_TOV>:

//callback function for overflow of timer0
void setcallback_T0_TOV(void (*ptf)(void))
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <setcallback_T0_TOV+0x6>
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
	ptf_t0_OVF=ptf;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	90 93 a3 00 	sts	0x00A3, r25
    11e4:	80 93 a2 00 	sts	0x00A2, r24
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <setcallback_T0_OCF>:

//callback function for compare match of timer0
void setcallback_T0_OCF(void (*ptf)(void))
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <setcallback_T0_OCF+0x6>
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
	ptf_t0_OCF=ptf;
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	90 93 a7 00 	sts	0x00A7, r25
    1208:	80 93 a6 00 	sts	0x00A6, r24
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <setcallback_T2_TOV>:

//callback function for overflow of timer2
void setcallback_T2_TOV(void (*ptf)(void))
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	00 d0       	rcall	.+0      	; 0x121c <setcallback_T2_TOV+0x6>
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
	ptf_t2_OVF=ptf;
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	9a 81       	ldd	r25, Y+2	; 0x02
    1228:	90 93 a5 00 	sts	0x00A5, r25
    122c:	80 93 a4 00 	sts	0x00A4, r24
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <setcallback_T2_OCF>:

//callback function for compare match of timer2
void setcallback_T2_OCF(void (*ptf)(void))
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <setcallback_T2_OCF+0x6>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	9a 83       	std	Y+2, r25	; 0x02
    1246:	89 83       	std	Y+1, r24	; 0x01
	ptf_t2_OCF=ptf;
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	90 93 a9 00 	sts	0x00A9, r25
    1250:	80 93 a8 00 	sts	0x00A8, r24
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	ptf_t0_OVF();
    1288:	e0 91 a2 00 	lds	r30, 0x00A2
    128c:	f0 91 a3 00 	lds	r31, 0x00A3
    1290:	09 95       	icall
}
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	ff 91       	pop	r31
    1298:	ef 91       	pop	r30
    129a:	bf 91       	pop	r27
    129c:	af 91       	pop	r26
    129e:	9f 91       	pop	r25
    12a0:	8f 91       	pop	r24
    12a2:	7f 91       	pop	r23
    12a4:	6f 91       	pop	r22
    12a6:	5f 91       	pop	r21
    12a8:	4f 91       	pop	r20
    12aa:	3f 91       	pop	r19
    12ac:	2f 91       	pop	r18
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	0f 90       	pop	r0
    12b4:	1f 90       	pop	r1
    12b6:	18 95       	reti

000012b8 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    12b8:	1f 92       	push	r1
    12ba:	0f 92       	push	r0
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	0f 92       	push	r0
    12c0:	11 24       	eor	r1, r1
    12c2:	2f 93       	push	r18
    12c4:	3f 93       	push	r19
    12c6:	4f 93       	push	r20
    12c8:	5f 93       	push	r21
    12ca:	6f 93       	push	r22
    12cc:	7f 93       	push	r23
    12ce:	8f 93       	push	r24
    12d0:	9f 93       	push	r25
    12d2:	af 93       	push	r26
    12d4:	bf 93       	push	r27
    12d6:	ef 93       	push	r30
    12d8:	ff 93       	push	r31
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
	ptf_t0_OCF();
    12e2:	e0 91 a6 00 	lds	r30, 0x00A6
    12e6:	f0 91 a7 00 	lds	r31, 0x00A7
    12ea:	09 95       	icall
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	ff 91       	pop	r31
    12f2:	ef 91       	pop	r30
    12f4:	bf 91       	pop	r27
    12f6:	af 91       	pop	r26
    12f8:	9f 91       	pop	r25
    12fa:	8f 91       	pop	r24
    12fc:	7f 91       	pop	r23
    12fe:	6f 91       	pop	r22
    1300:	5f 91       	pop	r21
    1302:	4f 91       	pop	r20
    1304:	3f 91       	pop	r19
    1306:	2f 91       	pop	r18
    1308:	0f 90       	pop	r0
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	0f 90       	pop	r0
    130e:	1f 90       	pop	r1
    1310:	18 95       	reti

00001312 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    1312:	1f 92       	push	r1
    1314:	0f 92       	push	r0
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	0f 92       	push	r0
    131a:	11 24       	eor	r1, r1
    131c:	2f 93       	push	r18
    131e:	3f 93       	push	r19
    1320:	4f 93       	push	r20
    1322:	5f 93       	push	r21
    1324:	6f 93       	push	r22
    1326:	7f 93       	push	r23
    1328:	8f 93       	push	r24
    132a:	9f 93       	push	r25
    132c:	af 93       	push	r26
    132e:	bf 93       	push	r27
    1330:	ef 93       	push	r30
    1332:	ff 93       	push	r31
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
	ptf_t2_OVF();
    133c:	e0 91 a4 00 	lds	r30, 0x00A4
    1340:	f0 91 a5 00 	lds	r31, 0x00A5
    1344:	09 95       	icall
}
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	ff 91       	pop	r31
    134c:	ef 91       	pop	r30
    134e:	bf 91       	pop	r27
    1350:	af 91       	pop	r26
    1352:	9f 91       	pop	r25
    1354:	8f 91       	pop	r24
    1356:	7f 91       	pop	r23
    1358:	6f 91       	pop	r22
    135a:	5f 91       	pop	r21
    135c:	4f 91       	pop	r20
    135e:	3f 91       	pop	r19
    1360:	2f 91       	pop	r18
    1362:	0f 90       	pop	r0
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	0f 90       	pop	r0
    1368:	1f 90       	pop	r1
    136a:	18 95       	reti

0000136c <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    136c:	1f 92       	push	r1
    136e:	0f 92       	push	r0
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	0f 92       	push	r0
    1374:	11 24       	eor	r1, r1
    1376:	2f 93       	push	r18
    1378:	3f 93       	push	r19
    137a:	4f 93       	push	r20
    137c:	5f 93       	push	r21
    137e:	6f 93       	push	r22
    1380:	7f 93       	push	r23
    1382:	8f 93       	push	r24
    1384:	9f 93       	push	r25
    1386:	af 93       	push	r26
    1388:	bf 93       	push	r27
    138a:	ef 93       	push	r30
    138c:	ff 93       	push	r31
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
	ptf_t2_OCF();
    1396:	e0 91 a8 00 	lds	r30, 0x00A8
    139a:	f0 91 a9 00 	lds	r31, 0x00A9
    139e:	09 95       	icall
}
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	ff 91       	pop	r31
    13a6:	ef 91       	pop	r30
    13a8:	bf 91       	pop	r27
    13aa:	af 91       	pop	r26
    13ac:	9f 91       	pop	r25
    13ae:	8f 91       	pop	r24
    13b0:	7f 91       	pop	r23
    13b2:	6f 91       	pop	r22
    13b4:	5f 91       	pop	r21
    13b6:	4f 91       	pop	r20
    13b8:	3f 91       	pop	r19
    13ba:	2f 91       	pop	r18
    13bc:	0f 90       	pop	r0
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	0f 90       	pop	r0
    13c2:	1f 90       	pop	r1
    13c4:	18 95       	reti

000013c6 <spi_master_init>:

#include "spi.h"

void (*ptfspi)(void);

void spi_master_init(void) {
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB, 5);
    13ce:	a7 e3       	ldi	r26, 0x37	; 55
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e7 e3       	ldi	r30, 0x37	; 55
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	80 62       	ori	r24, 0x20	; 32
    13da:	8c 93       	st	X, r24
	SET_BIT(DDRB, 7);
    13dc:	a7 e3       	ldi	r26, 0x37	; 55
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e7 e3       	ldi	r30, 0x37	; 55
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	80 68       	ori	r24, 0x80	; 128
    13e8:	8c 93       	st	X, r24
	SET_BIT(DDRB, 4);
    13ea:	a7 e3       	ldi	r26, 0x37	; 55
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e7 e3       	ldi	r30, 0x37	; 55
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	80 61       	ori	r24, 0x10	; 16
    13f6:	8c 93       	st	X, r24
	CLEAR_BIT(DDRB, 6);
    13f8:	a7 e3       	ldi	r26, 0x37	; 55
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e7 e3       	ldi	r30, 0x37	; 55
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	8f 7b       	andi	r24, 0xBF	; 191
    1404:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, 4);
    1406:	a8 e3       	ldi	r26, 0x38	; 56
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e8 e3       	ldi	r30, 0x38	; 56
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	8f 7e       	andi	r24, 0xEF	; 239
    1412:	8c 93       	st	X, r24
	SET_BIT(SPCR, MSTR);
    1414:	ad e2       	ldi	r26, 0x2D	; 45
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	ed e2       	ldi	r30, 0x2D	; 45
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	80 61       	ori	r24, 0x10	; 16
    1420:	8c 93       	st	X, r24
	SPCR |= SPI_Clock_Rate;
    1422:	ad e2       	ldi	r26, 0x2D	; 45
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	ed e2       	ldi	r30, 0x2D	; 45
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	81 60       	ori	r24, 0x01	; 1
    142e:	8c 93       	st	X, r24

#if spi_interrupt == enable
	SET_BIT(SPCR,SPIE);
#else
	CLEAR_BIT(SPCR, SPIE);
    1430:	ad e2       	ldi	r26, 0x2D	; 45
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	ed e2       	ldi	r30, 0x2D	; 45
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	8f 77       	andi	r24, 0x7F	; 127
    143c:	8c 93       	st	X, r24
#endif

#if spi_enable == enable
	SET_BIT(SPCR, SPE);
    143e:	ad e2       	ldi	r26, 0x2D	; 45
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	ed e2       	ldi	r30, 0x2D	; 45
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	80 64       	ori	r24, 0x40	; 64
    144a:	8c 93       	st	X, r24
#elif spi_enable == disable
	SET_BIT(SPCR,SPE);
#endif

#if Data_Order == MSB
	SET_BIT(SPCR, DORD);
    144c:	ad e2       	ldi	r26, 0x2D	; 45
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	ed e2       	ldi	r30, 0x2D	; 45
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	80 62       	ori	r24, 0x20	; 32
    1458:	8c 93       	st	X, r24
#elif Data_Order == LSB
	SET_BIT(SPCR,DORD);
#endif

#if Clock_Phase == leading
	CLEAR_BIT(SPCR, CPHA);
    145a:	ad e2       	ldi	r26, 0x2D	; 45
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ed e2       	ldi	r30, 0x2D	; 45
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8b 7f       	andi	r24, 0xFB	; 251
    1466:	8c 93       	st	X, r24
#elif Clock_Phase == trailing
	SET_BIT(SPCR,CPHA);
#endif

#if SPI_Speed == normal_speed
	CLEAR_BIT(SPSR, SPI2X);
    1468:	ae e2       	ldi	r26, 0x2E	; 46
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ee e2       	ldi	r30, 0x2E	; 46
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	8e 7f       	andi	r24, 0xFE	; 254
    1474:	8c 93       	st	X, r24
#elif SPI_Speed == double_speed
	SET_BIT(SPSR,SPI2X);
#endif

}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <spi_slave_init>:

void spi_slave_init(void) {
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(DDRB, 5);
    1484:	a7 e3       	ldi	r26, 0x37	; 55
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e7 e3       	ldi	r30, 0x37	; 55
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8f 7d       	andi	r24, 0xDF	; 223
    1490:	8c 93       	st	X, r24
	CLEAR_BIT(DDRB, 7);
    1492:	a7 e3       	ldi	r26, 0x37	; 55
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e7 e3       	ldi	r30, 0x37	; 55
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8f 77       	andi	r24, 0x7F	; 127
    149e:	8c 93       	st	X, r24
	CLEAR_BIT(DDRB, 4);
    14a0:	a7 e3       	ldi	r26, 0x37	; 55
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e7 e3       	ldi	r30, 0x37	; 55
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8f 7e       	andi	r24, 0xEF	; 239
    14ac:	8c 93       	st	X, r24
	SET_BIT(DDRB, 6);
    14ae:	a7 e3       	ldi	r26, 0x37	; 55
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e7 e3       	ldi	r30, 0x37	; 55
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	80 64       	ori	r24, 0x40	; 64
    14ba:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR, MSTR);
    14bc:	ad e2       	ldi	r26, 0x2D	; 45
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ed e2       	ldi	r30, 0x2D	; 45
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8f 7e       	andi	r24, 0xEF	; 239
    14c8:	8c 93       	st	X, r24
	SPCR |= SPI_Clock_Rate;
    14ca:	ad e2       	ldi	r26, 0x2D	; 45
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	ed e2       	ldi	r30, 0x2D	; 45
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	81 60       	ori	r24, 0x01	; 1
    14d6:	8c 93       	st	X, r24

#if spi_interrupt == enable
	SET_BIT(SPCR,SPIE);
#else
	CLEAR_BIT(SPCR, SPIE);
    14d8:	ad e2       	ldi	r26, 0x2D	; 45
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	ed e2       	ldi	r30, 0x2D	; 45
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 77       	andi	r24, 0x7F	; 127
    14e4:	8c 93       	st	X, r24
#endif

#if spi_enable == enable
	SET_BIT(SPCR, SPE);
    14e6:	ad e2       	ldi	r26, 0x2D	; 45
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	ed e2       	ldi	r30, 0x2D	; 45
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	80 64       	ori	r24, 0x40	; 64
    14f2:	8c 93       	st	X, r24
#elif spi_enable == disable
	SET_BIT(SPCR,SPE);
#endif

#if Data_Order == MSB
	SET_BIT(SPCR, DORD);
    14f4:	ad e2       	ldi	r26, 0x2D	; 45
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ed e2       	ldi	r30, 0x2D	; 45
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 62       	ori	r24, 0x20	; 32
    1500:	8c 93       	st	X, r24
#elif Data_Order == LSB
	SET_BIT(SPCR,DORD);
#endif

#if Clock_Phase == leading
	CLEAR_BIT(SPCR, CPHA);
    1502:	ad e2       	ldi	r26, 0x2D	; 45
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	ed e2       	ldi	r30, 0x2D	; 45
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8b 7f       	andi	r24, 0xFB	; 251
    150e:	8c 93       	st	X, r24
#elif Clock_Phase == trailing
	SET_BIT(SPCR,CPHA);
#endif

#if SPI_Speed == normal_speed
	CLEAR_BIT(SPSR, SPI2X);
    1510:	ae e2       	ldi	r26, 0x2E	; 46
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	ee e2       	ldi	r30, 0x2E	; 46
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8e 7f       	andi	r24, 0xFE	; 254
    151c:	8c 93       	st	X, r24
#elif SPI_Speed == double_speed
	SET_BIT(SPSR,SPI2X);
#endif

}
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <spi_master_send>:

void spi_master_send(uint8 data) {
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	0f 92       	push	r0
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    1530:	ef e2       	ldi	r30, 0x2F	; 47
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	80 83       	st	Z, r24
	while (!(SPSR & (1 << SPIF)));
    1538:	ee e2       	ldi	r30, 0x2E	; 46
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	88 23       	and	r24, r24
    1540:	dc f7       	brge	.-10     	; 0x1538 <spi_master_send+0x14>
}
    1542:	0f 90       	pop	r0
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <spi_slave_receive>:

uint8 spi_slave_receive(void) {
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
	while(!(SPSR & (1<<SPIF)));
    1552:	ee e2       	ldi	r30, 0x2E	; 46
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	88 23       	and	r24, r24
    155a:	dc f7       	brge	.-10     	; 0x1552 <spi_slave_receive+0x8>
	return SPDR;
    155c:	ef e2       	ldi	r30, 0x2F	; 47
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
}
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <call_back_spi>:

void call_back_spi(void (*callback)(void)) {
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <call_back_spi+0x6>
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	9a 83       	std	Y+2, r25	; 0x02
    1574:	89 83       	std	Y+1, r24	; 0x01
	ptfspi = callback;
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	9a 81       	ldd	r25, Y+2	; 0x02
    157a:	90 93 ab 00 	sts	0x00AB, r25
    157e:	80 93 aa 00 	sts	0x00AA, r24
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <__vector_12>:

ISR(SPI_STC_vect) {
    158c:	1f 92       	push	r1
    158e:	0f 92       	push	r0
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	0f 92       	push	r0
    1594:	11 24       	eor	r1, r1
    1596:	2f 93       	push	r18
    1598:	3f 93       	push	r19
    159a:	4f 93       	push	r20
    159c:	5f 93       	push	r21
    159e:	6f 93       	push	r22
    15a0:	7f 93       	push	r23
    15a2:	8f 93       	push	r24
    15a4:	9f 93       	push	r25
    15a6:	af 93       	push	r26
    15a8:	bf 93       	push	r27
    15aa:	ef 93       	push	r30
    15ac:	ff 93       	push	r31
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
	ptfspi();
    15b6:	e0 91 aa 00 	lds	r30, 0x00AA
    15ba:	f0 91 ab 00 	lds	r31, 0x00AB
    15be:	09 95       	icall
}
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	ff 91       	pop	r31
    15c6:	ef 91       	pop	r30
    15c8:	bf 91       	pop	r27
    15ca:	af 91       	pop	r26
    15cc:	9f 91       	pop	r25
    15ce:	8f 91       	pop	r24
    15d0:	7f 91       	pop	r23
    15d2:	6f 91       	pop	r22
    15d4:	5f 91       	pop	r21
    15d6:	4f 91       	pop	r20
    15d8:	3f 91       	pop	r19
    15da:	2f 91       	pop	r18
    15dc:	0f 90       	pop	r0
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	0f 90       	pop	r0
    15e2:	1f 90       	pop	r1
    15e4:	18 95       	reti

000015e6 <EXTI_init>:

void (*ptf0)(void);
void (*ptf1)(void);
void (*ptf2)(void);

void EXTI_init(void){
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
//		MCUCR|=INT0_TRIG;
//	}else{
//		CLEAR_BIT(GICR,INT0);
//	}
#if EXTI_INT0 == ENABLED
	SET_BIT(GICR,INT0);
    15ee:	ab e5       	ldi	r26, 0x5B	; 91
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	eb e5       	ldi	r30, 0x5B	; 91
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	80 64       	ori	r24, 0x40	; 64
    15fa:	8c 93       	st	X, r24
	MCUCR|=INT0_TRIG;
    15fc:	a5 e5       	ldi	r26, 0x55	; 85
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e5 e5       	ldi	r30, 0x55	; 85
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	83 60       	ori	r24, 0x03	; 3
    1608:	8c 93       	st	X, r24
//	}
#if EXTI_INT1 == ENABLED
	SET_BIT(GICR,INT1);
	MCUCR|=(INT1_TRIG<<2);
#else
	CLEAR_BIT(GICR,INT1);
    160a:	ab e5       	ldi	r26, 0x5B	; 91
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	eb e5       	ldi	r30, 0x5B	; 91
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	8f 77       	andi	r24, 0x7F	; 127
    1616:	8c 93       	st	X, r24
	SET_BIT(MCUCSR, 6);
#else
	CLEAR_BIT(GICR, INT2);
#endif
#else
	CLEAR_BIT(GICR,INT2);
    1618:	ab e5       	ldi	r26, 0x5B	; 91
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	eb e5       	ldi	r30, 0x5B	; 91
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	8f 7d       	andi	r24, 0xDF	; 223
    1624:	8c 93       	st	X, r24
#endif
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <call_back_INT0>:

void call_back_INT0(void (*callback)(void)){
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	00 d0       	rcall	.+0      	; 0x1632 <call_back_INT0+0x6>
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
	ptf0=callback;
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	90 93 b1 00 	sts	0x00B1, r25
    1642:	80 93 b0 00 	sts	0x00B0, r24
}
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <call_back_INT1>:
void call_back_INT1(void (*callback)(void)){
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <call_back_INT1+0x6>
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	89 83       	std	Y+1, r24	; 0x01
	ptf1=callback;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	90 93 af 00 	sts	0x00AF, r25
    1666:	80 93 ae 00 	sts	0x00AE, r24
}
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <call_back_INT2>:
void call_back_INT2(void (*callback)(void)){
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <call_back_INT2+0x6>
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	9a 83       	std	Y+2, r25	; 0x02
    1680:	89 83       	std	Y+1, r24	; 0x01
	ptf2=callback;
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	9a 81       	ldd	r25, Y+2	; 0x02
    1686:	90 93 ad 00 	sts	0x00AD, r25
    168a:	80 93 ac 00 	sts	0x00AC, r24
}
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <__vector_1>:

ISR(INT0_vect){
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	11 24       	eor	r1, r1
    16a2:	2f 93       	push	r18
    16a4:	3f 93       	push	r19
    16a6:	4f 93       	push	r20
    16a8:	5f 93       	push	r21
    16aa:	6f 93       	push	r22
    16ac:	7f 93       	push	r23
    16ae:	8f 93       	push	r24
    16b0:	9f 93       	push	r25
    16b2:	af 93       	push	r26
    16b4:	bf 93       	push	r27
    16b6:	ef 93       	push	r30
    16b8:	ff 93       	push	r31
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
	ptf0();
    16c2:	e0 91 b0 00 	lds	r30, 0x00B0
    16c6:	f0 91 b1 00 	lds	r31, 0x00B1
    16ca:	09 95       	icall
}
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	bf 91       	pop	r27
    16d6:	af 91       	pop	r26
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	7f 91       	pop	r23
    16de:	6f 91       	pop	r22
    16e0:	5f 91       	pop	r21
    16e2:	4f 91       	pop	r20
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <__vector_2>:
ISR(INT1_vect){
    16f2:	1f 92       	push	r1
    16f4:	0f 92       	push	r0
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	0f 92       	push	r0
    16fa:	11 24       	eor	r1, r1
    16fc:	2f 93       	push	r18
    16fe:	3f 93       	push	r19
    1700:	4f 93       	push	r20
    1702:	5f 93       	push	r21
    1704:	6f 93       	push	r22
    1706:	7f 93       	push	r23
    1708:	8f 93       	push	r24
    170a:	9f 93       	push	r25
    170c:	af 93       	push	r26
    170e:	bf 93       	push	r27
    1710:	ef 93       	push	r30
    1712:	ff 93       	push	r31
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
	ptf1();
    171c:	e0 91 ae 00 	lds	r30, 0x00AE
    1720:	f0 91 af 00 	lds	r31, 0x00AF
    1724:	09 95       	icall
}
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	ff 91       	pop	r31
    172c:	ef 91       	pop	r30
    172e:	bf 91       	pop	r27
    1730:	af 91       	pop	r26
    1732:	9f 91       	pop	r25
    1734:	8f 91       	pop	r24
    1736:	7f 91       	pop	r23
    1738:	6f 91       	pop	r22
    173a:	5f 91       	pop	r21
    173c:	4f 91       	pop	r20
    173e:	3f 91       	pop	r19
    1740:	2f 91       	pop	r18
    1742:	0f 90       	pop	r0
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	0f 90       	pop	r0
    1748:	1f 90       	pop	r1
    174a:	18 95       	reti

0000174c <__vector_3>:
ISR(INT2_vect){
    174c:	1f 92       	push	r1
    174e:	0f 92       	push	r0
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	0f 92       	push	r0
    1754:	11 24       	eor	r1, r1
    1756:	2f 93       	push	r18
    1758:	3f 93       	push	r19
    175a:	4f 93       	push	r20
    175c:	5f 93       	push	r21
    175e:	6f 93       	push	r22
    1760:	7f 93       	push	r23
    1762:	8f 93       	push	r24
    1764:	9f 93       	push	r25
    1766:	af 93       	push	r26
    1768:	bf 93       	push	r27
    176a:	ef 93       	push	r30
    176c:	ff 93       	push	r31
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
	ptf2();
    1776:	e0 91 ac 00 	lds	r30, 0x00AC
    177a:	f0 91 ad 00 	lds	r31, 0x00AD
    177e:	09 95       	icall
}
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	ff 91       	pop	r31
    1786:	ef 91       	pop	r30
    1788:	bf 91       	pop	r27
    178a:	af 91       	pop	r26
    178c:	9f 91       	pop	r25
    178e:	8f 91       	pop	r24
    1790:	7f 91       	pop	r23
    1792:	6f 91       	pop	r22
    1794:	5f 91       	pop	r21
    1796:	4f 91       	pop	r20
    1798:	3f 91       	pop	r19
    179a:	2f 91       	pop	r18
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	0f 90       	pop	r0
    17a2:	1f 90       	pop	r1
    17a4:	18 95       	reti

000017a6 <DIO_Write>:
								{ PORT_A6, Output },{ PORT_A7, Output },
								{ PORT_B1, Output },{ PORT_B2, Output } };



void DIO_Write(Dio_Pin pin, Dio_Status_Type status) {
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <DIO_Write+0x6>
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <DIO_Write+0x8>
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <DIO_Write+0xa>
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	8b 83       	std	Y+3, r24	; 0x03
    17b6:	6c 83       	std	Y+4, r22	; 0x04
	Dio_Port_Type port_var = pin / 8;
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	86 95       	lsr	r24
    17bc:	86 95       	lsr	r24
    17be:	86 95       	lsr	r24
    17c0:	8a 83       	std	Y+2, r24	; 0x02
	Dio_Pin pin_var = pin % 8;
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	87 70       	andi	r24, 0x07	; 7
    17c6:	89 83       	std	Y+1, r24	; 0x01
	switch (port_var) {
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3e 83       	std	Y+6, r19	; 0x06
    17d0:	2d 83       	std	Y+5, r18	; 0x05
    17d2:	8d 81       	ldd	r24, Y+5	; 0x05
    17d4:	9e 81       	ldd	r25, Y+6	; 0x06
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	91 05       	cpc	r25, r1
    17da:	09 f4       	brne	.+2      	; 0x17de <DIO_Write+0x38>
    17dc:	43 c0       	rjmp	.+134    	; 0x1864 <DIO_Write+0xbe>
    17de:	2d 81       	ldd	r18, Y+5	; 0x05
    17e0:	3e 81       	ldd	r19, Y+6	; 0x06
    17e2:	22 30       	cpi	r18, 0x02	; 2
    17e4:	31 05       	cpc	r19, r1
    17e6:	2c f4       	brge	.+10     	; 0x17f2 <DIO_Write+0x4c>
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ea:	9e 81       	ldd	r25, Y+6	; 0x06
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	71 f0       	breq	.+28     	; 0x180c <DIO_Write+0x66>
    17f0:	bc c0       	rjmp	.+376    	; 0x196a <DIO_Write+0x1c4>
    17f2:	2d 81       	ldd	r18, Y+5	; 0x05
    17f4:	3e 81       	ldd	r19, Y+6	; 0x06
    17f6:	22 30       	cpi	r18, 0x02	; 2
    17f8:	31 05       	cpc	r19, r1
    17fa:	09 f4       	brne	.+2      	; 0x17fe <DIO_Write+0x58>
    17fc:	5f c0       	rjmp	.+190    	; 0x18bc <DIO_Write+0x116>
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	9e 81       	ldd	r25, Y+6	; 0x06
    1802:	83 30       	cpi	r24, 0x03	; 3
    1804:	91 05       	cpc	r25, r1
    1806:	09 f4       	brne	.+2      	; 0x180a <DIO_Write+0x64>
    1808:	85 c0       	rjmp	.+266    	; 0x1914 <DIO_Write+0x16e>
    180a:	af c0       	rjmp	.+350    	; 0x196a <DIO_Write+0x1c4>
	case PORT_A:
		if (status) {
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	88 23       	and	r24, r24
    1810:	a1 f0       	breq	.+40     	; 0x183a <DIO_Write+0x94>
			SET_BIT(PORTA, pin_var);
    1812:	ab e3       	ldi	r26, 0x3B	; 59
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	eb e3       	ldi	r30, 0x3B	; 59
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_Write+0x8a>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <DIO_Write+0x86>
    1834:	84 2b       	or	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	98 c0       	rjmp	.+304    	; 0x196a <DIO_Write+0x1c4>
		} else {
			CLEAR_BIT(PORTA, pin_var);
    183a:	ab e3       	ldi	r26, 0x3B	; 59
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	eb e3       	ldi	r30, 0x3B	; 59
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	48 2f       	mov	r20, r24
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <DIO_Write+0xb2>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <DIO_Write+0xae>
    185c:	80 95       	com	r24
    185e:	84 23       	and	r24, r20
    1860:	8c 93       	st	X, r24
    1862:	83 c0       	rjmp	.+262    	; 0x196a <DIO_Write+0x1c4>
		}
		break;
	case PORT_B:
		if (status) {
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	88 23       	and	r24, r24
    1868:	a1 f0       	breq	.+40     	; 0x1892 <DIO_Write+0xec>
			SET_BIT(PORTB, pin_var);
    186a:	a8 e3       	ldi	r26, 0x38	; 56
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e8 e3       	ldi	r30, 0x38	; 56
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <DIO_Write+0xe2>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <DIO_Write+0xde>
    188c:	84 2b       	or	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	6c c0       	rjmp	.+216    	; 0x196a <DIO_Write+0x1c4>
		} else {
			CLEAR_BIT(PORTB, pin_var);
    1892:	a8 e3       	ldi	r26, 0x38	; 56
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e8 e3       	ldi	r30, 0x38	; 56
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_Write+0x10a>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_Write+0x106>
    18b4:	80 95       	com	r24
    18b6:	84 23       	and	r24, r20
    18b8:	8c 93       	st	X, r24
    18ba:	57 c0       	rjmp	.+174    	; 0x196a <DIO_Write+0x1c4>
		}
		break;
	case PORT_C:
		if (status) {
    18bc:	8c 81       	ldd	r24, Y+4	; 0x04
    18be:	88 23       	and	r24, r24
    18c0:	a1 f0       	breq	.+40     	; 0x18ea <DIO_Write+0x144>
			SET_BIT(PORTC, pin_var);
    18c2:	a5 e3       	ldi	r26, 0x35	; 53
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e5 e3       	ldi	r30, 0x35	; 53
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <DIO_Write+0x13a>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <DIO_Write+0x136>
    18e4:	84 2b       	or	r24, r20
    18e6:	8c 93       	st	X, r24
    18e8:	40 c0       	rjmp	.+128    	; 0x196a <DIO_Write+0x1c4>
		} else {
			CLEAR_BIT(PORTC, pin_var);
    18ea:	a5 e3       	ldi	r26, 0x35	; 53
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e5 e3       	ldi	r30, 0x35	; 53
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <DIO_Write+0x162>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <DIO_Write+0x15e>
    190c:	80 95       	com	r24
    190e:	84 23       	and	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	2b c0       	rjmp	.+86     	; 0x196a <DIO_Write+0x1c4>
		}
		break;
	case PORT_D:
		if (status) {
    1914:	8c 81       	ldd	r24, Y+4	; 0x04
    1916:	88 23       	and	r24, r24
    1918:	a1 f0       	breq	.+40     	; 0x1942 <DIO_Write+0x19c>
			SET_BIT(PORTD, pin_var);
    191a:	a2 e3       	ldi	r26, 0x32	; 50
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e2 e3       	ldi	r30, 0x32	; 50
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 2e       	mov	r0, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <DIO_Write+0x192>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	0a 94       	dec	r0
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <DIO_Write+0x18e>
    193c:	84 2b       	or	r24, r20
    193e:	8c 93       	st	X, r24
    1940:	14 c0       	rjmp	.+40     	; 0x196a <DIO_Write+0x1c4>
		} else {
			CLEAR_BIT(PORTD, pin_var);
    1942:	a2 e3       	ldi	r26, 0x32	; 50
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e2 e3       	ldi	r30, 0x32	; 50
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_Write+0x1ba>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_Write+0x1b6>
    1964:	80 95       	com	r24
    1966:	84 23       	and	r24, r20
    1968:	8c 93       	st	X, r24
		}
		break;
	}
}
    196a:	26 96       	adiw	r28, 0x06	; 6
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <DIO_Port_Write>:

void DIO_Port_Write(Dio_Port_Type port, uint8 data) {
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	00 d0       	rcall	.+0      	; 0x1982 <DIO_Port_Write+0x6>
    1982:	00 d0       	rcall	.+0      	; 0x1984 <DIO_Port_Write+0x8>
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	6a 83       	std	Y+2, r22	; 0x02
	switch (port) {
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	3c 83       	std	Y+4, r19	; 0x04
    1994:	2b 83       	std	Y+3, r18	; 0x03
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	91 05       	cpc	r25, r1
    199e:	d1 f0       	breq	.+52     	; 0x19d4 <DIO_Port_Write+0x58>
    19a0:	2b 81       	ldd	r18, Y+3	; 0x03
    19a2:	3c 81       	ldd	r19, Y+4	; 0x04
    19a4:	22 30       	cpi	r18, 0x02	; 2
    19a6:	31 05       	cpc	r19, r1
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <DIO_Port_Write+0x38>
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	61 f0       	breq	.+24     	; 0x19ca <DIO_Port_Write+0x4e>
    19b2:	1e c0       	rjmp	.+60     	; 0x19f0 <DIO_Port_Write+0x74>
    19b4:	2b 81       	ldd	r18, Y+3	; 0x03
    19b6:	3c 81       	ldd	r19, Y+4	; 0x04
    19b8:	22 30       	cpi	r18, 0x02	; 2
    19ba:	31 05       	cpc	r19, r1
    19bc:	81 f0       	breq	.+32     	; 0x19de <DIO_Port_Write+0x62>
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	9c 81       	ldd	r25, Y+4	; 0x04
    19c2:	83 30       	cpi	r24, 0x03	; 3
    19c4:	91 05       	cpc	r25, r1
    19c6:	81 f0       	breq	.+32     	; 0x19e8 <DIO_Port_Write+0x6c>
    19c8:	13 c0       	rjmp	.+38     	; 0x19f0 <DIO_Port_Write+0x74>
	case PORT_A:
		PORTA = data;
    19ca:	eb e3       	ldi	r30, 0x3B	; 59
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	80 83       	st	Z, r24
    19d2:	0e c0       	rjmp	.+28     	; 0x19f0 <DIO_Port_Write+0x74>
		break;
	case PORT_B:
		PORTB = data;
    19d4:	e8 e3       	ldi	r30, 0x38	; 56
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	80 83       	st	Z, r24
    19dc:	09 c0       	rjmp	.+18     	; 0x19f0 <DIO_Port_Write+0x74>
		break;
	case PORT_C:
		PORTC = data;
    19de:	e5 e3       	ldi	r30, 0x35	; 53
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	80 83       	st	Z, r24
    19e6:	04 c0       	rjmp	.+8      	; 0x19f0 <DIO_Port_Write+0x74>
		break;
	case PORT_D:
		PORTD = data;
    19e8:	e2 e3       	ldi	r30, 0x32	; 50
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	80 83       	st	Z, r24
		break;
	}
}
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <DIO_Read>:

Dio_Status_Type DIO_Read(Dio_Pin pin) {
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <DIO_Read+0x6>
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <DIO_Read+0x8>
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <DIO_Read+0xa>
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	8b 83       	std	Y+3, r24	; 0x03
	Dio_Port_Type port_var = pin / 8;
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	86 95       	lsr	r24
    1a12:	86 95       	lsr	r24
    1a14:	86 95       	lsr	r24
    1a16:	8a 83       	std	Y+2, r24	; 0x02
	Dio_Pin pin_var = pin % 8;
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	87 70       	andi	r24, 0x07	; 7
    1a1c:	89 83       	std	Y+1, r24	; 0x01
	switch (port_var) {
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	3e 83       	std	Y+6, r19	; 0x06
    1a26:	2d 83       	std	Y+5, r18	; 0x05
    1a28:	4d 81       	ldd	r20, Y+5	; 0x05
    1a2a:	5e 81       	ldd	r21, Y+6	; 0x06
    1a2c:	41 30       	cpi	r20, 0x01	; 1
    1a2e:	51 05       	cpc	r21, r1
    1a30:	79 f1       	breq	.+94     	; 0x1a90 <DIO_Read+0x92>
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	82 30       	cpi	r24, 0x02	; 2
    1a38:	91 05       	cpc	r25, r1
    1a3a:	34 f4       	brge	.+12     	; 0x1a48 <DIO_Read+0x4a>
    1a3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a3e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a40:	21 15       	cp	r18, r1
    1a42:	31 05       	cpc	r19, r1
    1a44:	69 f0       	breq	.+26     	; 0x1a60 <DIO_Read+0x62>
    1a46:	6c c0       	rjmp	.+216    	; 0x1b20 <DIO_Read+0x122>
    1a48:	4d 81       	ldd	r20, Y+5	; 0x05
    1a4a:	5e 81       	ldd	r21, Y+6	; 0x06
    1a4c:	42 30       	cpi	r20, 0x02	; 2
    1a4e:	51 05       	cpc	r21, r1
    1a50:	b9 f1       	breq	.+110    	; 0x1ac0 <DIO_Read+0xc2>
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	83 30       	cpi	r24, 0x03	; 3
    1a58:	91 05       	cpc	r25, r1
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <DIO_Read+0x60>
    1a5c:	49 c0       	rjmp	.+146    	; 0x1af0 <DIO_Read+0xf2>
    1a5e:	60 c0       	rjmp	.+192    	; 0x1b20 <DIO_Read+0x122>
	case PORT_A:
		if (GET_BIT(PINA, pin_var)) {
    1a60:	e9 e3       	ldi	r30, 0x39	; 57
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	88 2f       	mov	r24, r24
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a9 01       	movw	r20, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <DIO_Read+0x7a>
    1a74:	55 95       	asr	r21
    1a76:	47 95       	ror	r20
    1a78:	8a 95       	dec	r24
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <DIO_Read+0x76>
    1a7c:	ca 01       	movw	r24, r20
    1a7e:	81 70       	andi	r24, 0x01	; 1
    1a80:	90 70       	andi	r25, 0x00	; 0
    1a82:	88 23       	and	r24, r24
    1a84:	19 f0       	breq	.+6      	; 0x1a8c <DIO_Read+0x8e>
			return High;
    1a86:	51 e0       	ldi	r21, 0x01	; 1
    1a88:	5c 83       	std	Y+4, r21	; 0x04
    1a8a:	4b c0       	rjmp	.+150    	; 0x1b22 <DIO_Read+0x124>
		} else {
			return Low;
    1a8c:	1c 82       	std	Y+4, r1	; 0x04
    1a8e:	49 c0       	rjmp	.+146    	; 0x1b22 <DIO_Read+0x124>
		}
		break;
	case PORT_B:
		if (GET_BIT(PINB, pin_var)) {
    1a90:	e6 e3       	ldi	r30, 0x36	; 54
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	88 2f       	mov	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a9 01       	movw	r20, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <DIO_Read+0xaa>
    1aa4:	55 95       	asr	r21
    1aa6:	47 95       	ror	r20
    1aa8:	8a 95       	dec	r24
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <DIO_Read+0xa6>
    1aac:	ca 01       	movw	r24, r20
    1aae:	81 70       	andi	r24, 0x01	; 1
    1ab0:	90 70       	andi	r25, 0x00	; 0
    1ab2:	88 23       	and	r24, r24
    1ab4:	19 f0       	breq	.+6      	; 0x1abc <DIO_Read+0xbe>
			return High;
    1ab6:	51 e0       	ldi	r21, 0x01	; 1
    1ab8:	5c 83       	std	Y+4, r21	; 0x04
    1aba:	33 c0       	rjmp	.+102    	; 0x1b22 <DIO_Read+0x124>
		} else {
			return Low;
    1abc:	1c 82       	std	Y+4, r1	; 0x04
    1abe:	31 c0       	rjmp	.+98     	; 0x1b22 <DIO_Read+0x124>
		}
		break;
	case PORT_C:
		if (GET_BIT(PINC, pin_var)) {
    1ac0:	e3 e3       	ldi	r30, 0x33	; 51
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	88 2f       	mov	r24, r24
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a9 01       	movw	r20, r18
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <DIO_Read+0xda>
    1ad4:	55 95       	asr	r21
    1ad6:	47 95       	ror	r20
    1ad8:	8a 95       	dec	r24
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <DIO_Read+0xd6>
    1adc:	ca 01       	movw	r24, r20
    1ade:	81 70       	andi	r24, 0x01	; 1
    1ae0:	90 70       	andi	r25, 0x00	; 0
    1ae2:	88 23       	and	r24, r24
    1ae4:	19 f0       	breq	.+6      	; 0x1aec <DIO_Read+0xee>
			return High;
    1ae6:	51 e0       	ldi	r21, 0x01	; 1
    1ae8:	5c 83       	std	Y+4, r21	; 0x04
    1aea:	1b c0       	rjmp	.+54     	; 0x1b22 <DIO_Read+0x124>
		} else {
			return Low;
    1aec:	1c 82       	std	Y+4, r1	; 0x04
    1aee:	19 c0       	rjmp	.+50     	; 0x1b22 <DIO_Read+0x124>
		}
		break;
	case PORT_D:
		if (GET_BIT(PIND, pin_var)) {
    1af0:	e0 e3       	ldi	r30, 0x30	; 48
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a9 01       	movw	r20, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <DIO_Read+0x10a>
    1b04:	55 95       	asr	r21
    1b06:	47 95       	ror	r20
    1b08:	8a 95       	dec	r24
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <DIO_Read+0x106>
    1b0c:	ca 01       	movw	r24, r20
    1b0e:	81 70       	andi	r24, 0x01	; 1
    1b10:	90 70       	andi	r25, 0x00	; 0
    1b12:	88 23       	and	r24, r24
    1b14:	19 f0       	breq	.+6      	; 0x1b1c <DIO_Read+0x11e>
			return High;
    1b16:	51 e0       	ldi	r21, 0x01	; 1
    1b18:	5c 83       	std	Y+4, r21	; 0x04
    1b1a:	03 c0       	rjmp	.+6      	; 0x1b22 <DIO_Read+0x124>
		} else {
			return Low;
    1b1c:	1c 82       	std	Y+4, r1	; 0x04
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <DIO_Read+0x124>
		}
		break;
	default:
		break;
	}
	return Low;
    1b20:	1c 82       	std	Y+4, r1	; 0x04
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b24:	26 96       	adiw	r28, 0x06	; 6
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <DIO_Init>:

void DIO_Init(void) {
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <DIO_Init+0x6>
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <DIO_Init+0x8>
    1b3e:	0f 92       	push	r0
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < (sizeof(init_pins) / sizeof(init_pins[0])); i++) {
    1b44:	1b 82       	std	Y+3, r1	; 0x03
    1b46:	1a 82       	std	Y+2, r1	; 0x02
    1b48:	06 c1       	rjmp	.+524    	; 0x1d56 <DIO_Init+0x220>
		Dio_Pin pin = init_pins[i].pin % 8;
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	fc 01       	movw	r30, r24
    1b54:	ee 57       	subi	r30, 0x7E	; 126
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	80 81       	ld	r24, Z
    1b5a:	87 70       	andi	r24, 0x07	; 7
    1b5c:	89 83       	std	Y+1, r24	; 0x01
		switch ((init_pins[i].pin/8)) {
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	9b 81       	ldd	r25, Y+3	; 0x03
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	fc 01       	movw	r30, r24
    1b68:	ee 57       	subi	r30, 0x7E	; 126
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 81       	ld	r24, Z
    1b6e:	86 95       	lsr	r24
    1b70:	86 95       	lsr	r24
    1b72:	86 95       	lsr	r24
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	3d 83       	std	Y+5, r19	; 0x05
    1b7a:	2c 83       	std	Y+4, r18	; 0x04
    1b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	91 05       	cpc	r25, r1
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <DIO_Init+0x52>
    1b86:	4a c0       	rjmp	.+148    	; 0x1c1c <DIO_Init+0xe6>
    1b88:	2c 81       	ldd	r18, Y+4	; 0x04
    1b8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	31 05       	cpc	r19, r1
    1b90:	2c f4       	brge	.+10     	; 0x1b9c <DIO_Init+0x66>
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	9d 81       	ldd	r25, Y+5	; 0x05
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	71 f0       	breq	.+28     	; 0x1bb6 <DIO_Init+0x80>
    1b9a:	d8 c0       	rjmp	.+432    	; 0x1d4c <DIO_Init+0x216>
    1b9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <DIO_Init+0x72>
    1ba6:	6d c0       	rjmp	.+218    	; 0x1c82 <DIO_Init+0x14c>
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    1baa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bac:	83 30       	cpi	r24, 0x03	; 3
    1bae:	91 05       	cpc	r25, r1
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <DIO_Init+0x7e>
    1bb2:	9a c0       	rjmp	.+308    	; 0x1ce8 <DIO_Init+0x1b2>
    1bb4:	cb c0       	rjmp	.+406    	; 0x1d4c <DIO_Init+0x216>
		case PORT_A:
			if (init_pins[i].direction) {
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	ed 57       	subi	r30, 0x7D	; 125
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	80 81       	ld	r24, Z
    1bc6:	88 23       	and	r24, r24
    1bc8:	a1 f0       	breq	.+40     	; 0x1bf2 <DIO_Init+0xbc>
				SET_BIT(DDRA, pin);
    1bca:	aa e3       	ldi	r26, 0x3A	; 58
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	ea e3       	ldi	r30, 0x3A	; 58
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 2e       	mov	r0, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <DIO_Init+0xb2>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	0a 94       	dec	r0
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <DIO_Init+0xae>
    1bec:	84 2b       	or	r24, r20
    1bee:	8c 93       	st	X, r24
    1bf0:	ad c0       	rjmp	.+346    	; 0x1d4c <DIO_Init+0x216>
			} else {
				CLEAR_BIT(DDRA, pin);
    1bf2:	aa e3       	ldi	r26, 0x3A	; 58
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	ea e3       	ldi	r30, 0x3A	; 58
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	02 2e       	mov	r0, r18
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <DIO_Init+0xda>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	0a 94       	dec	r0
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <DIO_Init+0xd6>
    1c14:	80 95       	com	r24
    1c16:	84 23       	and	r24, r20
    1c18:	8c 93       	st	X, r24
    1c1a:	98 c0       	rjmp	.+304    	; 0x1d4c <DIO_Init+0x216>
			}
			break;
		case PORT_B:
			if (init_pins[i].direction) {
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	fc 01       	movw	r30, r24
    1c26:	ed 57       	subi	r30, 0x7D	; 125
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 81       	ld	r24, Z
    1c2c:	88 23       	and	r24, r24
    1c2e:	a1 f0       	breq	.+40     	; 0x1c58 <DIO_Init+0x122>
				SET_BIT(DDRB, pin);
    1c30:	a7 e3       	ldi	r26, 0x37	; 55
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e7 e3       	ldi	r30, 0x37	; 55
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 2e       	mov	r0, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <DIO_Init+0x118>
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	0a 94       	dec	r0
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <DIO_Init+0x114>
    1c52:	84 2b       	or	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	7a c0       	rjmp	.+244    	; 0x1d4c <DIO_Init+0x216>
			} else {
				CLEAR_BIT(DDRB, pin);
    1c58:	a7 e3       	ldi	r26, 0x37	; 55
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e7 e3       	ldi	r30, 0x37	; 55
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <DIO_Init+0x140>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <DIO_Init+0x13c>
    1c7a:	80 95       	com	r24
    1c7c:	84 23       	and	r24, r20
    1c7e:	8c 93       	st	X, r24
    1c80:	65 c0       	rjmp	.+202    	; 0x1d4c <DIO_Init+0x216>
			}
			break;
		case PORT_C:
			if (init_pins[i].direction) {
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	9b 81       	ldd	r25, Y+3	; 0x03
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	ed 57       	subi	r30, 0x7D	; 125
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 81       	ld	r24, Z
    1c92:	88 23       	and	r24, r24
    1c94:	a1 f0       	breq	.+40     	; 0x1cbe <DIO_Init+0x188>
				SET_BIT(DDRC, pin);
    1c96:	a4 e3       	ldi	r26, 0x34	; 52
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e4 e3       	ldi	r30, 0x34	; 52
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	02 2e       	mov	r0, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <DIO_Init+0x17e>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	0a 94       	dec	r0
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <DIO_Init+0x17a>
    1cb8:	84 2b       	or	r24, r20
    1cba:	8c 93       	st	X, r24
    1cbc:	47 c0       	rjmp	.+142    	; 0x1d4c <DIO_Init+0x216>
			} else {
				CLEAR_BIT(DDRC, pin);
    1cbe:	a4 e3       	ldi	r26, 0x34	; 52
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e4 e3       	ldi	r30, 0x34	; 52
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	48 2f       	mov	r20, r24
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <DIO_Init+0x1a6>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <DIO_Init+0x1a2>
    1ce0:	80 95       	com	r24
    1ce2:	84 23       	and	r24, r20
    1ce4:	8c 93       	st	X, r24
    1ce6:	32 c0       	rjmp	.+100    	; 0x1d4c <DIO_Init+0x216>
			}
			break;
		case PORT_D:
			if (init_pins[i].direction) {
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	9b 81       	ldd	r25, Y+3	; 0x03
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	ed 57       	subi	r30, 0x7D	; 125
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	80 81       	ld	r24, Z
    1cf8:	88 23       	and	r24, r24
    1cfa:	a1 f0       	breq	.+40     	; 0x1d24 <DIO_Init+0x1ee>
				SET_BIT(DDRD, pin);
    1cfc:	a1 e3       	ldi	r26, 0x31	; 49
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e1 e3       	ldi	r30, 0x31	; 49
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	48 2f       	mov	r20, r24
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <DIO_Init+0x1e4>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <DIO_Init+0x1e0>
    1d1e:	84 2b       	or	r24, r20
    1d20:	8c 93       	st	X, r24
    1d22:	14 c0       	rjmp	.+40     	; 0x1d4c <DIO_Init+0x216>
			} else {
				CLEAR_BIT(DDRD, pin);
    1d24:	a1 e3       	ldi	r26, 0x31	; 49
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e1 e3       	ldi	r30, 0x31	; 49
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	48 2f       	mov	r20, r24
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	02 2e       	mov	r0, r18
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <DIO_Init+0x20c>
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	0a 94       	dec	r0
    1d44:	e2 f7       	brpl	.-8      	; 0x1d3e <DIO_Init+0x208>
    1d46:	80 95       	com	r24
    1d48:	84 23       	and	r24, r20
    1d4a:	8c 93       	st	X, r24
	}
	return Low;
}

void DIO_Init(void) {
	for (int i = 0; i < (sizeof(init_pins) / sizeof(init_pins[0])); i++) {
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	9b 83       	std	Y+3, r25	; 0x03
    1d54:	8a 83       	std	Y+2, r24	; 0x02
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5a:	86 30       	cpi	r24, 0x06	; 6
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	08 f4       	brcc	.+2      	; 0x1d62 <DIO_Init+0x22c>
    1d60:	f4 ce       	rjmp	.-536    	; 0x1b4a <DIO_Init+0x14>
			break;
		default:
			break;
		}
	}
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <adc_init>:
 *      Author: M.Eltokhy
 */

#include "ADC.h"

void adc_init(void) {
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
	//Enable ADC
#if ADC_Enable == ENABLE
	SET_BIT(ADCSRA, ADEN);
    1d7a:	a6 e2       	ldi	r26, 0x26	; 38
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e6 e2       	ldi	r30, 0x26	; 38
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	80 68       	ori	r24, 0x80	; 128
    1d86:	8c 93       	st	X, r24
	//set vref
	ADMUX |= (ADC_Source << 6);
    1d88:	a7 e2       	ldi	r26, 0x27	; 39
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e7 e2       	ldi	r30, 0x27	; 39
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	80 6c       	ori	r24, 0xC0	; 192
    1d94:	8c 93       	st	X, r24
	//set prescaler
	ADCSRA |= ADC_prescaler;
    1d96:	a6 e2       	ldi	r26, 0x26	; 38
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e6 e2       	ldi	r30, 0x26	; 38
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	87 60       	ori	r24, 0x07	; 7
    1da2:	8c 93       	st	X, r24
#endif

}
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <adc_read>:

uint16 adc_read(uint8 ch) {
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	0f 92       	push	r0
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	89 83       	std	Y+1, r24	; 0x01
	//choose channel
	ADMUX = (ADMUX & 0xe0) | (ch & 0x1f);
    1db6:	a7 e2       	ldi	r26, 0x27	; 39
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e7 e2       	ldi	r30, 0x27	; 39
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	98 2f       	mov	r25, r24
    1dc2:	90 7e       	andi	r25, 0xE0	; 224
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	8f 71       	andi	r24, 0x1F	; 31
    1dc8:	89 2b       	or	r24, r25
    1dca:	8c 93       	st	X, r24
	//start conversion
	SET_BIT(ADCSRA, ADSC);
    1dcc:	a6 e2       	ldi	r26, 0x26	; 38
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e6 e2       	ldi	r30, 0x26	; 38
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	80 64       	ori	r24, 0x40	; 64
    1dd8:	8c 93       	st	X, r24
	//wait for conversion
	while (!GET_BIT(ADCSRA, ADIF));
    1dda:	e6 e2       	ldi	r30, 0x26	; 38
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	80 71       	andi	r24, 0x10	; 16
    1de6:	90 70       	andi	r25, 0x00	; 0
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	b9 f3       	breq	.-18     	; 0x1dda <adc_read+0x30>
	SET_BIT(ADCSRA, ADIF);
    1dec:	a6 e2       	ldi	r26, 0x26	; 38
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e6 e2       	ldi	r30, 0x26	; 38
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	80 61       	ori	r24, 0x10	; 16
    1df8:	8c 93       	st	X, r24
	return ADC;
    1dfa:	e4 e2       	ldi	r30, 0x24	; 36
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
}
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <seven_display_number>:
 *      Author: M.Eltokhy
 */

#include "seven_segment.h"

void seven_display_number(uint8 n) {
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	ea 97       	sbiw	r28, 0x3a	; 58
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	8a ab       	std	Y+50, r24	; 0x32
	uint8 u = n % 10;
    1e20:	8a a9       	ldd	r24, Y+50	; 0x32
    1e22:	9a e0       	ldi	r25, 0x0A	; 10
    1e24:	69 2f       	mov	r22, r25
    1e26:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__udivmodqi4>
    1e2a:	89 2f       	mov	r24, r25
    1e2c:	89 ab       	std	Y+49, r24	; 0x31
	DIO_Write(PORT_B1, High);
    1e2e:	89 e0       	ldi	r24, 0x09	; 9
    1e30:	61 e0       	ldi	r22, 0x01	; 1
    1e32:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_B2, Low);
    1e36:	8a e0       	ldi	r24, 0x0A	; 10
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_A4,!GET_BIT(u,0));
    1e3e:	89 a9       	ldd	r24, Y+49	; 0x31
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	81 70       	andi	r24, 0x01	; 1
    1e46:	90 70       	andi	r25, 0x00	; 0
    1e48:	1a ae       	std	Y+58, r1	; 0x3a
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	11 f4       	brne	.+4      	; 0x1e52 <seven_display_number+0x48>
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	8a af       	std	Y+58, r24	; 0x3a
    1e52:	84 e0       	ldi	r24, 0x04	; 4
    1e54:	6a ad       	ldd	r22, Y+58	; 0x3a
    1e56:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_A5,!GET_BIT(u,1));
    1e5a:	89 a9       	ldd	r24, Y+49	; 0x31
    1e5c:	88 2f       	mov	r24, r24
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	82 70       	andi	r24, 0x02	; 2
    1e62:	90 70       	andi	r25, 0x00	; 0
    1e64:	19 ae       	std	Y+57, r1	; 0x39
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	11 f4       	brne	.+4      	; 0x1e6e <seven_display_number+0x64>
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	89 af       	std	Y+57, r24	; 0x39
    1e6e:	85 e0       	ldi	r24, 0x05	; 5
    1e70:	69 ad       	ldd	r22, Y+57	; 0x39
    1e72:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_A6,!GET_BIT(u,2));
    1e76:	89 a9       	ldd	r24, Y+49	; 0x31
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	84 70       	andi	r24, 0x04	; 4
    1e7e:	90 70       	andi	r25, 0x00	; 0
    1e80:	18 ae       	std	Y+56, r1	; 0x38
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	11 f4       	brne	.+4      	; 0x1e8a <seven_display_number+0x80>
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	88 af       	std	Y+56, r24	; 0x38
    1e8a:	86 e0       	ldi	r24, 0x06	; 6
    1e8c:	68 ad       	ldd	r22, Y+56	; 0x38
    1e8e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_A7,!GET_BIT(u,3));
    1e92:	89 a9       	ldd	r24, Y+49	; 0x31
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	88 70       	andi	r24, 0x08	; 8
    1e9a:	90 70       	andi	r25, 0x00	; 0
    1e9c:	1f aa       	std	Y+55, r1	; 0x37
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	11 f4       	brne	.+4      	; 0x1ea6 <seven_display_number+0x9c>
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	8f ab       	std	Y+55, r24	; 0x37
    1ea6:	87 e0       	ldi	r24, 0x07	; 7
    1ea8:	6f a9       	ldd	r22, Y+55	; 0x37
    1eaa:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	a8 ec       	ldi	r26, 0xC8	; 200
    1eb4:	b2 e4       	ldi	r27, 0x42	; 66
    1eb6:	8d a7       	std	Y+45, r24	; 0x2d
    1eb8:	9e a7       	std	Y+46, r25	; 0x2e
    1eba:	af a7       	std	Y+47, r26	; 0x2f
    1ebc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ebe:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ec0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ec2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec6:	2b ea       	ldi	r18, 0xAB	; 171
    1ec8:	3a ea       	ldi	r19, 0xAA	; 170
    1eca:	4a ea       	ldi	r20, 0xAA	; 170
    1ecc:	50 e4       	ldi	r21, 0x40	; 64
    1ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	89 a7       	std	Y+41, r24	; 0x29
    1ed8:	9a a7       	std	Y+42, r25	; 0x2a
    1eda:	ab a7       	std	Y+43, r26	; 0x2b
    1edc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ede:	69 a5       	ldd	r22, Y+41	; 0x29
    1ee0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ee2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e8       	ldi	r20, 0x80	; 128
    1eec:	5f e3       	ldi	r21, 0x3F	; 63
    1eee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef2:	88 23       	and	r24, r24
    1ef4:	1c f4       	brge	.+6      	; 0x1efc <seven_display_number+0xf2>
		__ticks = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	88 a7       	std	Y+40, r24	; 0x28
    1efa:	91 c0       	rjmp	.+290    	; 0x201e <seven_display_number+0x214>
	else if (__tmp > 255)
    1efc:	69 a5       	ldd	r22, Y+41	; 0x29
    1efe:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f00:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f02:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4f e7       	ldi	r20, 0x7F	; 127
    1f0a:	53 e4       	ldi	r21, 0x43	; 67
    1f0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f10:	18 16       	cp	r1, r24
    1f12:	0c f0       	brlt	.+2      	; 0x1f16 <seven_display_number+0x10c>
    1f14:	7b c0       	rjmp	.+246    	; 0x200c <seven_display_number+0x202>
	{
		_delay_ms(__us / 1000.0);
    1f16:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f18:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a e7       	ldi	r20, 0x7A	; 122
    1f24:	54 e4       	ldi	r21, 0x44	; 68
    1f26:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	8c a3       	std	Y+36, r24	; 0x24
    1f30:	9d a3       	std	Y+37, r25	; 0x25
    1f32:	ae a3       	std	Y+38, r26	; 0x26
    1f34:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f36:	6c a1       	ldd	r22, Y+36	; 0x24
    1f38:	7d a1       	ldd	r23, Y+37	; 0x25
    1f3a:	8e a1       	ldd	r24, Y+38	; 0x26
    1f3c:	9f a1       	ldd	r25, Y+39	; 0x27
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	4a e7       	ldi	r20, 0x7A	; 122
    1f44:	55 e4       	ldi	r21, 0x45	; 69
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	88 a3       	std	Y+32, r24	; 0x20
    1f50:	99 a3       	std	Y+33, r25	; 0x21
    1f52:	aa a3       	std	Y+34, r26	; 0x22
    1f54:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f56:	68 a1       	ldd	r22, Y+32	; 0x20
    1f58:	79 a1       	ldd	r23, Y+33	; 0x21
    1f5a:	8a a1       	ldd	r24, Y+34	; 0x22
    1f5c:	9b a1       	ldd	r25, Y+35	; 0x23
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f6a:	88 23       	and	r24, r24
    1f6c:	2c f4       	brge	.+10     	; 0x1f78 <seven_display_number+0x16e>
		__ticks = 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9f 8f       	std	Y+31, r25	; 0x1f
    1f74:	8e 8f       	std	Y+30, r24	; 0x1e
    1f76:	3f c0       	rjmp	.+126    	; 0x1ff6 <seven_display_number+0x1ec>
	else if (__tmp > 65535)
    1f78:	68 a1       	ldd	r22, Y+32	; 0x20
    1f7a:	79 a1       	ldd	r23, Y+33	; 0x21
    1f7c:	8a a1       	ldd	r24, Y+34	; 0x22
    1f7e:	9b a1       	ldd	r25, Y+35	; 0x23
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	57 e4       	ldi	r21, 0x47	; 71
    1f88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f8c:	18 16       	cp	r1, r24
    1f8e:	4c f5       	brge	.+82     	; 0x1fe2 <seven_display_number+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f90:	6c a1       	ldd	r22, Y+36	; 0x24
    1f92:	7d a1       	ldd	r23, Y+37	; 0x25
    1f94:	8e a1       	ldd	r24, Y+38	; 0x26
    1f96:	9f a1       	ldd	r25, Y+39	; 0x27
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e2       	ldi	r20, 0x20	; 32
    1f9e:	51 e4       	ldi	r21, 0x41	; 65
    1fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9f 8f       	std	Y+31, r25	; 0x1f
    1fb6:	8e 8f       	std	Y+30, r24	; 0x1e
    1fb8:	0f c0       	rjmp	.+30     	; 0x1fd8 <seven_display_number+0x1ce>
    1fba:	80 e9       	ldi	r24, 0x90	; 144
    1fbc:	91 e0       	ldi	r25, 0x01	; 1
    1fbe:	9d 8f       	std	Y+29, r25	; 0x1d
    1fc0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fc2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fc4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <seven_display_number+0x1bc>
    1fca:	9d 8f       	std	Y+29, r25	; 0x1d
    1fcc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fd0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	9f 8f       	std	Y+31, r25	; 0x1f
    1fd6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fda:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	69 f7       	brne	.-38     	; 0x1fba <seven_display_number+0x1b0>
    1fe0:	24 c0       	rjmp	.+72     	; 0x202a <seven_display_number+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe2:	68 a1       	ldd	r22, Y+32	; 0x20
    1fe4:	79 a1       	ldd	r23, Y+33	; 0x21
    1fe6:	8a a1       	ldd	r24, Y+34	; 0x22
    1fe8:	9b a1       	ldd	r25, Y+35	; 0x23
    1fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9f 8f       	std	Y+31, r25	; 0x1f
    1ff4:	8e 8f       	std	Y+30, r24	; 0x1e
    1ff6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ff8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ffa:	9b 8f       	std	Y+27, r25	; 0x1b
    1ffc:	8a 8f       	std	Y+26, r24	; 0x1a
    1ffe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2000:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <seven_display_number+0x1f8>
    2006:	9b 8f       	std	Y+27, r25	; 0x1b
    2008:	8a 8f       	std	Y+26, r24	; 0x1a
    200a:	0f c0       	rjmp	.+30     	; 0x202a <seven_display_number+0x220>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    200c:	69 a5       	ldd	r22, Y+41	; 0x29
    200e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2010:	8b a5       	ldd	r24, Y+43	; 0x2b
    2012:	9c a5       	ldd	r25, Y+44	; 0x2c
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	88 a7       	std	Y+40, r24	; 0x28
    201e:	88 a5       	ldd	r24, Y+40	; 0x28
    2020:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2022:	89 8d       	ldd	r24, Y+25	; 0x19
    2024:	8a 95       	dec	r24
    2026:	f1 f7       	brne	.-4      	; 0x2024 <seven_display_number+0x21a>
    2028:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(100);
	u = n / 10;
    202a:	8a a9       	ldd	r24, Y+50	; 0x32
    202c:	9a e0       	ldi	r25, 0x0A	; 10
    202e:	69 2f       	mov	r22, r25
    2030:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__udivmodqi4>
    2034:	89 ab       	std	Y+49, r24	; 0x31
	DIO_Write(PORT_B1, Low);
    2036:	89 e0       	ldi	r24, 0x09	; 9
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_B2, High);
    203e:	8a e0       	ldi	r24, 0x0A	; 10
    2040:	61 e0       	ldi	r22, 0x01	; 1
    2042:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_A4,!GET_BIT(u,0));
    2046:	89 a9       	ldd	r24, Y+49	; 0x31
    2048:	88 2f       	mov	r24, r24
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	81 70       	andi	r24, 0x01	; 1
    204e:	90 70       	andi	r25, 0x00	; 0
    2050:	1e aa       	std	Y+54, r1	; 0x36
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	11 f4       	brne	.+4      	; 0x205a <seven_display_number+0x250>
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	8e ab       	std	Y+54, r24	; 0x36
    205a:	84 e0       	ldi	r24, 0x04	; 4
    205c:	6e a9       	ldd	r22, Y+54	; 0x36
    205e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_A5,!GET_BIT(u,1));
    2062:	89 a9       	ldd	r24, Y+49	; 0x31
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	82 70       	andi	r24, 0x02	; 2
    206a:	90 70       	andi	r25, 0x00	; 0
    206c:	1d aa       	std	Y+53, r1	; 0x35
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	11 f4       	brne	.+4      	; 0x2076 <seven_display_number+0x26c>
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	8d ab       	std	Y+53, r24	; 0x35
    2076:	85 e0       	ldi	r24, 0x05	; 5
    2078:	6d a9       	ldd	r22, Y+53	; 0x35
    207a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_A6,!GET_BIT(u,2));
    207e:	89 a9       	ldd	r24, Y+49	; 0x31
    2080:	88 2f       	mov	r24, r24
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	84 70       	andi	r24, 0x04	; 4
    2086:	90 70       	andi	r25, 0x00	; 0
    2088:	1c aa       	std	Y+52, r1	; 0x34
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	11 f4       	brne	.+4      	; 0x2092 <seven_display_number+0x288>
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	8c ab       	std	Y+52, r24	; 0x34
    2092:	86 e0       	ldi	r24, 0x06	; 6
    2094:	6c a9       	ldd	r22, Y+52	; 0x34
    2096:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_A7,!GET_BIT(u,3));
    209a:	89 a9       	ldd	r24, Y+49	; 0x31
    209c:	88 2f       	mov	r24, r24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	88 70       	andi	r24, 0x08	; 8
    20a2:	90 70       	andi	r25, 0x00	; 0
    20a4:	1b aa       	std	Y+51, r1	; 0x33
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	11 f4       	brne	.+4      	; 0x20ae <seven_display_number+0x2a4>
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	8b ab       	std	Y+51, r24	; 0x33
    20ae:	87 e0       	ldi	r24, 0x07	; 7
    20b0:	6b a9       	ldd	r22, Y+51	; 0x33
    20b2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	a8 ec       	ldi	r26, 0xC8	; 200
    20bc:	b2 e4       	ldi	r27, 0x42	; 66
    20be:	8d 8b       	std	Y+21, r24	; 0x15
    20c0:	9e 8b       	std	Y+22, r25	; 0x16
    20c2:	af 8b       	std	Y+23, r26	; 0x17
    20c4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20c6:	6d 89       	ldd	r22, Y+21	; 0x15
    20c8:	7e 89       	ldd	r23, Y+22	; 0x16
    20ca:	8f 89       	ldd	r24, Y+23	; 0x17
    20cc:	98 8d       	ldd	r25, Y+24	; 0x18
    20ce:	2b ea       	ldi	r18, 0xAB	; 171
    20d0:	3a ea       	ldi	r19, 0xAA	; 170
    20d2:	4a ea       	ldi	r20, 0xAA	; 170
    20d4:	50 e4       	ldi	r21, 0x40	; 64
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	89 8b       	std	Y+17, r24	; 0x11
    20e0:	9a 8b       	std	Y+18, r25	; 0x12
    20e2:	ab 8b       	std	Y+19, r26	; 0x13
    20e4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20e6:	69 89       	ldd	r22, Y+17	; 0x11
    20e8:	7a 89       	ldd	r23, Y+18	; 0x12
    20ea:	8b 89       	ldd	r24, Y+19	; 0x13
    20ec:	9c 89       	ldd	r25, Y+20	; 0x14
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e8       	ldi	r20, 0x80	; 128
    20f4:	5f e3       	ldi	r21, 0x3F	; 63
    20f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20fa:	88 23       	and	r24, r24
    20fc:	1c f4       	brge	.+6      	; 0x2104 <seven_display_number+0x2fa>
		__ticks = 1;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	88 8b       	std	Y+16, r24	; 0x10
    2102:	91 c0       	rjmp	.+290    	; 0x2226 <seven_display_number+0x41c>
	else if (__tmp > 255)
    2104:	69 89       	ldd	r22, Y+17	; 0x11
    2106:	7a 89       	ldd	r23, Y+18	; 0x12
    2108:	8b 89       	ldd	r24, Y+19	; 0x13
    210a:	9c 89       	ldd	r25, Y+20	; 0x14
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4f e7       	ldi	r20, 0x7F	; 127
    2112:	53 e4       	ldi	r21, 0x43	; 67
    2114:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2118:	18 16       	cp	r1, r24
    211a:	0c f0       	brlt	.+2      	; 0x211e <seven_display_number+0x314>
    211c:	7b c0       	rjmp	.+246    	; 0x2214 <seven_display_number+0x40a>
	{
		_delay_ms(__us / 1000.0);
    211e:	6d 89       	ldd	r22, Y+21	; 0x15
    2120:	7e 89       	ldd	r23, Y+22	; 0x16
    2122:	8f 89       	ldd	r24, Y+23	; 0x17
    2124:	98 8d       	ldd	r25, Y+24	; 0x18
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	4a e7       	ldi	r20, 0x7A	; 122
    212c:	54 e4       	ldi	r21, 0x44	; 68
    212e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	8c 87       	std	Y+12, r24	; 0x0c
    2138:	9d 87       	std	Y+13, r25	; 0x0d
    213a:	ae 87       	std	Y+14, r26	; 0x0e
    213c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2140:	7d 85       	ldd	r23, Y+13	; 0x0d
    2142:	8e 85       	ldd	r24, Y+14	; 0x0e
    2144:	9f 85       	ldd	r25, Y+15	; 0x0f
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a e7       	ldi	r20, 0x7A	; 122
    214c:	55 e4       	ldi	r21, 0x45	; 69
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	88 87       	std	Y+8, r24	; 0x08
    2158:	99 87       	std	Y+9, r25	; 0x09
    215a:	aa 87       	std	Y+10, r26	; 0x0a
    215c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    215e:	68 85       	ldd	r22, Y+8	; 0x08
    2160:	79 85       	ldd	r23, Y+9	; 0x09
    2162:	8a 85       	ldd	r24, Y+10	; 0x0a
    2164:	9b 85       	ldd	r25, Y+11	; 0x0b
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <seven_display_number+0x376>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9f 83       	std	Y+7, r25	; 0x07
    217c:	8e 83       	std	Y+6, r24	; 0x06
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <seven_display_number+0x3f4>
	else if (__tmp > 65535)
    2180:	68 85       	ldd	r22, Y+8	; 0x08
    2182:	79 85       	ldd	r23, Y+9	; 0x09
    2184:	8a 85       	ldd	r24, Y+10	; 0x0a
    2186:	9b 85       	ldd	r25, Y+11	; 0x0b
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <seven_display_number+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	6c 85       	ldd	r22, Y+12	; 0x0c
    219a:	7d 85       	ldd	r23, Y+13	; 0x0d
    219c:	8e 85       	ldd	r24, Y+14	; 0x0e
    219e:	9f 85       	ldd	r25, Y+15	; 0x0f
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9f 83       	std	Y+7, r25	; 0x07
    21be:	8e 83       	std	Y+6, r24	; 0x06
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <seven_display_number+0x3d6>
    21c2:	80 e9       	ldi	r24, 0x90	; 144
    21c4:	91 e0       	ldi	r25, 0x01	; 1
    21c6:	9d 83       	std	Y+5, r25	; 0x05
    21c8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ca:	8c 81       	ldd	r24, Y+4	; 0x04
    21cc:	9d 81       	ldd	r25, Y+5	; 0x05
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <seven_display_number+0x3c4>
    21d2:	9d 83       	std	Y+5, r25	; 0x05
    21d4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8e 81       	ldd	r24, Y+6	; 0x06
    21d8:	9f 81       	ldd	r25, Y+7	; 0x07
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	9f 83       	std	Y+7, r25	; 0x07
    21de:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8e 81       	ldd	r24, Y+6	; 0x06
    21e2:	9f 81       	ldd	r25, Y+7	; 0x07
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <seven_display_number+0x3b8>
    21e8:	24 c0       	rjmp	.+72     	; 0x2232 <seven_display_number+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	68 85       	ldd	r22, Y+8	; 0x08
    21ec:	79 85       	ldd	r23, Y+9	; 0x09
    21ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    21f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9f 83       	std	Y+7, r25	; 0x07
    21fc:	8e 83       	std	Y+6, r24	; 0x06
    21fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2200:	9f 81       	ldd	r25, Y+7	; 0x07
    2202:	9b 83       	std	Y+3, r25	; 0x03
    2204:	8a 83       	std	Y+2, r24	; 0x02
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	9b 81       	ldd	r25, Y+3	; 0x03
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <seven_display_number+0x400>
    220e:	9b 83       	std	Y+3, r25	; 0x03
    2210:	8a 83       	std	Y+2, r24	; 0x02
    2212:	0f c0       	rjmp	.+30     	; 0x2232 <seven_display_number+0x428>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2214:	69 89       	ldd	r22, Y+17	; 0x11
    2216:	7a 89       	ldd	r23, Y+18	; 0x12
    2218:	8b 89       	ldd	r24, Y+19	; 0x13
    221a:	9c 89       	ldd	r25, Y+20	; 0x14
    221c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	88 8b       	std	Y+16, r24	; 0x10
    2226:	88 89       	ldd	r24, Y+16	; 0x10
    2228:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	8a 95       	dec	r24
    222e:	f1 f7       	brne	.-4      	; 0x222c <seven_display_number+0x422>
    2230:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    2232:	ea 96       	adiw	r28, 0x3a	; 58
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <lcd_init>:
 */

#include "LCD.h"


void lcd_init(void) {
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	2e 97       	sbiw	r28, 0x0e	; 14
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
	DDRA|=0xf0;
    2258:	aa e3       	ldi	r26, 0x3A	; 58
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	ea e3       	ldi	r30, 0x3A	; 58
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	80 6f       	ori	r24, 0xF0	; 240
    2264:	8c 93       	st	X, r24
	DDRB|=0x0e;
    2266:	a7 e3       	ldi	r26, 0x37	; 55
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e7 e3       	ldi	r30, 0x37	; 55
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	8e 60       	ori	r24, 0x0E	; 14
    2272:	8c 93       	st	X, r24
	DIO_Write(PORT_B2, Low);
    2274:	8a e0       	ldi	r24, 0x0A	; 10
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	a0 ea       	ldi	r26, 0xA0	; 160
    2282:	b1 e4       	ldi	r27, 0x41	; 65
    2284:	8b 87       	std	Y+11, r24	; 0x0b
    2286:	9c 87       	std	Y+12, r25	; 0x0c
    2288:	ad 87       	std	Y+13, r26	; 0x0d
    228a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228c:	6b 85       	ldd	r22, Y+11	; 0x0b
    228e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2290:	8d 85       	ldd	r24, Y+13	; 0x0d
    2292:	9e 85       	ldd	r25, Y+14	; 0x0e
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	4a e7       	ldi	r20, 0x7A	; 122
    229a:	55 e4       	ldi	r21, 0x45	; 69
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	8f 83       	std	Y+7, r24	; 0x07
    22a6:	98 87       	std	Y+8, r25	; 0x08
    22a8:	a9 87       	std	Y+9, r26	; 0x09
    22aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ac:	6f 81       	ldd	r22, Y+7	; 0x07
    22ae:	78 85       	ldd	r23, Y+8	; 0x08
    22b0:	89 85       	ldd	r24, Y+9	; 0x09
    22b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e8       	ldi	r20, 0x80	; 128
    22ba:	5f e3       	ldi	r21, 0x3F	; 63
    22bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c0:	88 23       	and	r24, r24
    22c2:	2c f4       	brge	.+10     	; 0x22ce <lcd_init+0x8a>
		__ticks = 1;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	9e 83       	std	Y+6, r25	; 0x06
    22ca:	8d 83       	std	Y+5, r24	; 0x05
    22cc:	3f c0       	rjmp	.+126    	; 0x234c <lcd_init+0x108>
	else if (__tmp > 65535)
    22ce:	6f 81       	ldd	r22, Y+7	; 0x07
    22d0:	78 85       	ldd	r23, Y+8	; 0x08
    22d2:	89 85       	ldd	r24, Y+9	; 0x09
    22d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	3f ef       	ldi	r19, 0xFF	; 255
    22da:	4f e7       	ldi	r20, 0x7F	; 127
    22dc:	57 e4       	ldi	r21, 0x47	; 71
    22de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e2:	18 16       	cp	r1, r24
    22e4:	4c f5       	brge	.+82     	; 0x2338 <lcd_init+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e2       	ldi	r20, 0x20	; 32
    22f4:	51 e4       	ldi	r21, 0x41	; 65
    22f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	8d 83       	std	Y+5, r24	; 0x05
    230e:	0f c0       	rjmp	.+30     	; 0x232e <lcd_init+0xea>
    2310:	80 e9       	ldi	r24, 0x90	; 144
    2312:	91 e0       	ldi	r25, 0x01	; 1
    2314:	9c 83       	std	Y+4, r25	; 0x04
    2316:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <lcd_init+0xd8>
    2320:	9c 83       	std	Y+4, r25	; 0x04
    2322:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	9e 83       	std	Y+6, r25	; 0x06
    232c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	69 f7       	brne	.-38     	; 0x2310 <lcd_init+0xcc>
    2336:	14 c0       	rjmp	.+40     	; 0x2360 <lcd_init+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2338:	6f 81       	ldd	r22, Y+7	; 0x07
    233a:	78 85       	ldd	r23, Y+8	; 0x08
    233c:	89 85       	ldd	r24, Y+9	; 0x09
    233e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9e 83       	std	Y+6, r25	; 0x06
    234a:	8d 83       	std	Y+5, r24	; 0x05
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	9a 83       	std	Y+2, r25	; 0x02
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	9a 81       	ldd	r25, Y+2	; 0x02
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <lcd_init+0x114>
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	lcd_cmd(0x01);
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	0e 94 ce 11 	call	0x239c	; 0x239c <lcd_cmd>
	lcd_cmd(0x33);
    2366:	83 e3       	ldi	r24, 0x33	; 51
    2368:	0e 94 ce 11 	call	0x239c	; 0x239c <lcd_cmd>
	lcd_cmd(0x32);
    236c:	82 e3       	ldi	r24, 0x32	; 50
    236e:	0e 94 ce 11 	call	0x239c	; 0x239c <lcd_cmd>
	lcd_cmd(0x28);
    2372:	88 e2       	ldi	r24, 0x28	; 40
    2374:	0e 94 ce 11 	call	0x239c	; 0x239c <lcd_cmd>
	lcd_cmd(0x0f);
    2378:	8f e0       	ldi	r24, 0x0F	; 15
    237a:	0e 94 ce 11 	call	0x239c	; 0x239c <lcd_cmd>
	lcd_cmd(0x06);
    237e:	86 e0       	ldi	r24, 0x06	; 6
    2380:	0e 94 ce 11 	call	0x239c	; 0x239c <lcd_cmd>
	lcd_cmd(0x01);
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	0e 94 ce 11 	call	0x239c	; 0x239c <lcd_cmd>
//	lcd_cmd(0x80);
}
    238a:	2e 96       	adiw	r28, 0x0e	; 14
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	cd bf       	out	0x3d, r28	; 61
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <lcd_cmd>:

void lcd_cmd(uint8 cmd) {
    239c:	0f 93       	push	r16
    239e:	1f 93       	push	r17
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	c1 56       	subi	r28, 0x61	; 97
    23aa:	d0 40       	sbci	r29, 0x00	; 0
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	fe 01       	movw	r30, r28
    23b8:	ef 59       	subi	r30, 0x9F	; 159
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 83       	st	Z, r24
	DIO_Write(PORT_B2, Low);
    23be:	8a e0       	ldi	r24, 0x0A	; 10
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_B1, Low);
    23c6:	89 e0       	ldi	r24, 0x09	; 9
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	(GET_BIT(cmd, 4)) ? DIO_Write(PORT_A4, High) : DIO_Write(PORT_A4, Low);
    23ce:	fe 01       	movw	r30, r28
    23d0:	ef 59       	subi	r30, 0x9F	; 159
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	88 2f       	mov	r24, r24
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	80 71       	andi	r24, 0x10	; 16
    23dc:	90 70       	andi	r25, 0x00	; 0
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	29 f0       	breq	.+10     	; 0x23ec <lcd_cmd+0x50>
    23e2:	84 e0       	ldi	r24, 0x04	; 4
    23e4:	61 e0       	ldi	r22, 0x01	; 1
    23e6:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    23ea:	04 c0       	rjmp	.+8      	; 0x23f4 <lcd_cmd+0x58>
    23ec:	84 e0       	ldi	r24, 0x04	; 4
    23ee:	60 e0       	ldi	r22, 0x00	; 0
    23f0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	(GET_BIT(cmd, 5)) ? DIO_Write(PORT_A5, High) : DIO_Write(PORT_A5, Low);
    23f4:	fe 01       	movw	r30, r28
    23f6:	ef 59       	subi	r30, 0x9F	; 159
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	80 81       	ld	r24, Z
    23fc:	88 2f       	mov	r24, r24
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	80 72       	andi	r24, 0x20	; 32
    2402:	90 70       	andi	r25, 0x00	; 0
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	29 f0       	breq	.+10     	; 0x2412 <lcd_cmd+0x76>
    2408:	85 e0       	ldi	r24, 0x05	; 5
    240a:	61 e0       	ldi	r22, 0x01	; 1
    240c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    2410:	04 c0       	rjmp	.+8      	; 0x241a <lcd_cmd+0x7e>
    2412:	85 e0       	ldi	r24, 0x05	; 5
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	(GET_BIT(cmd, 6)) ? DIO_Write(PORT_A6, High) : DIO_Write(PORT_A6, Low);
    241a:	fe 01       	movw	r30, r28
    241c:	ef 59       	subi	r30, 0x9F	; 159
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	80 81       	ld	r24, Z
    2422:	88 2f       	mov	r24, r24
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	80 74       	andi	r24, 0x40	; 64
    2428:	90 70       	andi	r25, 0x00	; 0
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	29 f0       	breq	.+10     	; 0x2438 <lcd_cmd+0x9c>
    242e:	86 e0       	ldi	r24, 0x06	; 6
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    2436:	04 c0       	rjmp	.+8      	; 0x2440 <lcd_cmd+0xa4>
    2438:	86 e0       	ldi	r24, 0x06	; 6
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	(GET_BIT(cmd, 7)) ? DIO_Write(PORT_A7, High) : DIO_Write(PORT_A7, Low);
    2440:	fe 01       	movw	r30, r28
    2442:	ef 59       	subi	r30, 0x9F	; 159
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	80 81       	ld	r24, Z
    2448:	88 23       	and	r24, r24
    244a:	2c f4       	brge	.+10     	; 0x2456 <lcd_cmd+0xba>
    244c:	87 e0       	ldi	r24, 0x07	; 7
    244e:	61 e0       	ldi	r22, 0x01	; 1
    2450:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    2454:	04 c0       	rjmp	.+8      	; 0x245e <lcd_cmd+0xc2>
    2456:	87 e0       	ldi	r24, 0x07	; 7
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_B3, High);
    245e:	8b e0       	ldi	r24, 0x0B	; 11
    2460:	61 e0       	ldi	r22, 0x01	; 1
    2462:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    2466:	fe 01       	movw	r30, r28
    2468:	e3 5a       	subi	r30, 0xA3	; 163
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	a0 e2       	ldi	r26, 0x20	; 32
    2472:	b1 e4       	ldi	r27, 0x41	; 65
    2474:	80 83       	st	Z, r24
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	a2 83       	std	Z+2, r26	; 0x02
    247a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    247c:	8e 01       	movw	r16, r28
    247e:	07 5a       	subi	r16, 0xA7	; 167
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	fe 01       	movw	r30, r28
    2484:	e3 5a       	subi	r30, 0xA3	; 163
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	60 81       	ld	r22, Z
    248a:	71 81       	ldd	r23, Z+1	; 0x01
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	93 81       	ldd	r25, Z+3	; 0x03
    2490:	2b ea       	ldi	r18, 0xAB	; 171
    2492:	3a ea       	ldi	r19, 0xAA	; 170
    2494:	4a ea       	ldi	r20, 0xAA	; 170
    2496:	50 e4       	ldi	r21, 0x40	; 64
    2498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	f8 01       	movw	r30, r16
    24a2:	80 83       	st	Z, r24
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	a2 83       	std	Z+2, r26	; 0x02
    24a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24aa:	fe 01       	movw	r30, r28
    24ac:	e7 5a       	subi	r30, 0xA7	; 167
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	60 81       	ld	r22, Z
    24b2:	71 81       	ldd	r23, Z+1	; 0x01
    24b4:	82 81       	ldd	r24, Z+2	; 0x02
    24b6:	93 81       	ldd	r25, Z+3	; 0x03
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e8       	ldi	r20, 0x80	; 128
    24be:	5f e3       	ldi	r21, 0x3F	; 63
    24c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24c4:	88 23       	and	r24, r24
    24c6:	34 f4       	brge	.+12     	; 0x24d4 <lcd_cmd+0x138>
		__ticks = 1;
    24c8:	fe 01       	movw	r30, r28
    24ca:	e8 5a       	subi	r30, 0xA8	; 168
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	80 83       	st	Z, r24
    24d2:	e0 c0       	rjmp	.+448    	; 0x2694 <lcd_cmd+0x2f8>
	else if (__tmp > 255)
    24d4:	fe 01       	movw	r30, r28
    24d6:	e7 5a       	subi	r30, 0xA7	; 167
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	4f e7       	ldi	r20, 0x7F	; 127
    24e8:	53 e4       	ldi	r21, 0x43	; 67
    24ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ee:	18 16       	cp	r1, r24
    24f0:	0c f0       	brlt	.+2      	; 0x24f4 <lcd_cmd+0x158>
    24f2:	c0 c0       	rjmp	.+384    	; 0x2674 <lcd_cmd+0x2d8>
	{
		_delay_ms(__us / 1000.0);
    24f4:	fe 01       	movw	r30, r28
    24f6:	e3 5a       	subi	r30, 0xA3	; 163
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	60 81       	ld	r22, Z
    24fc:	71 81       	ldd	r23, Z+1	; 0x01
    24fe:	82 81       	ldd	r24, Z+2	; 0x02
    2500:	93 81       	ldd	r25, Z+3	; 0x03
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	4a e7       	ldi	r20, 0x7A	; 122
    2508:	54 e4       	ldi	r21, 0x44	; 68
    250a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	fe 01       	movw	r30, r28
    2514:	ec 5a       	subi	r30, 0xAC	; 172
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 83       	st	Z, r24
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	a2 83       	std	Z+2, r26	; 0x02
    251e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2520:	8e 01       	movw	r16, r28
    2522:	00 5b       	subi	r16, 0xB0	; 176
    2524:	1f 4f       	sbci	r17, 0xFF	; 255
    2526:	fe 01       	movw	r30, r28
    2528:	ec 5a       	subi	r30, 0xAC	; 172
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	60 81       	ld	r22, Z
    252e:	71 81       	ldd	r23, Z+1	; 0x01
    2530:	82 81       	ldd	r24, Z+2	; 0x02
    2532:	93 81       	ldd	r25, Z+3	; 0x03
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	4a e7       	ldi	r20, 0x7A	; 122
    253a:	55 e4       	ldi	r21, 0x45	; 69
    253c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	f8 01       	movw	r30, r16
    2546:	80 83       	st	Z, r24
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	a2 83       	std	Z+2, r26	; 0x02
    254c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    254e:	fe 01       	movw	r30, r28
    2550:	e0 5b       	subi	r30, 0xB0	; 176
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	60 81       	ld	r22, Z
    2556:	71 81       	ldd	r23, Z+1	; 0x01
    2558:	82 81       	ldd	r24, Z+2	; 0x02
    255a:	93 81       	ldd	r25, Z+3	; 0x03
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	44 f4       	brge	.+16     	; 0x257c <lcd_cmd+0x1e0>
		__ticks = 1;
    256c:	fe 01       	movw	r30, r28
    256e:	e2 5b       	subi	r30, 0xB2	; 178
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
    257a:	64 c0       	rjmp	.+200    	; 0x2644 <lcd_cmd+0x2a8>
	else if (__tmp > 65535)
    257c:	fe 01       	movw	r30, r28
    257e:	e0 5b       	subi	r30, 0xB0	; 176
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	60 81       	ld	r22, Z
    2584:	71 81       	ldd	r23, Z+1	; 0x01
    2586:	82 81       	ldd	r24, Z+2	; 0x02
    2588:	93 81       	ldd	r25, Z+3	; 0x03
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	3f ef       	ldi	r19, 0xFF	; 255
    258e:	4f e7       	ldi	r20, 0x7F	; 127
    2590:	57 e4       	ldi	r21, 0x47	; 71
    2592:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2596:	18 16       	cp	r1, r24
    2598:	0c f0       	brlt	.+2      	; 0x259c <lcd_cmd+0x200>
    259a:	43 c0       	rjmp	.+134    	; 0x2622 <lcd_cmd+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259c:	fe 01       	movw	r30, r28
    259e:	ec 5a       	subi	r30, 0xAC	; 172
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	60 81       	ld	r22, Z
    25a4:	71 81       	ldd	r23, Z+1	; 0x01
    25a6:	82 81       	ldd	r24, Z+2	; 0x02
    25a8:	93 81       	ldd	r25, Z+3	; 0x03
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e2       	ldi	r20, 0x20	; 32
    25b0:	51 e4       	ldi	r21, 0x41	; 65
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	8e 01       	movw	r16, r28
    25bc:	02 5b       	subi	r16, 0xB2	; 178
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	bc 01       	movw	r22, r24
    25c2:	cd 01       	movw	r24, r26
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	f8 01       	movw	r30, r16
    25ce:	91 83       	std	Z+1, r25	; 0x01
    25d0:	80 83       	st	Z, r24
    25d2:	1f c0       	rjmp	.+62     	; 0x2612 <lcd_cmd+0x276>
    25d4:	fe 01       	movw	r30, r28
    25d6:	e4 5b       	subi	r30, 0xB4	; 180
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	80 e9       	ldi	r24, 0x90	; 144
    25dc:	91 e0       	ldi	r25, 0x01	; 1
    25de:	91 83       	std	Z+1, r25	; 0x01
    25e0:	80 83       	st	Z, r24
    25e2:	fe 01       	movw	r30, r28
    25e4:	e4 5b       	subi	r30, 0xB4	; 180
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	80 81       	ld	r24, Z
    25ea:	91 81       	ldd	r25, Z+1	; 0x01
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <lcd_cmd+0x250>
    25f0:	fe 01       	movw	r30, r28
    25f2:	e4 5b       	subi	r30, 0xB4	; 180
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fa:	de 01       	movw	r26, r28
    25fc:	a2 5b       	subi	r26, 0xB2	; 178
    25fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2600:	fe 01       	movw	r30, r28
    2602:	e2 5b       	subi	r30, 0xB2	; 178
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	80 81       	ld	r24, Z
    2608:	91 81       	ldd	r25, Z+1	; 0x01
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	11 96       	adiw	r26, 0x01	; 1
    260e:	9c 93       	st	X, r25
    2610:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2612:	fe 01       	movw	r30, r28
    2614:	e2 5b       	subi	r30, 0xB2	; 178
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	d1 f6       	brne	.-76     	; 0x25d4 <lcd_cmd+0x238>
    2620:	4b c0       	rjmp	.+150    	; 0x26b8 <lcd_cmd+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2622:	8e 01       	movw	r16, r28
    2624:	02 5b       	subi	r16, 0xB2	; 178
    2626:	1f 4f       	sbci	r17, 0xFF	; 255
    2628:	fe 01       	movw	r30, r28
    262a:	e0 5b       	subi	r30, 0xB0	; 176
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	f8 01       	movw	r30, r16
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
    2644:	de 01       	movw	r26, r28
    2646:	a6 5b       	subi	r26, 0xB6	; 182
    2648:	bf 4f       	sbci	r27, 0xFF	; 255
    264a:	fe 01       	movw	r30, r28
    264c:	e2 5b       	subi	r30, 0xB2	; 178
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	11 96       	adiw	r26, 0x01	; 1
    2656:	9c 93       	st	X, r25
    2658:	8e 93       	st	-X, r24
    265a:	fe 01       	movw	r30, r28
    265c:	e6 5b       	subi	r30, 0xB6	; 182
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	80 81       	ld	r24, Z
    2662:	91 81       	ldd	r25, Z+1	; 0x01
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <lcd_cmd+0x2c8>
    2668:	fe 01       	movw	r30, r28
    266a:	e6 5b       	subi	r30, 0xB6	; 182
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24
    2672:	22 c0       	rjmp	.+68     	; 0x26b8 <lcd_cmd+0x31c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2674:	8e 01       	movw	r16, r28
    2676:	08 5a       	subi	r16, 0xA8	; 168
    2678:	1f 4f       	sbci	r17, 0xFF	; 255
    267a:	fe 01       	movw	r30, r28
    267c:	e7 5a       	subi	r30, 0xA7	; 167
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	f8 01       	movw	r30, r16
    2692:	80 83       	st	Z, r24
    2694:	de 01       	movw	r26, r28
    2696:	a7 5b       	subi	r26, 0xB7	; 183
    2698:	bf 4f       	sbci	r27, 0xFF	; 255
    269a:	fe 01       	movw	r30, r28
    269c:	e8 5a       	subi	r30, 0xA8	; 168
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	80 81       	ld	r24, Z
    26a2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26a4:	fe 01       	movw	r30, r28
    26a6:	e7 5b       	subi	r30, 0xB7	; 183
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 81       	ld	r24, Z
    26ac:	8a 95       	dec	r24
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <lcd_cmd+0x310>
    26b0:	fe 01       	movw	r30, r28
    26b2:	e7 5b       	subi	r30, 0xB7	; 183
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 83       	st	Z, r24
	_delay_us(10);
	DIO_Write(PORT_B3, Low);
    26b8:	8b e0       	ldi	r24, 0x0B	; 11
    26ba:	60 e0       	ldi	r22, 0x00	; 0
    26bc:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    26c0:	fe 01       	movw	r30, r28
    26c2:	eb 5b       	subi	r30, 0xBB	; 187
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	a8 e4       	ldi	r26, 0x48	; 72
    26cc:	b3 e4       	ldi	r27, 0x43	; 67
    26ce:	80 83       	st	Z, r24
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	a2 83       	std	Z+2, r26	; 0x02
    26d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26d6:	8e 01       	movw	r16, r28
    26d8:	0f 5b       	subi	r16, 0xBF	; 191
    26da:	1f 4f       	sbci	r17, 0xFF	; 255
    26dc:	fe 01       	movw	r30, r28
    26de:	eb 5b       	subi	r30, 0xBB	; 187
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	60 81       	ld	r22, Z
    26e4:	71 81       	ldd	r23, Z+1	; 0x01
    26e6:	82 81       	ldd	r24, Z+2	; 0x02
    26e8:	93 81       	ldd	r25, Z+3	; 0x03
    26ea:	2b ea       	ldi	r18, 0xAB	; 171
    26ec:	3a ea       	ldi	r19, 0xAA	; 170
    26ee:	4a ea       	ldi	r20, 0xAA	; 170
    26f0:	50 e4       	ldi	r21, 0x40	; 64
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	f8 01       	movw	r30, r16
    26fc:	80 83       	st	Z, r24
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	a2 83       	std	Z+2, r26	; 0x02
    2702:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2704:	fe 01       	movw	r30, r28
    2706:	ef 5b       	subi	r30, 0xBF	; 191
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	60 81       	ld	r22, Z
    270c:	71 81       	ldd	r23, Z+1	; 0x01
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	93 81       	ldd	r25, Z+3	; 0x03
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e8       	ldi	r20, 0x80	; 128
    2718:	5f e3       	ldi	r21, 0x3F	; 63
    271a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    271e:	88 23       	and	r24, r24
    2720:	34 f4       	brge	.+12     	; 0x272e <lcd_cmd+0x392>
		__ticks = 1;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	fe 01       	movw	r30, r28
    2726:	e0 5c       	subi	r30, 0xC0	; 192
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	80 83       	st	Z, r24
    272c:	9d c0       	rjmp	.+314    	; 0x2868 <lcd_cmd+0x4cc>
	else if (__tmp > 255)
    272e:	fe 01       	movw	r30, r28
    2730:	ef 5b       	subi	r30, 0xBF	; 191
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	60 81       	ld	r22, Z
    2736:	71 81       	ldd	r23, Z+1	; 0x01
    2738:	82 81       	ldd	r24, Z+2	; 0x02
    273a:	93 81       	ldd	r25, Z+3	; 0x03
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	53 e4       	ldi	r21, 0x43	; 67
    2744:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	0c f0       	brlt	.+2      	; 0x274e <lcd_cmd+0x3b2>
    274c:	7e c0       	rjmp	.+252    	; 0x284a <lcd_cmd+0x4ae>
	{
		_delay_ms(__us / 1000.0);
    274e:	fe 01       	movw	r30, r28
    2750:	eb 5b       	subi	r30, 0xBB	; 187
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	60 81       	ld	r22, Z
    2756:	71 81       	ldd	r23, Z+1	; 0x01
    2758:	82 81       	ldd	r24, Z+2	; 0x02
    275a:	93 81       	ldd	r25, Z+3	; 0x03
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	4a e7       	ldi	r20, 0x7A	; 122
    2762:	54 e4       	ldi	r21, 0x44	; 68
    2764:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	8c af       	std	Y+60, r24	; 0x3c
    276e:	9d af       	std	Y+61, r25	; 0x3d
    2770:	ae af       	std	Y+62, r26	; 0x3e
    2772:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2774:	6c ad       	ldd	r22, Y+60	; 0x3c
    2776:	7d ad       	ldd	r23, Y+61	; 0x3d
    2778:	8e ad       	ldd	r24, Y+62	; 0x3e
    277a:	9f ad       	ldd	r25, Y+63	; 0x3f
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	4a e7       	ldi	r20, 0x7A	; 122
    2782:	55 e4       	ldi	r21, 0x45	; 69
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	88 af       	std	Y+56, r24	; 0x38
    278e:	99 af       	std	Y+57, r25	; 0x39
    2790:	aa af       	std	Y+58, r26	; 0x3a
    2792:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2794:	68 ad       	ldd	r22, Y+56	; 0x38
    2796:	79 ad       	ldd	r23, Y+57	; 0x39
    2798:	8a ad       	ldd	r24, Y+58	; 0x3a
    279a:	9b ad       	ldd	r25, Y+59	; 0x3b
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e8       	ldi	r20, 0x80	; 128
    27a2:	5f e3       	ldi	r21, 0x3F	; 63
    27a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a8:	88 23       	and	r24, r24
    27aa:	2c f4       	brge	.+10     	; 0x27b6 <lcd_cmd+0x41a>
		__ticks = 1;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	9f ab       	std	Y+55, r25	; 0x37
    27b2:	8e ab       	std	Y+54, r24	; 0x36
    27b4:	3f c0       	rjmp	.+126    	; 0x2834 <lcd_cmd+0x498>
	else if (__tmp > 65535)
    27b6:	68 ad       	ldd	r22, Y+56	; 0x38
    27b8:	79 ad       	ldd	r23, Y+57	; 0x39
    27ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    27bc:	9b ad       	ldd	r25, Y+59	; 0x3b
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	3f ef       	ldi	r19, 0xFF	; 255
    27c2:	4f e7       	ldi	r20, 0x7F	; 127
    27c4:	57 e4       	ldi	r21, 0x47	; 71
    27c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ca:	18 16       	cp	r1, r24
    27cc:	4c f5       	brge	.+82     	; 0x2820 <lcd_cmd+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    27d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    27d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    27d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e2       	ldi	r20, 0x20	; 32
    27dc:	51 e4       	ldi	r21, 0x41	; 65
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9f ab       	std	Y+55, r25	; 0x37
    27f4:	8e ab       	std	Y+54, r24	; 0x36
    27f6:	0f c0       	rjmp	.+30     	; 0x2816 <lcd_cmd+0x47a>
    27f8:	80 e9       	ldi	r24, 0x90	; 144
    27fa:	91 e0       	ldi	r25, 0x01	; 1
    27fc:	9d ab       	std	Y+53, r25	; 0x35
    27fe:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2800:	8c a9       	ldd	r24, Y+52	; 0x34
    2802:	9d a9       	ldd	r25, Y+53	; 0x35
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	f1 f7       	brne	.-4      	; 0x2804 <lcd_cmd+0x468>
    2808:	9d ab       	std	Y+53, r25	; 0x35
    280a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280c:	8e a9       	ldd	r24, Y+54	; 0x36
    280e:	9f a9       	ldd	r25, Y+55	; 0x37
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	9f ab       	std	Y+55, r25	; 0x37
    2814:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2816:	8e a9       	ldd	r24, Y+54	; 0x36
    2818:	9f a9       	ldd	r25, Y+55	; 0x37
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	69 f7       	brne	.-38     	; 0x27f8 <lcd_cmd+0x45c>
    281e:	2d c0       	rjmp	.+90     	; 0x287a <lcd_cmd+0x4de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2820:	68 ad       	ldd	r22, Y+56	; 0x38
    2822:	79 ad       	ldd	r23, Y+57	; 0x39
    2824:	8a ad       	ldd	r24, Y+58	; 0x3a
    2826:	9b ad       	ldd	r25, Y+59	; 0x3b
    2828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	9f ab       	std	Y+55, r25	; 0x37
    2832:	8e ab       	std	Y+54, r24	; 0x36
    2834:	8e a9       	ldd	r24, Y+54	; 0x36
    2836:	9f a9       	ldd	r25, Y+55	; 0x37
    2838:	9b ab       	std	Y+51, r25	; 0x33
    283a:	8a ab       	std	Y+50, r24	; 0x32
    283c:	8a a9       	ldd	r24, Y+50	; 0x32
    283e:	9b a9       	ldd	r25, Y+51	; 0x33
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <lcd_cmd+0x4a4>
    2844:	9b ab       	std	Y+51, r25	; 0x33
    2846:	8a ab       	std	Y+50, r24	; 0x32
    2848:	18 c0       	rjmp	.+48     	; 0x287a <lcd_cmd+0x4de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    284a:	fe 01       	movw	r30, r28
    284c:	ef 5b       	subi	r30, 0xBF	; 191
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	93 81       	ldd	r25, Z+3	; 0x03
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	fe 01       	movw	r30, r28
    2862:	e0 5c       	subi	r30, 0xC0	; 192
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	80 83       	st	Z, r24
    2868:	fe 01       	movw	r30, r28
    286a:	e0 5c       	subi	r30, 0xC0	; 192
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2872:	89 a9       	ldd	r24, Y+49	; 0x31
    2874:	8a 95       	dec	r24
    2876:	f1 f7       	brne	.-4      	; 0x2874 <lcd_cmd+0x4d8>
    2878:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);
	(GET_BIT(cmd, 0)) ? DIO_Write(PORT_A4, High) : DIO_Write(PORT_A4, Low);
    287a:	fe 01       	movw	r30, r28
    287c:	ef 59       	subi	r30, 0x9F	; 159
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	80 81       	ld	r24, Z
    2882:	88 2f       	mov	r24, r24
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	81 70       	andi	r24, 0x01	; 1
    2888:	90 70       	andi	r25, 0x00	; 0
    288a:	88 23       	and	r24, r24
    288c:	29 f0       	breq	.+10     	; 0x2898 <lcd_cmd+0x4fc>
    288e:	84 e0       	ldi	r24, 0x04	; 4
    2890:	61 e0       	ldi	r22, 0x01	; 1
    2892:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    2896:	04 c0       	rjmp	.+8      	; 0x28a0 <lcd_cmd+0x504>
    2898:	84 e0       	ldi	r24, 0x04	; 4
    289a:	60 e0       	ldi	r22, 0x00	; 0
    289c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	(GET_BIT(cmd, 1)) ? DIO_Write(PORT_A5, High) : DIO_Write(PORT_A5, Low);
    28a0:	fe 01       	movw	r30, r28
    28a2:	ef 59       	subi	r30, 0x9F	; 159
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	80 81       	ld	r24, Z
    28a8:	88 2f       	mov	r24, r24
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	82 70       	andi	r24, 0x02	; 2
    28ae:	90 70       	andi	r25, 0x00	; 0
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	29 f0       	breq	.+10     	; 0x28be <lcd_cmd+0x522>
    28b4:	85 e0       	ldi	r24, 0x05	; 5
    28b6:	61 e0       	ldi	r22, 0x01	; 1
    28b8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    28bc:	04 c0       	rjmp	.+8      	; 0x28c6 <lcd_cmd+0x52a>
    28be:	85 e0       	ldi	r24, 0x05	; 5
    28c0:	60 e0       	ldi	r22, 0x00	; 0
    28c2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	(GET_BIT(cmd, 2)) ? DIO_Write(PORT_A6, High) : DIO_Write(PORT_A6, Low);
    28c6:	fe 01       	movw	r30, r28
    28c8:	ef 59       	subi	r30, 0x9F	; 159
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	80 81       	ld	r24, Z
    28ce:	88 2f       	mov	r24, r24
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	84 70       	andi	r24, 0x04	; 4
    28d4:	90 70       	andi	r25, 0x00	; 0
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	29 f0       	breq	.+10     	; 0x28e4 <lcd_cmd+0x548>
    28da:	86 e0       	ldi	r24, 0x06	; 6
    28dc:	61 e0       	ldi	r22, 0x01	; 1
    28de:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    28e2:	04 c0       	rjmp	.+8      	; 0x28ec <lcd_cmd+0x550>
    28e4:	86 e0       	ldi	r24, 0x06	; 6
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	(GET_BIT(cmd, 3)) ? DIO_Write(PORT_A7, High) : DIO_Write(PORT_A7, Low);
    28ec:	fe 01       	movw	r30, r28
    28ee:	ef 59       	subi	r30, 0x9F	; 159
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 81       	ld	r24, Z
    28f4:	88 2f       	mov	r24, r24
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	88 70       	andi	r24, 0x08	; 8
    28fa:	90 70       	andi	r25, 0x00	; 0
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	29 f0       	breq	.+10     	; 0x290a <lcd_cmd+0x56e>
    2900:	87 e0       	ldi	r24, 0x07	; 7
    2902:	61 e0       	ldi	r22, 0x01	; 1
    2904:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    2908:	04 c0       	rjmp	.+8      	; 0x2912 <lcd_cmd+0x576>
    290a:	87 e0       	ldi	r24, 0x07	; 7
    290c:	60 e0       	ldi	r22, 0x00	; 0
    290e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_B3, High);
    2912:	8b e0       	ldi	r24, 0x0B	; 11
    2914:	61 e0       	ldi	r22, 0x01	; 1
    2916:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	a0 e2       	ldi	r26, 0x20	; 32
    2920:	b1 e4       	ldi	r27, 0x41	; 65
    2922:	8d a7       	std	Y+45, r24	; 0x2d
    2924:	9e a7       	std	Y+46, r25	; 0x2e
    2926:	af a7       	std	Y+47, r26	; 0x2f
    2928:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    292a:	6d a5       	ldd	r22, Y+45	; 0x2d
    292c:	7e a5       	ldd	r23, Y+46	; 0x2e
    292e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2930:	98 a9       	ldd	r25, Y+48	; 0x30
    2932:	2b ea       	ldi	r18, 0xAB	; 171
    2934:	3a ea       	ldi	r19, 0xAA	; 170
    2936:	4a ea       	ldi	r20, 0xAA	; 170
    2938:	50 e4       	ldi	r21, 0x40	; 64
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	89 a7       	std	Y+41, r24	; 0x29
    2944:	9a a7       	std	Y+42, r25	; 0x2a
    2946:	ab a7       	std	Y+43, r26	; 0x2b
    2948:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    294a:	69 a5       	ldd	r22, Y+41	; 0x29
    294c:	7a a5       	ldd	r23, Y+42	; 0x2a
    294e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2950:	9c a5       	ldd	r25, Y+44	; 0x2c
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e8       	ldi	r20, 0x80	; 128
    2958:	5f e3       	ldi	r21, 0x3F	; 63
    295a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    295e:	88 23       	and	r24, r24
    2960:	1c f4       	brge	.+6      	; 0x2968 <lcd_cmd+0x5cc>
		__ticks = 1;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	88 a7       	std	Y+40, r24	; 0x28
    2966:	91 c0       	rjmp	.+290    	; 0x2a8a <lcd_cmd+0x6ee>
	else if (__tmp > 255)
    2968:	69 a5       	ldd	r22, Y+41	; 0x29
    296a:	7a a5       	ldd	r23, Y+42	; 0x2a
    296c:	8b a5       	ldd	r24, Y+43	; 0x2b
    296e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	4f e7       	ldi	r20, 0x7F	; 127
    2976:	53 e4       	ldi	r21, 0x43	; 67
    2978:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    297c:	18 16       	cp	r1, r24
    297e:	0c f0       	brlt	.+2      	; 0x2982 <lcd_cmd+0x5e6>
    2980:	7b c0       	rjmp	.+246    	; 0x2a78 <lcd_cmd+0x6dc>
	{
		_delay_ms(__us / 1000.0);
    2982:	6d a5       	ldd	r22, Y+45	; 0x2d
    2984:	7e a5       	ldd	r23, Y+46	; 0x2e
    2986:	8f a5       	ldd	r24, Y+47	; 0x2f
    2988:	98 a9       	ldd	r25, Y+48	; 0x30
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	4a e7       	ldi	r20, 0x7A	; 122
    2990:	54 e4       	ldi	r21, 0x44	; 68
    2992:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	8c a3       	std	Y+36, r24	; 0x24
    299c:	9d a3       	std	Y+37, r25	; 0x25
    299e:	ae a3       	std	Y+38, r26	; 0x26
    29a0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a2:	6c a1       	ldd	r22, Y+36	; 0x24
    29a4:	7d a1       	ldd	r23, Y+37	; 0x25
    29a6:	8e a1       	ldd	r24, Y+38	; 0x26
    29a8:	9f a1       	ldd	r25, Y+39	; 0x27
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	4a e7       	ldi	r20, 0x7A	; 122
    29b0:	55 e4       	ldi	r21, 0x45	; 69
    29b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	88 a3       	std	Y+32, r24	; 0x20
    29bc:	99 a3       	std	Y+33, r25	; 0x21
    29be:	aa a3       	std	Y+34, r26	; 0x22
    29c0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    29c2:	68 a1       	ldd	r22, Y+32	; 0x20
    29c4:	79 a1       	ldd	r23, Y+33	; 0x21
    29c6:	8a a1       	ldd	r24, Y+34	; 0x22
    29c8:	9b a1       	ldd	r25, Y+35	; 0x23
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e8       	ldi	r20, 0x80	; 128
    29d0:	5f e3       	ldi	r21, 0x3F	; 63
    29d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d6:	88 23       	and	r24, r24
    29d8:	2c f4       	brge	.+10     	; 0x29e4 <lcd_cmd+0x648>
		__ticks = 1;
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	9f 8f       	std	Y+31, r25	; 0x1f
    29e0:	8e 8f       	std	Y+30, r24	; 0x1e
    29e2:	3f c0       	rjmp	.+126    	; 0x2a62 <lcd_cmd+0x6c6>
	else if (__tmp > 65535)
    29e4:	68 a1       	ldd	r22, Y+32	; 0x20
    29e6:	79 a1       	ldd	r23, Y+33	; 0x21
    29e8:	8a a1       	ldd	r24, Y+34	; 0x22
    29ea:	9b a1       	ldd	r25, Y+35	; 0x23
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	3f ef       	ldi	r19, 0xFF	; 255
    29f0:	4f e7       	ldi	r20, 0x7F	; 127
    29f2:	57 e4       	ldi	r21, 0x47	; 71
    29f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29f8:	18 16       	cp	r1, r24
    29fa:	4c f5       	brge	.+82     	; 0x2a4e <lcd_cmd+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fc:	6c a1       	ldd	r22, Y+36	; 0x24
    29fe:	7d a1       	ldd	r23, Y+37	; 0x25
    2a00:	8e a1       	ldd	r24, Y+38	; 0x26
    2a02:	9f a1       	ldd	r25, Y+39	; 0x27
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e2       	ldi	r20, 0x20	; 32
    2a0a:	51 e4       	ldi	r21, 0x41	; 65
    2a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	bc 01       	movw	r22, r24
    2a16:	cd 01       	movw	r24, r26
    2a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	9f 8f       	std	Y+31, r25	; 0x1f
    2a22:	8e 8f       	std	Y+30, r24	; 0x1e
    2a24:	0f c0       	rjmp	.+30     	; 0x2a44 <lcd_cmd+0x6a8>
    2a26:	80 e9       	ldi	r24, 0x90	; 144
    2a28:	91 e0       	ldi	r25, 0x01	; 1
    2a2a:	9d 8f       	std	Y+29, r25	; 0x1d
    2a2c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a2e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a30:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <lcd_cmd+0x696>
    2a36:	9d 8f       	std	Y+29, r25	; 0x1d
    2a38:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	9f 8f       	std	Y+31, r25	; 0x1f
    2a42:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a46:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a48:	00 97       	sbiw	r24, 0x00	; 0
    2a4a:	69 f7       	brne	.-38     	; 0x2a26 <lcd_cmd+0x68a>
    2a4c:	24 c0       	rjmp	.+72     	; 0x2a96 <lcd_cmd+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4e:	68 a1       	ldd	r22, Y+32	; 0x20
    2a50:	79 a1       	ldd	r23, Y+33	; 0x21
    2a52:	8a a1       	ldd	r24, Y+34	; 0x22
    2a54:	9b a1       	ldd	r25, Y+35	; 0x23
    2a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	9f 8f       	std	Y+31, r25	; 0x1f
    2a60:	8e 8f       	std	Y+30, r24	; 0x1e
    2a62:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a64:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a66:	9b 8f       	std	Y+27, r25	; 0x1b
    2a68:	8a 8f       	std	Y+26, r24	; 0x1a
    2a6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <lcd_cmd+0x6d2>
    2a72:	9b 8f       	std	Y+27, r25	; 0x1b
    2a74:	8a 8f       	std	Y+26, r24	; 0x1a
    2a76:	0f c0       	rjmp	.+30     	; 0x2a96 <lcd_cmd+0x6fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a78:	69 a5       	ldd	r22, Y+41	; 0x29
    2a7a:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	88 a7       	std	Y+40, r24	; 0x28
    2a8a:	88 a5       	ldd	r24, Y+40	; 0x28
    2a8c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a8e:	89 8d       	ldd	r24, Y+25	; 0x19
    2a90:	8a 95       	dec	r24
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <lcd_cmd+0x6f4>
    2a94:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_Write(PORT_B3, Low);
    2a96:	8b e0       	ldi	r24, 0x0B	; 11
    2a98:	60 e0       	ldi	r22, 0x00	; 0
    2a9a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a8 e4       	ldi	r26, 0x48	; 72
    2aa4:	b3 e4       	ldi	r27, 0x43	; 67
    2aa6:	8d 8b       	std	Y+21, r24	; 0x15
    2aa8:	9e 8b       	std	Y+22, r25	; 0x16
    2aaa:	af 8b       	std	Y+23, r26	; 0x17
    2aac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2aae:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab6:	2b ea       	ldi	r18, 0xAB	; 171
    2ab8:	3a ea       	ldi	r19, 0xAA	; 170
    2aba:	4a ea       	ldi	r20, 0xAA	; 170
    2abc:	50 e4       	ldi	r21, 0x40	; 64
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	89 8b       	std	Y+17, r24	; 0x11
    2ac8:	9a 8b       	std	Y+18, r25	; 0x12
    2aca:	ab 8b       	std	Y+19, r26	; 0x13
    2acc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ace:	69 89       	ldd	r22, Y+17	; 0x11
    2ad0:	7a 89       	ldd	r23, Y+18	; 0x12
    2ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	1c f4       	brge	.+6      	; 0x2aec <lcd_cmd+0x750>
		__ticks = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	88 8b       	std	Y+16, r24	; 0x10
    2aea:	91 c0       	rjmp	.+290    	; 0x2c0e <lcd_cmd+0x872>
	else if (__tmp > 255)
    2aec:	69 89       	ldd	r22, Y+17	; 0x11
    2aee:	7a 89       	ldd	r23, Y+18	; 0x12
    2af0:	8b 89       	ldd	r24, Y+19	; 0x13
    2af2:	9c 89       	ldd	r25, Y+20	; 0x14
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	4f e7       	ldi	r20, 0x7F	; 127
    2afa:	53 e4       	ldi	r21, 0x43	; 67
    2afc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b00:	18 16       	cp	r1, r24
    2b02:	0c f0       	brlt	.+2      	; 0x2b06 <lcd_cmd+0x76a>
    2b04:	7b c0       	rjmp	.+246    	; 0x2bfc <lcd_cmd+0x860>
	{
		_delay_ms(__us / 1000.0);
    2b06:	6d 89       	ldd	r22, Y+21	; 0x15
    2b08:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	4a e7       	ldi	r20, 0x7A	; 122
    2b14:	54 e4       	ldi	r21, 0x44	; 68
    2b16:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	8c 87       	std	Y+12, r24	; 0x0c
    2b20:	9d 87       	std	Y+13, r25	; 0x0d
    2b22:	ae 87       	std	Y+14, r26	; 0x0e
    2b24:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b26:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b28:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	4a e7       	ldi	r20, 0x7A	; 122
    2b34:	55 e4       	ldi	r21, 0x45	; 69
    2b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	88 87       	std	Y+8, r24	; 0x08
    2b40:	99 87       	std	Y+9, r25	; 0x09
    2b42:	aa 87       	std	Y+10, r26	; 0x0a
    2b44:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b46:	68 85       	ldd	r22, Y+8	; 0x08
    2b48:	79 85       	ldd	r23, Y+9	; 0x09
    2b4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e8       	ldi	r20, 0x80	; 128
    2b54:	5f e3       	ldi	r21, 0x3F	; 63
    2b56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b5a:	88 23       	and	r24, r24
    2b5c:	2c f4       	brge	.+10     	; 0x2b68 <lcd_cmd+0x7cc>
		__ticks = 1;
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	9f 83       	std	Y+7, r25	; 0x07
    2b64:	8e 83       	std	Y+6, r24	; 0x06
    2b66:	3f c0       	rjmp	.+126    	; 0x2be6 <lcd_cmd+0x84a>
	else if (__tmp > 65535)
    2b68:	68 85       	ldd	r22, Y+8	; 0x08
    2b6a:	79 85       	ldd	r23, Y+9	; 0x09
    2b6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	3f ef       	ldi	r19, 0xFF	; 255
    2b74:	4f e7       	ldi	r20, 0x7F	; 127
    2b76:	57 e4       	ldi	r21, 0x47	; 71
    2b78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b7c:	18 16       	cp	r1, r24
    2b7e:	4c f5       	brge	.+82     	; 0x2bd2 <lcd_cmd+0x836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b80:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b82:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b84:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b86:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e2       	ldi	r20, 0x20	; 32
    2b8e:	51 e4       	ldi	r21, 0x41	; 65
    2b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	bc 01       	movw	r22, r24
    2b9a:	cd 01       	movw	r24, r26
    2b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	9f 83       	std	Y+7, r25	; 0x07
    2ba6:	8e 83       	std	Y+6, r24	; 0x06
    2ba8:	0f c0       	rjmp	.+30     	; 0x2bc8 <lcd_cmd+0x82c>
    2baa:	80 e9       	ldi	r24, 0x90	; 144
    2bac:	91 e0       	ldi	r25, 0x01	; 1
    2bae:	9d 83       	std	Y+5, r25	; 0x05
    2bb0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	f1 f7       	brne	.-4      	; 0x2bb6 <lcd_cmd+0x81a>
    2bba:	9d 83       	std	Y+5, r25	; 0x05
    2bbc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	9f 83       	std	Y+7, r25	; 0x07
    2bc6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bca:	9f 81       	ldd	r25, Y+7	; 0x07
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	69 f7       	brne	.-38     	; 0x2baa <lcd_cmd+0x80e>
    2bd0:	24 c0       	rjmp	.+72     	; 0x2c1a <lcd_cmd+0x87e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd2:	68 85       	ldd	r22, Y+8	; 0x08
    2bd4:	79 85       	ldd	r23, Y+9	; 0x09
    2bd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	9f 83       	std	Y+7, r25	; 0x07
    2be4:	8e 83       	std	Y+6, r24	; 0x06
    2be6:	8e 81       	ldd	r24, Y+6	; 0x06
    2be8:	9f 81       	ldd	r25, Y+7	; 0x07
    2bea:	9b 83       	std	Y+3, r25	; 0x03
    2bec:	8a 83       	std	Y+2, r24	; 0x02
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <lcd_cmd+0x856>
    2bf6:	9b 83       	std	Y+3, r25	; 0x03
    2bf8:	8a 83       	std	Y+2, r24	; 0x02
    2bfa:	0f c0       	rjmp	.+30     	; 0x2c1a <lcd_cmd+0x87e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bfc:	69 89       	ldd	r22, Y+17	; 0x11
    2bfe:	7a 89       	ldd	r23, Y+18	; 0x12
    2c00:	8b 89       	ldd	r24, Y+19	; 0x13
    2c02:	9c 89       	ldd	r25, Y+20	; 0x14
    2c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	88 8b       	std	Y+16, r24	; 0x10
    2c0e:	88 89       	ldd	r24, Y+16	; 0x10
    2c10:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	8a 95       	dec	r24
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <lcd_cmd+0x878>
    2c18:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    2c1a:	cf 59       	subi	r28, 0x9F	; 159
    2c1c:	df 4f       	sbci	r29, 0xFF	; 255
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	08 95       	ret

00002c32 <lcd_data>:

void lcd_data(uint8 data) {
    2c32:	0f 93       	push	r16
    2c34:	1f 93       	push	r17
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	c1 56       	subi	r28, 0x61	; 97
    2c40:	d0 40       	sbci	r29, 0x00	; 0
    2c42:	0f b6       	in	r0, 0x3f	; 63
    2c44:	f8 94       	cli
    2c46:	de bf       	out	0x3e, r29	; 62
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	cd bf       	out	0x3d, r28	; 61
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	ef 59       	subi	r30, 0x9F	; 159
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	80 83       	st	Z, r24
	DIO_Write(PORT_B2, Low);
    2c54:	8a e0       	ldi	r24, 0x0A	; 10
    2c56:	60 e0       	ldi	r22, 0x00	; 0
    2c58:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_B1, High);
    2c5c:	89 e0       	ldi	r24, 0x09	; 9
    2c5e:	61 e0       	ldi	r22, 0x01	; 1
    2c60:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	(GET_BIT(data, 0)) ? DIO_Write(PORT_A4, High) : DIO_Write(PORT_A4, Low);
    2c64:	fe 01       	movw	r30, r28
    2c66:	ef 59       	subi	r30, 0x9F	; 159
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	80 81       	ld	r24, Z
    2c6c:	88 2f       	mov	r24, r24
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	81 70       	andi	r24, 0x01	; 1
    2c72:	90 70       	andi	r25, 0x00	; 0
    2c74:	88 23       	and	r24, r24
    2c76:	29 f0       	breq	.+10     	; 0x2c82 <lcd_data+0x50>
    2c78:	84 e0       	ldi	r24, 0x04	; 4
    2c7a:	61 e0       	ldi	r22, 0x01	; 1
    2c7c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    2c80:	04 c0       	rjmp	.+8      	; 0x2c8a <lcd_data+0x58>
    2c82:	84 e0       	ldi	r24, 0x04	; 4
    2c84:	60 e0       	ldi	r22, 0x00	; 0
    2c86:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	(GET_BIT(data, 1)) ? DIO_Write(PORT_A5, High) : DIO_Write(PORT_A5, Low);
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ef 59       	subi	r30, 0x9F	; 159
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	80 81       	ld	r24, Z
    2c92:	88 2f       	mov	r24, r24
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	82 70       	andi	r24, 0x02	; 2
    2c98:	90 70       	andi	r25, 0x00	; 0
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	29 f0       	breq	.+10     	; 0x2ca8 <lcd_data+0x76>
    2c9e:	85 e0       	ldi	r24, 0x05	; 5
    2ca0:	61 e0       	ldi	r22, 0x01	; 1
    2ca2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    2ca6:	04 c0       	rjmp	.+8      	; 0x2cb0 <lcd_data+0x7e>
    2ca8:	85 e0       	ldi	r24, 0x05	; 5
    2caa:	60 e0       	ldi	r22, 0x00	; 0
    2cac:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	(GET_BIT(data, 2)) ? DIO_Write(PORT_A6, High) : DIO_Write(PORT_A6, Low);
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	ef 59       	subi	r30, 0x9F	; 159
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	80 81       	ld	r24, Z
    2cb8:	88 2f       	mov	r24, r24
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	84 70       	andi	r24, 0x04	; 4
    2cbe:	90 70       	andi	r25, 0x00	; 0
    2cc0:	00 97       	sbiw	r24, 0x00	; 0
    2cc2:	29 f0       	breq	.+10     	; 0x2cce <lcd_data+0x9c>
    2cc4:	86 e0       	ldi	r24, 0x06	; 6
    2cc6:	61 e0       	ldi	r22, 0x01	; 1
    2cc8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    2ccc:	04 c0       	rjmp	.+8      	; 0x2cd6 <lcd_data+0xa4>
    2cce:	86 e0       	ldi	r24, 0x06	; 6
    2cd0:	60 e0       	ldi	r22, 0x00	; 0
    2cd2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	(GET_BIT(data, 3)) ? DIO_Write(PORT_A7, High) : DIO_Write(PORT_A7, Low);
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	ef 59       	subi	r30, 0x9F	; 159
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	80 81       	ld	r24, Z
    2cde:	88 2f       	mov	r24, r24
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	88 70       	andi	r24, 0x08	; 8
    2ce4:	90 70       	andi	r25, 0x00	; 0
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	29 f0       	breq	.+10     	; 0x2cf4 <lcd_data+0xc2>
    2cea:	87 e0       	ldi	r24, 0x07	; 7
    2cec:	61 e0       	ldi	r22, 0x01	; 1
    2cee:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    2cf2:	04 c0       	rjmp	.+8      	; 0x2cfc <lcd_data+0xca>
    2cf4:	87 e0       	ldi	r24, 0x07	; 7
    2cf6:	60 e0       	ldi	r22, 0x00	; 0
    2cf8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_B3, High);
    2cfc:	8b e0       	ldi	r24, 0x0B	; 11
    2cfe:	61 e0       	ldi	r22, 0x01	; 1
    2d00:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    2d04:	fe 01       	movw	r30, r28
    2d06:	e3 5a       	subi	r30, 0xA3	; 163
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a0 e2       	ldi	r26, 0x20	; 32
    2d10:	b1 e4       	ldi	r27, 0x41	; 65
    2d12:	80 83       	st	Z, r24
    2d14:	91 83       	std	Z+1, r25	; 0x01
    2d16:	a2 83       	std	Z+2, r26	; 0x02
    2d18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d1a:	8e 01       	movw	r16, r28
    2d1c:	07 5a       	subi	r16, 0xA7	; 167
    2d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d20:	fe 01       	movw	r30, r28
    2d22:	e3 5a       	subi	r30, 0xA3	; 163
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	60 81       	ld	r22, Z
    2d28:	71 81       	ldd	r23, Z+1	; 0x01
    2d2a:	82 81       	ldd	r24, Z+2	; 0x02
    2d2c:	93 81       	ldd	r25, Z+3	; 0x03
    2d2e:	2b ea       	ldi	r18, 0xAB	; 171
    2d30:	3a ea       	ldi	r19, 0xAA	; 170
    2d32:	4a ea       	ldi	r20, 0xAA	; 170
    2d34:	50 e4       	ldi	r21, 0x40	; 64
    2d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	f8 01       	movw	r30, r16
    2d40:	80 83       	st	Z, r24
    2d42:	91 83       	std	Z+1, r25	; 0x01
    2d44:	a2 83       	std	Z+2, r26	; 0x02
    2d46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e7 5a       	subi	r30, 0xA7	; 167
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	60 81       	ld	r22, Z
    2d50:	71 81       	ldd	r23, Z+1	; 0x01
    2d52:	82 81       	ldd	r24, Z+2	; 0x02
    2d54:	93 81       	ldd	r25, Z+3	; 0x03
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e8       	ldi	r20, 0x80	; 128
    2d5c:	5f e3       	ldi	r21, 0x3F	; 63
    2d5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d62:	88 23       	and	r24, r24
    2d64:	34 f4       	brge	.+12     	; 0x2d72 <lcd_data+0x140>
		__ticks = 1;
    2d66:	fe 01       	movw	r30, r28
    2d68:	e8 5a       	subi	r30, 0xA8	; 168
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	80 83       	st	Z, r24
    2d70:	e0 c0       	rjmp	.+448    	; 0x2f32 <lcd_data+0x300>
	else if (__tmp > 255)
    2d72:	fe 01       	movw	r30, r28
    2d74:	e7 5a       	subi	r30, 0xA7	; 167
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	60 81       	ld	r22, Z
    2d7a:	71 81       	ldd	r23, Z+1	; 0x01
    2d7c:	82 81       	ldd	r24, Z+2	; 0x02
    2d7e:	93 81       	ldd	r25, Z+3	; 0x03
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	4f e7       	ldi	r20, 0x7F	; 127
    2d86:	53 e4       	ldi	r21, 0x43	; 67
    2d88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d8c:	18 16       	cp	r1, r24
    2d8e:	0c f0       	brlt	.+2      	; 0x2d92 <lcd_data+0x160>
    2d90:	c0 c0       	rjmp	.+384    	; 0x2f12 <lcd_data+0x2e0>
	{
		_delay_ms(__us / 1000.0);
    2d92:	fe 01       	movw	r30, r28
    2d94:	e3 5a       	subi	r30, 0xA3	; 163
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	60 81       	ld	r22, Z
    2d9a:	71 81       	ldd	r23, Z+1	; 0x01
    2d9c:	82 81       	ldd	r24, Z+2	; 0x02
    2d9e:	93 81       	ldd	r25, Z+3	; 0x03
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	4a e7       	ldi	r20, 0x7A	; 122
    2da6:	54 e4       	ldi	r21, 0x44	; 68
    2da8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	fe 01       	movw	r30, r28
    2db2:	ec 5a       	subi	r30, 0xAC	; 172
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	80 83       	st	Z, r24
    2db8:	91 83       	std	Z+1, r25	; 0x01
    2dba:	a2 83       	std	Z+2, r26	; 0x02
    2dbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dbe:	8e 01       	movw	r16, r28
    2dc0:	00 5b       	subi	r16, 0xB0	; 176
    2dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	ec 5a       	subi	r30, 0xAC	; 172
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	4a e7       	ldi	r20, 0x7A	; 122
    2dd8:	55 e4       	ldi	r21, 0x45	; 69
    2dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	f8 01       	movw	r30, r16
    2de4:	80 83       	st	Z, r24
    2de6:	91 83       	std	Z+1, r25	; 0x01
    2de8:	a2 83       	std	Z+2, r26	; 0x02
    2dea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dec:	fe 01       	movw	r30, r28
    2dee:	e0 5b       	subi	r30, 0xB0	; 176
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	60 81       	ld	r22, Z
    2df4:	71 81       	ldd	r23, Z+1	; 0x01
    2df6:	82 81       	ldd	r24, Z+2	; 0x02
    2df8:	93 81       	ldd	r25, Z+3	; 0x03
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e8       	ldi	r20, 0x80	; 128
    2e00:	5f e3       	ldi	r21, 0x3F	; 63
    2e02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e06:	88 23       	and	r24, r24
    2e08:	44 f4       	brge	.+16     	; 0x2e1a <lcd_data+0x1e8>
		__ticks = 1;
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e2 5b       	subi	r30, 0xB2	; 178
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	91 83       	std	Z+1, r25	; 0x01
    2e16:	80 83       	st	Z, r24
    2e18:	64 c0       	rjmp	.+200    	; 0x2ee2 <lcd_data+0x2b0>
	else if (__tmp > 65535)
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	e0 5b       	subi	r30, 0xB0	; 176
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	60 81       	ld	r22, Z
    2e22:	71 81       	ldd	r23, Z+1	; 0x01
    2e24:	82 81       	ldd	r24, Z+2	; 0x02
    2e26:	93 81       	ldd	r25, Z+3	; 0x03
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	3f ef       	ldi	r19, 0xFF	; 255
    2e2c:	4f e7       	ldi	r20, 0x7F	; 127
    2e2e:	57 e4       	ldi	r21, 0x47	; 71
    2e30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e34:	18 16       	cp	r1, r24
    2e36:	0c f0       	brlt	.+2      	; 0x2e3a <lcd_data+0x208>
    2e38:	43 c0       	rjmp	.+134    	; 0x2ec0 <lcd_data+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	ec 5a       	subi	r30, 0xAC	; 172
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	60 81       	ld	r22, Z
    2e42:	71 81       	ldd	r23, Z+1	; 0x01
    2e44:	82 81       	ldd	r24, Z+2	; 0x02
    2e46:	93 81       	ldd	r25, Z+3	; 0x03
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e2       	ldi	r20, 0x20	; 32
    2e4e:	51 e4       	ldi	r21, 0x41	; 65
    2e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	8e 01       	movw	r16, r28
    2e5a:	02 5b       	subi	r16, 0xB2	; 178
    2e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5e:	bc 01       	movw	r22, r24
    2e60:	cd 01       	movw	r24, r26
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	f8 01       	movw	r30, r16
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	80 83       	st	Z, r24
    2e70:	1f c0       	rjmp	.+62     	; 0x2eb0 <lcd_data+0x27e>
    2e72:	fe 01       	movw	r30, r28
    2e74:	e4 5b       	subi	r30, 0xB4	; 180
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	80 e9       	ldi	r24, 0x90	; 144
    2e7a:	91 e0       	ldi	r25, 0x01	; 1
    2e7c:	91 83       	std	Z+1, r25	; 0x01
    2e7e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e80:	fe 01       	movw	r30, r28
    2e82:	e4 5b       	subi	r30, 0xB4	; 180
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	80 81       	ld	r24, Z
    2e88:	91 81       	ldd	r25, Z+1	; 0x01
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	f1 f7       	brne	.-4      	; 0x2e8a <lcd_data+0x258>
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e4 5b       	subi	r30, 0xB4	; 180
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	91 83       	std	Z+1, r25	; 0x01
    2e96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e98:	de 01       	movw	r26, r28
    2e9a:	a2 5b       	subi	r26, 0xB2	; 178
    2e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e2 5b       	subi	r30, 0xB2	; 178
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	80 81       	ld	r24, Z
    2ea6:	91 81       	ldd	r25, Z+1	; 0x01
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	11 96       	adiw	r26, 0x01	; 1
    2eac:	9c 93       	st	X, r25
    2eae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	e2 5b       	subi	r30, 0xB2	; 178
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	80 81       	ld	r24, Z
    2eb8:	91 81       	ldd	r25, Z+1	; 0x01
    2eba:	00 97       	sbiw	r24, 0x00	; 0
    2ebc:	d1 f6       	brne	.-76     	; 0x2e72 <lcd_data+0x240>
    2ebe:	4b c0       	rjmp	.+150    	; 0x2f56 <lcd_data+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec0:	8e 01       	movw	r16, r28
    2ec2:	02 5b       	subi	r16, 0xB2	; 178
    2ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e0 5b       	subi	r30, 0xB0	; 176
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	60 81       	ld	r22, Z
    2ece:	71 81       	ldd	r23, Z+1	; 0x01
    2ed0:	82 81       	ldd	r24, Z+2	; 0x02
    2ed2:	93 81       	ldd	r25, Z+3	; 0x03
    2ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	f8 01       	movw	r30, r16
    2ede:	91 83       	std	Z+1, r25	; 0x01
    2ee0:	80 83       	st	Z, r24
    2ee2:	de 01       	movw	r26, r28
    2ee4:	a6 5b       	subi	r26, 0xB6	; 182
    2ee6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ee8:	fe 01       	movw	r30, r28
    2eea:	e2 5b       	subi	r30, 0xB2	; 178
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	80 81       	ld	r24, Z
    2ef0:	91 81       	ldd	r25, Z+1	; 0x01
    2ef2:	11 96       	adiw	r26, 0x01	; 1
    2ef4:	9c 93       	st	X, r25
    2ef6:	8e 93       	st	-X, r24
    2ef8:	fe 01       	movw	r30, r28
    2efa:	e6 5b       	subi	r30, 0xB6	; 182
    2efc:	ff 4f       	sbci	r31, 0xFF	; 255
    2efe:	80 81       	ld	r24, Z
    2f00:	91 81       	ldd	r25, Z+1	; 0x01
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	f1 f7       	brne	.-4      	; 0x2f02 <lcd_data+0x2d0>
    2f06:	fe 01       	movw	r30, r28
    2f08:	e6 5b       	subi	r30, 0xB6	; 182
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	80 83       	st	Z, r24
    2f10:	22 c0       	rjmp	.+68     	; 0x2f56 <lcd_data+0x324>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f12:	8e 01       	movw	r16, r28
    2f14:	08 5a       	subi	r16, 0xA8	; 168
    2f16:	1f 4f       	sbci	r17, 0xFF	; 255
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e7 5a       	subi	r30, 0xA7	; 167
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	60 81       	ld	r22, Z
    2f20:	71 81       	ldd	r23, Z+1	; 0x01
    2f22:	82 81       	ldd	r24, Z+2	; 0x02
    2f24:	93 81       	ldd	r25, Z+3	; 0x03
    2f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	f8 01       	movw	r30, r16
    2f30:	80 83       	st	Z, r24
    2f32:	de 01       	movw	r26, r28
    2f34:	a7 5b       	subi	r26, 0xB7	; 183
    2f36:	bf 4f       	sbci	r27, 0xFF	; 255
    2f38:	fe 01       	movw	r30, r28
    2f3a:	e8 5a       	subi	r30, 0xA8	; 168
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	80 81       	ld	r24, Z
    2f40:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f42:	fe 01       	movw	r30, r28
    2f44:	e7 5b       	subi	r30, 0xB7	; 183
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 81       	ld	r24, Z
    2f4a:	8a 95       	dec	r24
    2f4c:	f1 f7       	brne	.-4      	; 0x2f4a <lcd_data+0x318>
    2f4e:	fe 01       	movw	r30, r28
    2f50:	e7 5b       	subi	r30, 0xB7	; 183
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	80 83       	st	Z, r24
	_delay_us(10);
	DIO_Write(PORT_B3, Low);
    2f56:	8b e0       	ldi	r24, 0x0B	; 11
    2f58:	60 e0       	ldi	r22, 0x00	; 0
    2f5a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    2f5e:	fe 01       	movw	r30, r28
    2f60:	eb 5b       	subi	r30, 0xBB	; 187
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	a8 e4       	ldi	r26, 0x48	; 72
    2f6a:	b3 e4       	ldi	r27, 0x43	; 67
    2f6c:	80 83       	st	Z, r24
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	a2 83       	std	Z+2, r26	; 0x02
    2f72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f74:	8e 01       	movw	r16, r28
    2f76:	0f 5b       	subi	r16, 0xBF	; 191
    2f78:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	eb 5b       	subi	r30, 0xBB	; 187
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	60 81       	ld	r22, Z
    2f82:	71 81       	ldd	r23, Z+1	; 0x01
    2f84:	82 81       	ldd	r24, Z+2	; 0x02
    2f86:	93 81       	ldd	r25, Z+3	; 0x03
    2f88:	2b ea       	ldi	r18, 0xAB	; 171
    2f8a:	3a ea       	ldi	r19, 0xAA	; 170
    2f8c:	4a ea       	ldi	r20, 0xAA	; 170
    2f8e:	50 e4       	ldi	r21, 0x40	; 64
    2f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	f8 01       	movw	r30, r16
    2f9a:	80 83       	st	Z, r24
    2f9c:	91 83       	std	Z+1, r25	; 0x01
    2f9e:	a2 83       	std	Z+2, r26	; 0x02
    2fa0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	ef 5b       	subi	r30, 0xBF	; 191
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	60 81       	ld	r22, Z
    2faa:	71 81       	ldd	r23, Z+1	; 0x01
    2fac:	82 81       	ldd	r24, Z+2	; 0x02
    2fae:	93 81       	ldd	r25, Z+3	; 0x03
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e8       	ldi	r20, 0x80	; 128
    2fb6:	5f e3       	ldi	r21, 0x3F	; 63
    2fb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fbc:	88 23       	and	r24, r24
    2fbe:	34 f4       	brge	.+12     	; 0x2fcc <lcd_data+0x39a>
		__ticks = 1;
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e0 5c       	subi	r30, 0xC0	; 192
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	80 83       	st	Z, r24
    2fca:	9d c0       	rjmp	.+314    	; 0x3106 <lcd_data+0x4d4>
	else if (__tmp > 255)
    2fcc:	fe 01       	movw	r30, r28
    2fce:	ef 5b       	subi	r30, 0xBF	; 191
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	60 81       	ld	r22, Z
    2fd4:	71 81       	ldd	r23, Z+1	; 0x01
    2fd6:	82 81       	ldd	r24, Z+2	; 0x02
    2fd8:	93 81       	ldd	r25, Z+3	; 0x03
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	4f e7       	ldi	r20, 0x7F	; 127
    2fe0:	53 e4       	ldi	r21, 0x43	; 67
    2fe2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fe6:	18 16       	cp	r1, r24
    2fe8:	0c f0       	brlt	.+2      	; 0x2fec <lcd_data+0x3ba>
    2fea:	7e c0       	rjmp	.+252    	; 0x30e8 <lcd_data+0x4b6>
	{
		_delay_ms(__us / 1000.0);
    2fec:	fe 01       	movw	r30, r28
    2fee:	eb 5b       	subi	r30, 0xBB	; 187
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	60 81       	ld	r22, Z
    2ff4:	71 81       	ldd	r23, Z+1	; 0x01
    2ff6:	82 81       	ldd	r24, Z+2	; 0x02
    2ff8:	93 81       	ldd	r25, Z+3	; 0x03
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	4a e7       	ldi	r20, 0x7A	; 122
    3000:	54 e4       	ldi	r21, 0x44	; 68
    3002:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	8c af       	std	Y+60, r24	; 0x3c
    300c:	9d af       	std	Y+61, r25	; 0x3d
    300e:	ae af       	std	Y+62, r26	; 0x3e
    3010:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3012:	6c ad       	ldd	r22, Y+60	; 0x3c
    3014:	7d ad       	ldd	r23, Y+61	; 0x3d
    3016:	8e ad       	ldd	r24, Y+62	; 0x3e
    3018:	9f ad       	ldd	r25, Y+63	; 0x3f
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	4a e7       	ldi	r20, 0x7A	; 122
    3020:	55 e4       	ldi	r21, 0x45	; 69
    3022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	88 af       	std	Y+56, r24	; 0x38
    302c:	99 af       	std	Y+57, r25	; 0x39
    302e:	aa af       	std	Y+58, r26	; 0x3a
    3030:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3032:	68 ad       	ldd	r22, Y+56	; 0x38
    3034:	79 ad       	ldd	r23, Y+57	; 0x39
    3036:	8a ad       	ldd	r24, Y+58	; 0x3a
    3038:	9b ad       	ldd	r25, Y+59	; 0x3b
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e8       	ldi	r20, 0x80	; 128
    3040:	5f e3       	ldi	r21, 0x3F	; 63
    3042:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3046:	88 23       	and	r24, r24
    3048:	2c f4       	brge	.+10     	; 0x3054 <lcd_data+0x422>
		__ticks = 1;
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	9f ab       	std	Y+55, r25	; 0x37
    3050:	8e ab       	std	Y+54, r24	; 0x36
    3052:	3f c0       	rjmp	.+126    	; 0x30d2 <lcd_data+0x4a0>
	else if (__tmp > 65535)
    3054:	68 ad       	ldd	r22, Y+56	; 0x38
    3056:	79 ad       	ldd	r23, Y+57	; 0x39
    3058:	8a ad       	ldd	r24, Y+58	; 0x3a
    305a:	9b ad       	ldd	r25, Y+59	; 0x3b
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	3f ef       	ldi	r19, 0xFF	; 255
    3060:	4f e7       	ldi	r20, 0x7F	; 127
    3062:	57 e4       	ldi	r21, 0x47	; 71
    3064:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3068:	18 16       	cp	r1, r24
    306a:	4c f5       	brge	.+82     	; 0x30be <lcd_data+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306c:	6c ad       	ldd	r22, Y+60	; 0x3c
    306e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3070:	8e ad       	ldd	r24, Y+62	; 0x3e
    3072:	9f ad       	ldd	r25, Y+63	; 0x3f
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e2       	ldi	r20, 0x20	; 32
    307a:	51 e4       	ldi	r21, 0x41	; 65
    307c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	bc 01       	movw	r22, r24
    3086:	cd 01       	movw	r24, r26
    3088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	9f ab       	std	Y+55, r25	; 0x37
    3092:	8e ab       	std	Y+54, r24	; 0x36
    3094:	0f c0       	rjmp	.+30     	; 0x30b4 <lcd_data+0x482>
    3096:	80 e9       	ldi	r24, 0x90	; 144
    3098:	91 e0       	ldi	r25, 0x01	; 1
    309a:	9d ab       	std	Y+53, r25	; 0x35
    309c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    309e:	8c a9       	ldd	r24, Y+52	; 0x34
    30a0:	9d a9       	ldd	r25, Y+53	; 0x35
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <lcd_data+0x470>
    30a6:	9d ab       	std	Y+53, r25	; 0x35
    30a8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30aa:	8e a9       	ldd	r24, Y+54	; 0x36
    30ac:	9f a9       	ldd	r25, Y+55	; 0x37
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	9f ab       	std	Y+55, r25	; 0x37
    30b2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b4:	8e a9       	ldd	r24, Y+54	; 0x36
    30b6:	9f a9       	ldd	r25, Y+55	; 0x37
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	69 f7       	brne	.-38     	; 0x3096 <lcd_data+0x464>
    30bc:	2d c0       	rjmp	.+90     	; 0x3118 <lcd_data+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30be:	68 ad       	ldd	r22, Y+56	; 0x38
    30c0:	79 ad       	ldd	r23, Y+57	; 0x39
    30c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    30c4:	9b ad       	ldd	r25, Y+59	; 0x3b
    30c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	9f ab       	std	Y+55, r25	; 0x37
    30d0:	8e ab       	std	Y+54, r24	; 0x36
    30d2:	8e a9       	ldd	r24, Y+54	; 0x36
    30d4:	9f a9       	ldd	r25, Y+55	; 0x37
    30d6:	9b ab       	std	Y+51, r25	; 0x33
    30d8:	8a ab       	std	Y+50, r24	; 0x32
    30da:	8a a9       	ldd	r24, Y+50	; 0x32
    30dc:	9b a9       	ldd	r25, Y+51	; 0x33
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <lcd_data+0x4ac>
    30e2:	9b ab       	std	Y+51, r25	; 0x33
    30e4:	8a ab       	std	Y+50, r24	; 0x32
    30e6:	18 c0       	rjmp	.+48     	; 0x3118 <lcd_data+0x4e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30e8:	fe 01       	movw	r30, r28
    30ea:	ef 5b       	subi	r30, 0xBF	; 191
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	60 81       	ld	r22, Z
    30f0:	71 81       	ldd	r23, Z+1	; 0x01
    30f2:	82 81       	ldd	r24, Z+2	; 0x02
    30f4:	93 81       	ldd	r25, Z+3	; 0x03
    30f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	fe 01       	movw	r30, r28
    3100:	e0 5c       	subi	r30, 0xC0	; 192
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	80 83       	st	Z, r24
    3106:	fe 01       	movw	r30, r28
    3108:	e0 5c       	subi	r30, 0xC0	; 192
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	80 81       	ld	r24, Z
    310e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3110:	89 a9       	ldd	r24, Y+49	; 0x31
    3112:	8a 95       	dec	r24
    3114:	f1 f7       	brne	.-4      	; 0x3112 <lcd_data+0x4e0>
    3116:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);
	(GET_BIT(data, 4)) ? DIO_Write(PORT_A4, High) : DIO_Write(PORT_A4, Low);
    3118:	fe 01       	movw	r30, r28
    311a:	ef 59       	subi	r30, 0x9F	; 159
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	80 81       	ld	r24, Z
    3120:	88 2f       	mov	r24, r24
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	80 71       	andi	r24, 0x10	; 16
    3126:	90 70       	andi	r25, 0x00	; 0
    3128:	00 97       	sbiw	r24, 0x00	; 0
    312a:	29 f0       	breq	.+10     	; 0x3136 <lcd_data+0x504>
    312c:	84 e0       	ldi	r24, 0x04	; 4
    312e:	61 e0       	ldi	r22, 0x01	; 1
    3130:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    3134:	04 c0       	rjmp	.+8      	; 0x313e <lcd_data+0x50c>
    3136:	84 e0       	ldi	r24, 0x04	; 4
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	(GET_BIT(data, 5)) ? DIO_Write(PORT_A5, High) : DIO_Write(PORT_A5, Low);
    313e:	fe 01       	movw	r30, r28
    3140:	ef 59       	subi	r30, 0x9F	; 159
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	80 81       	ld	r24, Z
    3146:	88 2f       	mov	r24, r24
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	80 72       	andi	r24, 0x20	; 32
    314c:	90 70       	andi	r25, 0x00	; 0
    314e:	00 97       	sbiw	r24, 0x00	; 0
    3150:	29 f0       	breq	.+10     	; 0x315c <lcd_data+0x52a>
    3152:	85 e0       	ldi	r24, 0x05	; 5
    3154:	61 e0       	ldi	r22, 0x01	; 1
    3156:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    315a:	04 c0       	rjmp	.+8      	; 0x3164 <lcd_data+0x532>
    315c:	85 e0       	ldi	r24, 0x05	; 5
    315e:	60 e0       	ldi	r22, 0x00	; 0
    3160:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	(GET_BIT(data, 6)) ? DIO_Write(PORT_A6, High) : DIO_Write(PORT_A6, Low);
    3164:	fe 01       	movw	r30, r28
    3166:	ef 59       	subi	r30, 0x9F	; 159
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	80 81       	ld	r24, Z
    316c:	88 2f       	mov	r24, r24
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	80 74       	andi	r24, 0x40	; 64
    3172:	90 70       	andi	r25, 0x00	; 0
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	29 f0       	breq	.+10     	; 0x3182 <lcd_data+0x550>
    3178:	86 e0       	ldi	r24, 0x06	; 6
    317a:	61 e0       	ldi	r22, 0x01	; 1
    317c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    3180:	04 c0       	rjmp	.+8      	; 0x318a <lcd_data+0x558>
    3182:	86 e0       	ldi	r24, 0x06	; 6
    3184:	60 e0       	ldi	r22, 0x00	; 0
    3186:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	(GET_BIT(data, 7)) ? DIO_Write(PORT_A7, High) : DIO_Write(PORT_A7, Low);
    318a:	fe 01       	movw	r30, r28
    318c:	ef 59       	subi	r30, 0x9F	; 159
    318e:	ff 4f       	sbci	r31, 0xFF	; 255
    3190:	80 81       	ld	r24, Z
    3192:	88 23       	and	r24, r24
    3194:	2c f4       	brge	.+10     	; 0x31a0 <lcd_data+0x56e>
    3196:	87 e0       	ldi	r24, 0x07	; 7
    3198:	61 e0       	ldi	r22, 0x01	; 1
    319a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    319e:	04 c0       	rjmp	.+8      	; 0x31a8 <lcd_data+0x576>
    31a0:	87 e0       	ldi	r24, 0x07	; 7
    31a2:	60 e0       	ldi	r22, 0x00	; 0
    31a4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
	DIO_Write(PORT_B3, High);
    31a8:	8b e0       	ldi	r24, 0x0B	; 11
    31aa:	61 e0       	ldi	r22, 0x01	; 1
    31ac:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	a0 e2       	ldi	r26, 0x20	; 32
    31b6:	b1 e4       	ldi	r27, 0x41	; 65
    31b8:	8d a7       	std	Y+45, r24	; 0x2d
    31ba:	9e a7       	std	Y+46, r25	; 0x2e
    31bc:	af a7       	std	Y+47, r26	; 0x2f
    31be:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    31c0:	6d a5       	ldd	r22, Y+45	; 0x2d
    31c2:	7e a5       	ldd	r23, Y+46	; 0x2e
    31c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    31c6:	98 a9       	ldd	r25, Y+48	; 0x30
    31c8:	2b ea       	ldi	r18, 0xAB	; 171
    31ca:	3a ea       	ldi	r19, 0xAA	; 170
    31cc:	4a ea       	ldi	r20, 0xAA	; 170
    31ce:	50 e4       	ldi	r21, 0x40	; 64
    31d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	89 a7       	std	Y+41, r24	; 0x29
    31da:	9a a7       	std	Y+42, r25	; 0x2a
    31dc:	ab a7       	std	Y+43, r26	; 0x2b
    31de:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    31e0:	69 a5       	ldd	r22, Y+41	; 0x29
    31e2:	7a a5       	ldd	r23, Y+42	; 0x2a
    31e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    31e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 e8       	ldi	r20, 0x80	; 128
    31ee:	5f e3       	ldi	r21, 0x3F	; 63
    31f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31f4:	88 23       	and	r24, r24
    31f6:	1c f4       	brge	.+6      	; 0x31fe <lcd_data+0x5cc>
		__ticks = 1;
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	88 a7       	std	Y+40, r24	; 0x28
    31fc:	91 c0       	rjmp	.+290    	; 0x3320 <lcd_data+0x6ee>
	else if (__tmp > 255)
    31fe:	69 a5       	ldd	r22, Y+41	; 0x29
    3200:	7a a5       	ldd	r23, Y+42	; 0x2a
    3202:	8b a5       	ldd	r24, Y+43	; 0x2b
    3204:	9c a5       	ldd	r25, Y+44	; 0x2c
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	4f e7       	ldi	r20, 0x7F	; 127
    320c:	53 e4       	ldi	r21, 0x43	; 67
    320e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3212:	18 16       	cp	r1, r24
    3214:	0c f0       	brlt	.+2      	; 0x3218 <lcd_data+0x5e6>
    3216:	7b c0       	rjmp	.+246    	; 0x330e <lcd_data+0x6dc>
	{
		_delay_ms(__us / 1000.0);
    3218:	6d a5       	ldd	r22, Y+45	; 0x2d
    321a:	7e a5       	ldd	r23, Y+46	; 0x2e
    321c:	8f a5       	ldd	r24, Y+47	; 0x2f
    321e:	98 a9       	ldd	r25, Y+48	; 0x30
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	4a e7       	ldi	r20, 0x7A	; 122
    3226:	54 e4       	ldi	r21, 0x44	; 68
    3228:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	8c a3       	std	Y+36, r24	; 0x24
    3232:	9d a3       	std	Y+37, r25	; 0x25
    3234:	ae a3       	std	Y+38, r26	; 0x26
    3236:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3238:	6c a1       	ldd	r22, Y+36	; 0x24
    323a:	7d a1       	ldd	r23, Y+37	; 0x25
    323c:	8e a1       	ldd	r24, Y+38	; 0x26
    323e:	9f a1       	ldd	r25, Y+39	; 0x27
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	4a e7       	ldi	r20, 0x7A	; 122
    3246:	55 e4       	ldi	r21, 0x45	; 69
    3248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	88 a3       	std	Y+32, r24	; 0x20
    3252:	99 a3       	std	Y+33, r25	; 0x21
    3254:	aa a3       	std	Y+34, r26	; 0x22
    3256:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3258:	68 a1       	ldd	r22, Y+32	; 0x20
    325a:	79 a1       	ldd	r23, Y+33	; 0x21
    325c:	8a a1       	ldd	r24, Y+34	; 0x22
    325e:	9b a1       	ldd	r25, Y+35	; 0x23
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e8       	ldi	r20, 0x80	; 128
    3266:	5f e3       	ldi	r21, 0x3F	; 63
    3268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    326c:	88 23       	and	r24, r24
    326e:	2c f4       	brge	.+10     	; 0x327a <lcd_data+0x648>
		__ticks = 1;
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	9f 8f       	std	Y+31, r25	; 0x1f
    3276:	8e 8f       	std	Y+30, r24	; 0x1e
    3278:	3f c0       	rjmp	.+126    	; 0x32f8 <lcd_data+0x6c6>
	else if (__tmp > 65535)
    327a:	68 a1       	ldd	r22, Y+32	; 0x20
    327c:	79 a1       	ldd	r23, Y+33	; 0x21
    327e:	8a a1       	ldd	r24, Y+34	; 0x22
    3280:	9b a1       	ldd	r25, Y+35	; 0x23
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	3f ef       	ldi	r19, 0xFF	; 255
    3286:	4f e7       	ldi	r20, 0x7F	; 127
    3288:	57 e4       	ldi	r21, 0x47	; 71
    328a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    328e:	18 16       	cp	r1, r24
    3290:	4c f5       	brge	.+82     	; 0x32e4 <lcd_data+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3292:	6c a1       	ldd	r22, Y+36	; 0x24
    3294:	7d a1       	ldd	r23, Y+37	; 0x25
    3296:	8e a1       	ldd	r24, Y+38	; 0x26
    3298:	9f a1       	ldd	r25, Y+39	; 0x27
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e2       	ldi	r20, 0x20	; 32
    32a0:	51 e4       	ldi	r21, 0x41	; 65
    32a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	bc 01       	movw	r22, r24
    32ac:	cd 01       	movw	r24, r26
    32ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	9f 8f       	std	Y+31, r25	; 0x1f
    32b8:	8e 8f       	std	Y+30, r24	; 0x1e
    32ba:	0f c0       	rjmp	.+30     	; 0x32da <lcd_data+0x6a8>
    32bc:	80 e9       	ldi	r24, 0x90	; 144
    32be:	91 e0       	ldi	r25, 0x01	; 1
    32c0:	9d 8f       	std	Y+29, r25	; 0x1d
    32c2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	f1 f7       	brne	.-4      	; 0x32c8 <lcd_data+0x696>
    32cc:	9d 8f       	std	Y+29, r25	; 0x1d
    32ce:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32d4:	01 97       	sbiw	r24, 0x01	; 1
    32d6:	9f 8f       	std	Y+31, r25	; 0x1f
    32d8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32dc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32de:	00 97       	sbiw	r24, 0x00	; 0
    32e0:	69 f7       	brne	.-38     	; 0x32bc <lcd_data+0x68a>
    32e2:	24 c0       	rjmp	.+72     	; 0x332c <lcd_data+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e4:	68 a1       	ldd	r22, Y+32	; 0x20
    32e6:	79 a1       	ldd	r23, Y+33	; 0x21
    32e8:	8a a1       	ldd	r24, Y+34	; 0x22
    32ea:	9b a1       	ldd	r25, Y+35	; 0x23
    32ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	9f 8f       	std	Y+31, r25	; 0x1f
    32f6:	8e 8f       	std	Y+30, r24	; 0x1e
    32f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32fc:	9b 8f       	std	Y+27, r25	; 0x1b
    32fe:	8a 8f       	std	Y+26, r24	; 0x1a
    3300:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3302:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	f1 f7       	brne	.-4      	; 0x3304 <lcd_data+0x6d2>
    3308:	9b 8f       	std	Y+27, r25	; 0x1b
    330a:	8a 8f       	std	Y+26, r24	; 0x1a
    330c:	0f c0       	rjmp	.+30     	; 0x332c <lcd_data+0x6fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    330e:	69 a5       	ldd	r22, Y+41	; 0x29
    3310:	7a a5       	ldd	r23, Y+42	; 0x2a
    3312:	8b a5       	ldd	r24, Y+43	; 0x2b
    3314:	9c a5       	ldd	r25, Y+44	; 0x2c
    3316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	88 a7       	std	Y+40, r24	; 0x28
    3320:	88 a5       	ldd	r24, Y+40	; 0x28
    3322:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3324:	89 8d       	ldd	r24, Y+25	; 0x19
    3326:	8a 95       	dec	r24
    3328:	f1 f7       	brne	.-4      	; 0x3326 <lcd_data+0x6f4>
    332a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_Write(PORT_B3, Low);
    332c:	8b e0       	ldi	r24, 0x0B	; 11
    332e:	60 e0       	ldi	r22, 0x00	; 0
    3330:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    3334:	80 e0       	ldi	r24, 0x00	; 0
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	a8 e4       	ldi	r26, 0x48	; 72
    333a:	b3 e4       	ldi	r27, 0x43	; 67
    333c:	8d 8b       	std	Y+21, r24	; 0x15
    333e:	9e 8b       	std	Y+22, r25	; 0x16
    3340:	af 8b       	std	Y+23, r26	; 0x17
    3342:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3344:	6d 89       	ldd	r22, Y+21	; 0x15
    3346:	7e 89       	ldd	r23, Y+22	; 0x16
    3348:	8f 89       	ldd	r24, Y+23	; 0x17
    334a:	98 8d       	ldd	r25, Y+24	; 0x18
    334c:	2b ea       	ldi	r18, 0xAB	; 171
    334e:	3a ea       	ldi	r19, 0xAA	; 170
    3350:	4a ea       	ldi	r20, 0xAA	; 170
    3352:	50 e4       	ldi	r21, 0x40	; 64
    3354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	89 8b       	std	Y+17, r24	; 0x11
    335e:	9a 8b       	std	Y+18, r25	; 0x12
    3360:	ab 8b       	std	Y+19, r26	; 0x13
    3362:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3364:	69 89       	ldd	r22, Y+17	; 0x11
    3366:	7a 89       	ldd	r23, Y+18	; 0x12
    3368:	8b 89       	ldd	r24, Y+19	; 0x13
    336a:	9c 89       	ldd	r25, Y+20	; 0x14
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	40 e8       	ldi	r20, 0x80	; 128
    3372:	5f e3       	ldi	r21, 0x3F	; 63
    3374:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3378:	88 23       	and	r24, r24
    337a:	1c f4       	brge	.+6      	; 0x3382 <lcd_data+0x750>
		__ticks = 1;
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	88 8b       	std	Y+16, r24	; 0x10
    3380:	91 c0       	rjmp	.+290    	; 0x34a4 <lcd_data+0x872>
	else if (__tmp > 255)
    3382:	69 89       	ldd	r22, Y+17	; 0x11
    3384:	7a 89       	ldd	r23, Y+18	; 0x12
    3386:	8b 89       	ldd	r24, Y+19	; 0x13
    3388:	9c 89       	ldd	r25, Y+20	; 0x14
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	4f e7       	ldi	r20, 0x7F	; 127
    3390:	53 e4       	ldi	r21, 0x43	; 67
    3392:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3396:	18 16       	cp	r1, r24
    3398:	0c f0       	brlt	.+2      	; 0x339c <lcd_data+0x76a>
    339a:	7b c0       	rjmp	.+246    	; 0x3492 <lcd_data+0x860>
	{
		_delay_ms(__us / 1000.0);
    339c:	6d 89       	ldd	r22, Y+21	; 0x15
    339e:	7e 89       	ldd	r23, Y+22	; 0x16
    33a0:	8f 89       	ldd	r24, Y+23	; 0x17
    33a2:	98 8d       	ldd	r25, Y+24	; 0x18
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	4a e7       	ldi	r20, 0x7A	; 122
    33aa:	54 e4       	ldi	r21, 0x44	; 68
    33ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	8c 87       	std	Y+12, r24	; 0x0c
    33b6:	9d 87       	std	Y+13, r25	; 0x0d
    33b8:	ae 87       	std	Y+14, r26	; 0x0e
    33ba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    33be:	7d 85       	ldd	r23, Y+13	; 0x0d
    33c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    33c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	4a e7       	ldi	r20, 0x7A	; 122
    33ca:	55 e4       	ldi	r21, 0x45	; 69
    33cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	88 87       	std	Y+8, r24	; 0x08
    33d6:	99 87       	std	Y+9, r25	; 0x09
    33d8:	aa 87       	std	Y+10, r26	; 0x0a
    33da:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    33dc:	68 85       	ldd	r22, Y+8	; 0x08
    33de:	79 85       	ldd	r23, Y+9	; 0x09
    33e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    33e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e8       	ldi	r20, 0x80	; 128
    33ea:	5f e3       	ldi	r21, 0x3F	; 63
    33ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33f0:	88 23       	and	r24, r24
    33f2:	2c f4       	brge	.+10     	; 0x33fe <lcd_data+0x7cc>
		__ticks = 1;
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	9f 83       	std	Y+7, r25	; 0x07
    33fa:	8e 83       	std	Y+6, r24	; 0x06
    33fc:	3f c0       	rjmp	.+126    	; 0x347c <lcd_data+0x84a>
	else if (__tmp > 65535)
    33fe:	68 85       	ldd	r22, Y+8	; 0x08
    3400:	79 85       	ldd	r23, Y+9	; 0x09
    3402:	8a 85       	ldd	r24, Y+10	; 0x0a
    3404:	9b 85       	ldd	r25, Y+11	; 0x0b
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	3f ef       	ldi	r19, 0xFF	; 255
    340a:	4f e7       	ldi	r20, 0x7F	; 127
    340c:	57 e4       	ldi	r21, 0x47	; 71
    340e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3412:	18 16       	cp	r1, r24
    3414:	4c f5       	brge	.+82     	; 0x3468 <lcd_data+0x836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3416:	6c 85       	ldd	r22, Y+12	; 0x0c
    3418:	7d 85       	ldd	r23, Y+13	; 0x0d
    341a:	8e 85       	ldd	r24, Y+14	; 0x0e
    341c:	9f 85       	ldd	r25, Y+15	; 0x0f
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e2       	ldi	r20, 0x20	; 32
    3424:	51 e4       	ldi	r21, 0x41	; 65
    3426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	bc 01       	movw	r22, r24
    3430:	cd 01       	movw	r24, r26
    3432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	9f 83       	std	Y+7, r25	; 0x07
    343c:	8e 83       	std	Y+6, r24	; 0x06
    343e:	0f c0       	rjmp	.+30     	; 0x345e <lcd_data+0x82c>
    3440:	80 e9       	ldi	r24, 0x90	; 144
    3442:	91 e0       	ldi	r25, 0x01	; 1
    3444:	9d 83       	std	Y+5, r25	; 0x05
    3446:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3448:	8c 81       	ldd	r24, Y+4	; 0x04
    344a:	9d 81       	ldd	r25, Y+5	; 0x05
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	f1 f7       	brne	.-4      	; 0x344c <lcd_data+0x81a>
    3450:	9d 83       	std	Y+5, r25	; 0x05
    3452:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3454:	8e 81       	ldd	r24, Y+6	; 0x06
    3456:	9f 81       	ldd	r25, Y+7	; 0x07
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	9f 83       	std	Y+7, r25	; 0x07
    345c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345e:	8e 81       	ldd	r24, Y+6	; 0x06
    3460:	9f 81       	ldd	r25, Y+7	; 0x07
    3462:	00 97       	sbiw	r24, 0x00	; 0
    3464:	69 f7       	brne	.-38     	; 0x3440 <lcd_data+0x80e>
    3466:	24 c0       	rjmp	.+72     	; 0x34b0 <lcd_data+0x87e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3468:	68 85       	ldd	r22, Y+8	; 0x08
    346a:	79 85       	ldd	r23, Y+9	; 0x09
    346c:	8a 85       	ldd	r24, Y+10	; 0x0a
    346e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	9f 83       	std	Y+7, r25	; 0x07
    347a:	8e 83       	std	Y+6, r24	; 0x06
    347c:	8e 81       	ldd	r24, Y+6	; 0x06
    347e:	9f 81       	ldd	r25, Y+7	; 0x07
    3480:	9b 83       	std	Y+3, r25	; 0x03
    3482:	8a 83       	std	Y+2, r24	; 0x02
    3484:	8a 81       	ldd	r24, Y+2	; 0x02
    3486:	9b 81       	ldd	r25, Y+3	; 0x03
    3488:	01 97       	sbiw	r24, 0x01	; 1
    348a:	f1 f7       	brne	.-4      	; 0x3488 <lcd_data+0x856>
    348c:	9b 83       	std	Y+3, r25	; 0x03
    348e:	8a 83       	std	Y+2, r24	; 0x02
    3490:	0f c0       	rjmp	.+30     	; 0x34b0 <lcd_data+0x87e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3492:	69 89       	ldd	r22, Y+17	; 0x11
    3494:	7a 89       	ldd	r23, Y+18	; 0x12
    3496:	8b 89       	ldd	r24, Y+19	; 0x13
    3498:	9c 89       	ldd	r25, Y+20	; 0x14
    349a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	88 8b       	std	Y+16, r24	; 0x10
    34a4:	88 89       	ldd	r24, Y+16	; 0x10
    34a6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	8a 95       	dec	r24
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <lcd_data+0x878>
    34ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    34b0:	cf 59       	subi	r28, 0x9F	; 159
    34b2:	df 4f       	sbci	r29, 0xFF	; 255
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	de bf       	out	0x3e, r29	; 62
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	cd bf       	out	0x3d, r28	; 61
    34be:	cf 91       	pop	r28
    34c0:	df 91       	pop	r29
    34c2:	1f 91       	pop	r17
    34c4:	0f 91       	pop	r16
    34c6:	08 95       	ret

000034c8 <lcd_string>:

void lcd_string(uint8 *str) {
    34c8:	df 93       	push	r29
    34ca:	cf 93       	push	r28
    34cc:	00 d0       	rcall	.+0      	; 0x34ce <lcd_string+0x6>
    34ce:	0f 92       	push	r0
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
    34d4:	9b 83       	std	Y+3, r25	; 0x03
    34d6:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i = 0; str[i]; i++) {
    34d8:	19 82       	std	Y+1, r1	; 0x01
    34da:	14 c0       	rjmp	.+40     	; 0x3504 <lcd_string+0x3c>
		if (i == 16) {
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	80 31       	cpi	r24, 0x10	; 16
    34e0:	19 f4       	brne	.+6      	; 0x34e8 <lcd_string+0x20>
			lcd_cmd(0xc0);
    34e2:	80 ec       	ldi	r24, 0xC0	; 192
    34e4:	0e 94 ce 11 	call	0x239c	; 0x239c <lcd_cmd>
		}
		lcd_data(str[i]);
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	28 2f       	mov	r18, r24
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	9b 81       	ldd	r25, Y+3	; 0x03
    34f2:	fc 01       	movw	r30, r24
    34f4:	e2 0f       	add	r30, r18
    34f6:	f3 1f       	adc	r31, r19
    34f8:	80 81       	ld	r24, Z
    34fa:	0e 94 19 16 	call	0x2c32	; 0x2c32 <lcd_data>
	DIO_Write(PORT_B3, Low);
	_delay_us(200);
}

void lcd_string(uint8 *str) {
	for (uint8 i = 0; str[i]; i++) {
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
    3500:	8f 5f       	subi	r24, 0xFF	; 255
    3502:	89 83       	std	Y+1, r24	; 0x01
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	28 2f       	mov	r18, r24
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	8a 81       	ldd	r24, Y+2	; 0x02
    350c:	9b 81       	ldd	r25, Y+3	; 0x03
    350e:	fc 01       	movw	r30, r24
    3510:	e2 0f       	add	r30, r18
    3512:	f3 1f       	adc	r31, r19
    3514:	80 81       	ld	r24, Z
    3516:	88 23       	and	r24, r24
    3518:	09 f7       	brne	.-62     	; 0x34dc <lcd_string+0x14>
		if (i == 16) {
			lcd_cmd(0xc0);
		}
		lcd_data(str[i]);
	}
}
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	0f 90       	pop	r0
    3520:	cf 91       	pop	r28
    3522:	df 91       	pop	r29
    3524:	08 95       	ret

00003526 <lcd_sent_num>:

void lcd_sent_num(uint32 num) {
    3526:	df 93       	push	r29
    3528:	cf 93       	push	r28
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
    352e:	2e 97       	sbiw	r28, 0x0e	; 14
    3530:	0f b6       	in	r0, 0x3f	; 63
    3532:	f8 94       	cli
    3534:	de bf       	out	0x3e, r29	; 62
    3536:	0f be       	out	0x3f, r0	; 63
    3538:	cd bf       	out	0x3d, r28	; 61
    353a:	6b 87       	std	Y+11, r22	; 0x0b
    353c:	7c 87       	std	Y+12, r23	; 0x0c
    353e:	8d 87       	std	Y+13, r24	; 0x0d
    3540:	9e 87       	std	Y+14, r25	; 0x0e
	uint8 n[10];
	itoa(num, n, 10);
    3542:	8b 85       	ldd	r24, Y+11	; 0x0b
    3544:	9c 85       	ldd	r25, Y+12	; 0x0c
    3546:	9e 01       	movw	r18, r28
    3548:	2f 5f       	subi	r18, 0xFF	; 255
    354a:	3f 4f       	sbci	r19, 0xFF	; 255
    354c:	b9 01       	movw	r22, r18
    354e:	4a e0       	ldi	r20, 0x0A	; 10
    3550:	50 e0       	ldi	r21, 0x00	; 0
    3552:	0e 94 4f 06 	call	0xc9e	; 0xc9e <itoa>
	lcd_string(n);
    3556:	ce 01       	movw	r24, r28
    3558:	01 96       	adiw	r24, 0x01	; 1
    355a:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <lcd_string>
}
    355e:	2e 96       	adiw	r28, 0x0e	; 14
    3560:	0f b6       	in	r0, 0x3f	; 63
    3562:	f8 94       	cli
    3564:	de bf       	out	0x3e, r29	; 62
    3566:	0f be       	out	0x3f, r0	; 63
    3568:	cd bf       	out	0x3d, r28	; 61
    356a:	cf 91       	pop	r28
    356c:	df 91       	pop	r29
    356e:	08 95       	ret

00003570 <lcd_proteus_init>:

void lcd_proteus_init(void) {
    3570:	df 93       	push	r29
    3572:	cf 93       	push	r28
    3574:	cd b7       	in	r28, 0x3d	; 61
    3576:	de b7       	in	r29, 0x3e	; 62
    3578:	2e 97       	sbiw	r28, 0x0e	; 14
    357a:	0f b6       	in	r0, 0x3f	; 63
    357c:	f8 94       	cli
    357e:	de bf       	out	0x3e, r29	; 62
    3580:	0f be       	out	0x3f, r0	; 63
    3582:	cd bf       	out	0x3d, r28	; 61
	DDRD=0xff;
    3584:	e1 e3       	ldi	r30, 0x31	; 49
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	8f ef       	ldi	r24, 0xFF	; 255
    358a:	80 83       	st	Z, r24
	CLEAR_BIT(PORTD,2);
    358c:	a2 e3       	ldi	r26, 0x32	; 50
    358e:	b0 e0       	ldi	r27, 0x00	; 0
    3590:	e2 e3       	ldi	r30, 0x32	; 50
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	80 81       	ld	r24, Z
    3596:	8b 7f       	andi	r24, 0xFB	; 251
    3598:	8c 93       	st	X, r24
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	a0 ea       	ldi	r26, 0xA0	; 160
    35a0:	b1 e4       	ldi	r27, 0x41	; 65
    35a2:	8b 87       	std	Y+11, r24	; 0x0b
    35a4:	9c 87       	std	Y+12, r25	; 0x0c
    35a6:	ad 87       	std	Y+13, r26	; 0x0d
    35a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    35ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    35b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	4a e7       	ldi	r20, 0x7A	; 122
    35b8:	55 e4       	ldi	r21, 0x45	; 69
    35ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	8f 83       	std	Y+7, r24	; 0x07
    35c4:	98 87       	std	Y+8, r25	; 0x08
    35c6:	a9 87       	std	Y+9, r26	; 0x09
    35c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35ca:	6f 81       	ldd	r22, Y+7	; 0x07
    35cc:	78 85       	ldd	r23, Y+8	; 0x08
    35ce:	89 85       	ldd	r24, Y+9	; 0x09
    35d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	40 e8       	ldi	r20, 0x80	; 128
    35d8:	5f e3       	ldi	r21, 0x3F	; 63
    35da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35de:	88 23       	and	r24, r24
    35e0:	2c f4       	brge	.+10     	; 0x35ec <lcd_proteus_init+0x7c>
		__ticks = 1;
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	9e 83       	std	Y+6, r25	; 0x06
    35e8:	8d 83       	std	Y+5, r24	; 0x05
    35ea:	3f c0       	rjmp	.+126    	; 0x366a <lcd_proteus_init+0xfa>
	else if (__tmp > 65535)
    35ec:	6f 81       	ldd	r22, Y+7	; 0x07
    35ee:	78 85       	ldd	r23, Y+8	; 0x08
    35f0:	89 85       	ldd	r24, Y+9	; 0x09
    35f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	3f ef       	ldi	r19, 0xFF	; 255
    35f8:	4f e7       	ldi	r20, 0x7F	; 127
    35fa:	57 e4       	ldi	r21, 0x47	; 71
    35fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3600:	18 16       	cp	r1, r24
    3602:	4c f5       	brge	.+82     	; 0x3656 <lcd_proteus_init+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3604:	6b 85       	ldd	r22, Y+11	; 0x0b
    3606:	7c 85       	ldd	r23, Y+12	; 0x0c
    3608:	8d 85       	ldd	r24, Y+13	; 0x0d
    360a:	9e 85       	ldd	r25, Y+14	; 0x0e
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e2       	ldi	r20, 0x20	; 32
    3612:	51 e4       	ldi	r21, 0x41	; 65
    3614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	bc 01       	movw	r22, r24
    361e:	cd 01       	movw	r24, r26
    3620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	9e 83       	std	Y+6, r25	; 0x06
    362a:	8d 83       	std	Y+5, r24	; 0x05
    362c:	0f c0       	rjmp	.+30     	; 0x364c <lcd_proteus_init+0xdc>
    362e:	80 e9       	ldi	r24, 0x90	; 144
    3630:	91 e0       	ldi	r25, 0x01	; 1
    3632:	9c 83       	std	Y+4, r25	; 0x04
    3634:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3636:	8b 81       	ldd	r24, Y+3	; 0x03
    3638:	9c 81       	ldd	r25, Y+4	; 0x04
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	f1 f7       	brne	.-4      	; 0x363a <lcd_proteus_init+0xca>
    363e:	9c 83       	std	Y+4, r25	; 0x04
    3640:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3642:	8d 81       	ldd	r24, Y+5	; 0x05
    3644:	9e 81       	ldd	r25, Y+6	; 0x06
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	9e 83       	std	Y+6, r25	; 0x06
    364a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    364c:	8d 81       	ldd	r24, Y+5	; 0x05
    364e:	9e 81       	ldd	r25, Y+6	; 0x06
    3650:	00 97       	sbiw	r24, 0x00	; 0
    3652:	69 f7       	brne	.-38     	; 0x362e <lcd_proteus_init+0xbe>
    3654:	14 c0       	rjmp	.+40     	; 0x367e <lcd_proteus_init+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3656:	6f 81       	ldd	r22, Y+7	; 0x07
    3658:	78 85       	ldd	r23, Y+8	; 0x08
    365a:	89 85       	ldd	r24, Y+9	; 0x09
    365c:	9a 85       	ldd	r25, Y+10	; 0x0a
    365e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	9e 83       	std	Y+6, r25	; 0x06
    3668:	8d 83       	std	Y+5, r24	; 0x05
    366a:	8d 81       	ldd	r24, Y+5	; 0x05
    366c:	9e 81       	ldd	r25, Y+6	; 0x06
    366e:	9a 83       	std	Y+2, r25	; 0x02
    3670:	89 83       	std	Y+1, r24	; 0x01
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	01 97       	sbiw	r24, 0x01	; 1
    3678:	f1 f7       	brne	.-4      	; 0x3676 <lcd_proteus_init+0x106>
    367a:	9a 83       	std	Y+2, r25	; 0x02
    367c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	lcd_proteus_cmd(0x01);
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <lcd_proteus_cmd>
	lcd_proteus_cmd(0x33);
    3684:	83 e3       	ldi	r24, 0x33	; 51
    3686:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <lcd_proteus_cmd>
	lcd_proteus_cmd(0x32);
    368a:	82 e3       	ldi	r24, 0x32	; 50
    368c:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <lcd_proteus_cmd>
	lcd_proteus_cmd(0x28);
    3690:	88 e2       	ldi	r24, 0x28	; 40
    3692:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <lcd_proteus_cmd>
	lcd_proteus_cmd(0x0f);
    3696:	8f e0       	ldi	r24, 0x0F	; 15
    3698:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <lcd_proteus_cmd>
	lcd_proteus_cmd(0x06);
    369c:	86 e0       	ldi	r24, 0x06	; 6
    369e:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <lcd_proteus_cmd>
	lcd_proteus_cmd(0x01);
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <lcd_proteus_cmd>
//	lcd_proteus_cmd(0x80);
}
    36a8:	2e 96       	adiw	r28, 0x0e	; 14
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	f8 94       	cli
    36ae:	de bf       	out	0x3e, r29	; 62
    36b0:	0f be       	out	0x3f, r0	; 63
    36b2:	cd bf       	out	0x3d, r28	; 61
    36b4:	cf 91       	pop	r28
    36b6:	df 91       	pop	r29
    36b8:	08 95       	ret

000036ba <lcd_proteus_cmd>:

void lcd_proteus_cmd(uint8 cmd) {
    36ba:	0f 93       	push	r16
    36bc:	1f 93       	push	r17
    36be:	df 93       	push	r29
    36c0:	cf 93       	push	r28
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	c1 56       	subi	r28, 0x61	; 97
    36c8:	d0 40       	sbci	r29, 0x00	; 0
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	cd bf       	out	0x3d, r28	; 61
    36d4:	fe 01       	movw	r30, r28
    36d6:	ef 59       	subi	r30, 0x9F	; 159
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	80 83       	st	Z, r24
	CLEAR_BIT(PORTD,2);
    36dc:	a2 e3       	ldi	r26, 0x32	; 50
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	e2 e3       	ldi	r30, 0x32	; 50
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
    36e6:	8b 7f       	andi	r24, 0xFB	; 251
    36e8:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD,1);
    36ea:	a2 e3       	ldi	r26, 0x32	; 50
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	e2 e3       	ldi	r30, 0x32	; 50
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	8d 7f       	andi	r24, 0xFD	; 253
    36f6:	8c 93       	st	X, r24
	if(GET_BIT(cmd, 4)) { SET_BIT(PORTD,4) ;}else{ CLEAR_BIT(PORTD,4);}
    36f8:	fe 01       	movw	r30, r28
    36fa:	ef 59       	subi	r30, 0x9F	; 159
    36fc:	ff 4f       	sbci	r31, 0xFF	; 255
    36fe:	80 81       	ld	r24, Z
    3700:	88 2f       	mov	r24, r24
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	80 71       	andi	r24, 0x10	; 16
    3706:	90 70       	andi	r25, 0x00	; 0
    3708:	00 97       	sbiw	r24, 0x00	; 0
    370a:	41 f0       	breq	.+16     	; 0x371c <lcd_proteus_cmd+0x62>
    370c:	a2 e3       	ldi	r26, 0x32	; 50
    370e:	b0 e0       	ldi	r27, 0x00	; 0
    3710:	e2 e3       	ldi	r30, 0x32	; 50
    3712:	f0 e0       	ldi	r31, 0x00	; 0
    3714:	80 81       	ld	r24, Z
    3716:	80 61       	ori	r24, 0x10	; 16
    3718:	8c 93       	st	X, r24
    371a:	07 c0       	rjmp	.+14     	; 0x372a <lcd_proteus_cmd+0x70>
    371c:	a2 e3       	ldi	r26, 0x32	; 50
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	e2 e3       	ldi	r30, 0x32	; 50
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	80 81       	ld	r24, Z
    3726:	8f 7e       	andi	r24, 0xEF	; 239
    3728:	8c 93       	st	X, r24
	if(GET_BIT(cmd, 5)) { SET_BIT(PORTD,5) ;}else{ CLEAR_BIT(PORTD,5);}
    372a:	fe 01       	movw	r30, r28
    372c:	ef 59       	subi	r30, 0x9F	; 159
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	80 81       	ld	r24, Z
    3732:	88 2f       	mov	r24, r24
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	80 72       	andi	r24, 0x20	; 32
    3738:	90 70       	andi	r25, 0x00	; 0
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	41 f0       	breq	.+16     	; 0x374e <lcd_proteus_cmd+0x94>
    373e:	a2 e3       	ldi	r26, 0x32	; 50
    3740:	b0 e0       	ldi	r27, 0x00	; 0
    3742:	e2 e3       	ldi	r30, 0x32	; 50
    3744:	f0 e0       	ldi	r31, 0x00	; 0
    3746:	80 81       	ld	r24, Z
    3748:	80 62       	ori	r24, 0x20	; 32
    374a:	8c 93       	st	X, r24
    374c:	07 c0       	rjmp	.+14     	; 0x375c <lcd_proteus_cmd+0xa2>
    374e:	a2 e3       	ldi	r26, 0x32	; 50
    3750:	b0 e0       	ldi	r27, 0x00	; 0
    3752:	e2 e3       	ldi	r30, 0x32	; 50
    3754:	f0 e0       	ldi	r31, 0x00	; 0
    3756:	80 81       	ld	r24, Z
    3758:	8f 7d       	andi	r24, 0xDF	; 223
    375a:	8c 93       	st	X, r24
	if(GET_BIT(cmd, 6)) { SET_BIT(PORTD,6) ;}else{ CLEAR_BIT(PORTD,6);}
    375c:	fe 01       	movw	r30, r28
    375e:	ef 59       	subi	r30, 0x9F	; 159
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	80 81       	ld	r24, Z
    3764:	88 2f       	mov	r24, r24
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	80 74       	andi	r24, 0x40	; 64
    376a:	90 70       	andi	r25, 0x00	; 0
    376c:	00 97       	sbiw	r24, 0x00	; 0
    376e:	41 f0       	breq	.+16     	; 0x3780 <lcd_proteus_cmd+0xc6>
    3770:	a2 e3       	ldi	r26, 0x32	; 50
    3772:	b0 e0       	ldi	r27, 0x00	; 0
    3774:	e2 e3       	ldi	r30, 0x32	; 50
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	80 81       	ld	r24, Z
    377a:	80 64       	ori	r24, 0x40	; 64
    377c:	8c 93       	st	X, r24
    377e:	07 c0       	rjmp	.+14     	; 0x378e <lcd_proteus_cmd+0xd4>
    3780:	a2 e3       	ldi	r26, 0x32	; 50
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	e2 e3       	ldi	r30, 0x32	; 50
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	80 81       	ld	r24, Z
    378a:	8f 7b       	andi	r24, 0xBF	; 191
    378c:	8c 93       	st	X, r24
	if(GET_BIT(cmd, 7)) { SET_BIT(PORTD,7) ;}else{ CLEAR_BIT(PORTD,7);}
    378e:	fe 01       	movw	r30, r28
    3790:	ef 59       	subi	r30, 0x9F	; 159
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	80 81       	ld	r24, Z
    3796:	88 23       	and	r24, r24
    3798:	44 f4       	brge	.+16     	; 0x37aa <lcd_proteus_cmd+0xf0>
    379a:	a2 e3       	ldi	r26, 0x32	; 50
    379c:	b0 e0       	ldi	r27, 0x00	; 0
    379e:	e2 e3       	ldi	r30, 0x32	; 50
    37a0:	f0 e0       	ldi	r31, 0x00	; 0
    37a2:	80 81       	ld	r24, Z
    37a4:	80 68       	ori	r24, 0x80	; 128
    37a6:	8c 93       	st	X, r24
    37a8:	07 c0       	rjmp	.+14     	; 0x37b8 <lcd_proteus_cmd+0xfe>
    37aa:	a2 e3       	ldi	r26, 0x32	; 50
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	e2 e3       	ldi	r30, 0x32	; 50
    37b0:	f0 e0       	ldi	r31, 0x00	; 0
    37b2:	80 81       	ld	r24, Z
    37b4:	8f 77       	andi	r24, 0x7F	; 127
    37b6:	8c 93       	st	X, r24
	SET_BIT(PORTD,3);
    37b8:	a2 e3       	ldi	r26, 0x32	; 50
    37ba:	b0 e0       	ldi	r27, 0x00	; 0
    37bc:	e2 e3       	ldi	r30, 0x32	; 50
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	80 81       	ld	r24, Z
    37c2:	88 60       	ori	r24, 0x08	; 8
    37c4:	8c 93       	st	X, r24
    37c6:	fe 01       	movw	r30, r28
    37c8:	e3 5a       	subi	r30, 0xA3	; 163
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	a0 e2       	ldi	r26, 0x20	; 32
    37d2:	b1 e4       	ldi	r27, 0x41	; 65
    37d4:	80 83       	st	Z, r24
    37d6:	91 83       	std	Z+1, r25	; 0x01
    37d8:	a2 83       	std	Z+2, r26	; 0x02
    37da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37dc:	8e 01       	movw	r16, r28
    37de:	07 5a       	subi	r16, 0xA7	; 167
    37e0:	1f 4f       	sbci	r17, 0xFF	; 255
    37e2:	fe 01       	movw	r30, r28
    37e4:	e3 5a       	subi	r30, 0xA3	; 163
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	60 81       	ld	r22, Z
    37ea:	71 81       	ldd	r23, Z+1	; 0x01
    37ec:	82 81       	ldd	r24, Z+2	; 0x02
    37ee:	93 81       	ldd	r25, Z+3	; 0x03
    37f0:	2b ea       	ldi	r18, 0xAB	; 171
    37f2:	3a ea       	ldi	r19, 0xAA	; 170
    37f4:	4a ea       	ldi	r20, 0xAA	; 170
    37f6:	50 e4       	ldi	r21, 0x40	; 64
    37f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	f8 01       	movw	r30, r16
    3802:	80 83       	st	Z, r24
    3804:	91 83       	std	Z+1, r25	; 0x01
    3806:	a2 83       	std	Z+2, r26	; 0x02
    3808:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    380a:	fe 01       	movw	r30, r28
    380c:	e7 5a       	subi	r30, 0xA7	; 167
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	60 81       	ld	r22, Z
    3812:	71 81       	ldd	r23, Z+1	; 0x01
    3814:	82 81       	ldd	r24, Z+2	; 0x02
    3816:	93 81       	ldd	r25, Z+3	; 0x03
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e8       	ldi	r20, 0x80	; 128
    381e:	5f e3       	ldi	r21, 0x3F	; 63
    3820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3824:	88 23       	and	r24, r24
    3826:	34 f4       	brge	.+12     	; 0x3834 <lcd_proteus_cmd+0x17a>
		__ticks = 1;
    3828:	fe 01       	movw	r30, r28
    382a:	e8 5a       	subi	r30, 0xA8	; 168
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	80 83       	st	Z, r24
    3832:	e0 c0       	rjmp	.+448    	; 0x39f4 <lcd_proteus_cmd+0x33a>
	else if (__tmp > 255)
    3834:	fe 01       	movw	r30, r28
    3836:	e7 5a       	subi	r30, 0xA7	; 167
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	60 81       	ld	r22, Z
    383c:	71 81       	ldd	r23, Z+1	; 0x01
    383e:	82 81       	ldd	r24, Z+2	; 0x02
    3840:	93 81       	ldd	r25, Z+3	; 0x03
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	4f e7       	ldi	r20, 0x7F	; 127
    3848:	53 e4       	ldi	r21, 0x43	; 67
    384a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    384e:	18 16       	cp	r1, r24
    3850:	0c f0       	brlt	.+2      	; 0x3854 <lcd_proteus_cmd+0x19a>
    3852:	c0 c0       	rjmp	.+384    	; 0x39d4 <lcd_proteus_cmd+0x31a>
	{
		_delay_ms(__us / 1000.0);
    3854:	fe 01       	movw	r30, r28
    3856:	e3 5a       	subi	r30, 0xA3	; 163
    3858:	ff 4f       	sbci	r31, 0xFF	; 255
    385a:	60 81       	ld	r22, Z
    385c:	71 81       	ldd	r23, Z+1	; 0x01
    385e:	82 81       	ldd	r24, Z+2	; 0x02
    3860:	93 81       	ldd	r25, Z+3	; 0x03
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	4a e7       	ldi	r20, 0x7A	; 122
    3868:	54 e4       	ldi	r21, 0x44	; 68
    386a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	fe 01       	movw	r30, r28
    3874:	ec 5a       	subi	r30, 0xAC	; 172
    3876:	ff 4f       	sbci	r31, 0xFF	; 255
    3878:	80 83       	st	Z, r24
    387a:	91 83       	std	Z+1, r25	; 0x01
    387c:	a2 83       	std	Z+2, r26	; 0x02
    387e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3880:	8e 01       	movw	r16, r28
    3882:	00 5b       	subi	r16, 0xB0	; 176
    3884:	1f 4f       	sbci	r17, 0xFF	; 255
    3886:	fe 01       	movw	r30, r28
    3888:	ec 5a       	subi	r30, 0xAC	; 172
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	60 81       	ld	r22, Z
    388e:	71 81       	ldd	r23, Z+1	; 0x01
    3890:	82 81       	ldd	r24, Z+2	; 0x02
    3892:	93 81       	ldd	r25, Z+3	; 0x03
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	4a e7       	ldi	r20, 0x7A	; 122
    389a:	55 e4       	ldi	r21, 0x45	; 69
    389c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	f8 01       	movw	r30, r16
    38a6:	80 83       	st	Z, r24
    38a8:	91 83       	std	Z+1, r25	; 0x01
    38aa:	a2 83       	std	Z+2, r26	; 0x02
    38ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38ae:	fe 01       	movw	r30, r28
    38b0:	e0 5b       	subi	r30, 0xB0	; 176
    38b2:	ff 4f       	sbci	r31, 0xFF	; 255
    38b4:	60 81       	ld	r22, Z
    38b6:	71 81       	ldd	r23, Z+1	; 0x01
    38b8:	82 81       	ldd	r24, Z+2	; 0x02
    38ba:	93 81       	ldd	r25, Z+3	; 0x03
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	40 e8       	ldi	r20, 0x80	; 128
    38c2:	5f e3       	ldi	r21, 0x3F	; 63
    38c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38c8:	88 23       	and	r24, r24
    38ca:	44 f4       	brge	.+16     	; 0x38dc <lcd_proteus_cmd+0x222>
		__ticks = 1;
    38cc:	fe 01       	movw	r30, r28
    38ce:	e2 5b       	subi	r30, 0xB2	; 178
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	91 83       	std	Z+1, r25	; 0x01
    38d8:	80 83       	st	Z, r24
    38da:	64 c0       	rjmp	.+200    	; 0x39a4 <lcd_proteus_cmd+0x2ea>
	else if (__tmp > 65535)
    38dc:	fe 01       	movw	r30, r28
    38de:	e0 5b       	subi	r30, 0xB0	; 176
    38e0:	ff 4f       	sbci	r31, 0xFF	; 255
    38e2:	60 81       	ld	r22, Z
    38e4:	71 81       	ldd	r23, Z+1	; 0x01
    38e6:	82 81       	ldd	r24, Z+2	; 0x02
    38e8:	93 81       	ldd	r25, Z+3	; 0x03
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	3f ef       	ldi	r19, 0xFF	; 255
    38ee:	4f e7       	ldi	r20, 0x7F	; 127
    38f0:	57 e4       	ldi	r21, 0x47	; 71
    38f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38f6:	18 16       	cp	r1, r24
    38f8:	0c f0       	brlt	.+2      	; 0x38fc <lcd_proteus_cmd+0x242>
    38fa:	43 c0       	rjmp	.+134    	; 0x3982 <lcd_proteus_cmd+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fc:	fe 01       	movw	r30, r28
    38fe:	ec 5a       	subi	r30, 0xAC	; 172
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	60 81       	ld	r22, Z
    3904:	71 81       	ldd	r23, Z+1	; 0x01
    3906:	82 81       	ldd	r24, Z+2	; 0x02
    3908:	93 81       	ldd	r25, Z+3	; 0x03
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	40 e2       	ldi	r20, 0x20	; 32
    3910:	51 e4       	ldi	r21, 0x41	; 65
    3912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	8e 01       	movw	r16, r28
    391c:	02 5b       	subi	r16, 0xB2	; 178
    391e:	1f 4f       	sbci	r17, 0xFF	; 255
    3920:	bc 01       	movw	r22, r24
    3922:	cd 01       	movw	r24, r26
    3924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	f8 01       	movw	r30, r16
    392e:	91 83       	std	Z+1, r25	; 0x01
    3930:	80 83       	st	Z, r24
    3932:	1f c0       	rjmp	.+62     	; 0x3972 <lcd_proteus_cmd+0x2b8>
    3934:	fe 01       	movw	r30, r28
    3936:	e4 5b       	subi	r30, 0xB4	; 180
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	80 e9       	ldi	r24, 0x90	; 144
    393c:	91 e0       	ldi	r25, 0x01	; 1
    393e:	91 83       	std	Z+1, r25	; 0x01
    3940:	80 83       	st	Z, r24
    3942:	fe 01       	movw	r30, r28
    3944:	e4 5b       	subi	r30, 0xB4	; 180
    3946:	ff 4f       	sbci	r31, 0xFF	; 255
    3948:	80 81       	ld	r24, Z
    394a:	91 81       	ldd	r25, Z+1	; 0x01
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	f1 f7       	brne	.-4      	; 0x394c <lcd_proteus_cmd+0x292>
    3950:	fe 01       	movw	r30, r28
    3952:	e4 5b       	subi	r30, 0xB4	; 180
    3954:	ff 4f       	sbci	r31, 0xFF	; 255
    3956:	91 83       	std	Z+1, r25	; 0x01
    3958:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    395a:	de 01       	movw	r26, r28
    395c:	a2 5b       	subi	r26, 0xB2	; 178
    395e:	bf 4f       	sbci	r27, 0xFF	; 255
    3960:	fe 01       	movw	r30, r28
    3962:	e2 5b       	subi	r30, 0xB2	; 178
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	80 81       	ld	r24, Z
    3968:	91 81       	ldd	r25, Z+1	; 0x01
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	11 96       	adiw	r26, 0x01	; 1
    396e:	9c 93       	st	X, r25
    3970:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3972:	fe 01       	movw	r30, r28
    3974:	e2 5b       	subi	r30, 0xB2	; 178
    3976:	ff 4f       	sbci	r31, 0xFF	; 255
    3978:	80 81       	ld	r24, Z
    397a:	91 81       	ldd	r25, Z+1	; 0x01
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	d1 f6       	brne	.-76     	; 0x3934 <lcd_proteus_cmd+0x27a>
    3980:	4b c0       	rjmp	.+150    	; 0x3a18 <lcd_proteus_cmd+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3982:	8e 01       	movw	r16, r28
    3984:	02 5b       	subi	r16, 0xB2	; 178
    3986:	1f 4f       	sbci	r17, 0xFF	; 255
    3988:	fe 01       	movw	r30, r28
    398a:	e0 5b       	subi	r30, 0xB0	; 176
    398c:	ff 4f       	sbci	r31, 0xFF	; 255
    398e:	60 81       	ld	r22, Z
    3990:	71 81       	ldd	r23, Z+1	; 0x01
    3992:	82 81       	ldd	r24, Z+2	; 0x02
    3994:	93 81       	ldd	r25, Z+3	; 0x03
    3996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	f8 01       	movw	r30, r16
    39a0:	91 83       	std	Z+1, r25	; 0x01
    39a2:	80 83       	st	Z, r24
    39a4:	de 01       	movw	r26, r28
    39a6:	a6 5b       	subi	r26, 0xB6	; 182
    39a8:	bf 4f       	sbci	r27, 0xFF	; 255
    39aa:	fe 01       	movw	r30, r28
    39ac:	e2 5b       	subi	r30, 0xB2	; 178
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	80 81       	ld	r24, Z
    39b2:	91 81       	ldd	r25, Z+1	; 0x01
    39b4:	11 96       	adiw	r26, 0x01	; 1
    39b6:	9c 93       	st	X, r25
    39b8:	8e 93       	st	-X, r24
    39ba:	fe 01       	movw	r30, r28
    39bc:	e6 5b       	subi	r30, 0xB6	; 182
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	80 81       	ld	r24, Z
    39c2:	91 81       	ldd	r25, Z+1	; 0x01
    39c4:	01 97       	sbiw	r24, 0x01	; 1
    39c6:	f1 f7       	brne	.-4      	; 0x39c4 <lcd_proteus_cmd+0x30a>
    39c8:	fe 01       	movw	r30, r28
    39ca:	e6 5b       	subi	r30, 0xB6	; 182
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	91 83       	std	Z+1, r25	; 0x01
    39d0:	80 83       	st	Z, r24
    39d2:	22 c0       	rjmp	.+68     	; 0x3a18 <lcd_proteus_cmd+0x35e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    39d4:	8e 01       	movw	r16, r28
    39d6:	08 5a       	subi	r16, 0xA8	; 168
    39d8:	1f 4f       	sbci	r17, 0xFF	; 255
    39da:	fe 01       	movw	r30, r28
    39dc:	e7 5a       	subi	r30, 0xA7	; 167
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	60 81       	ld	r22, Z
    39e2:	71 81       	ldd	r23, Z+1	; 0x01
    39e4:	82 81       	ldd	r24, Z+2	; 0x02
    39e6:	93 81       	ldd	r25, Z+3	; 0x03
    39e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	f8 01       	movw	r30, r16
    39f2:	80 83       	st	Z, r24
    39f4:	de 01       	movw	r26, r28
    39f6:	a7 5b       	subi	r26, 0xB7	; 183
    39f8:	bf 4f       	sbci	r27, 0xFF	; 255
    39fa:	fe 01       	movw	r30, r28
    39fc:	e8 5a       	subi	r30, 0xA8	; 168
    39fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3a00:	80 81       	ld	r24, Z
    3a02:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a04:	fe 01       	movw	r30, r28
    3a06:	e7 5b       	subi	r30, 0xB7	; 183
    3a08:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0a:	80 81       	ld	r24, Z
    3a0c:	8a 95       	dec	r24
    3a0e:	f1 f7       	brne	.-4      	; 0x3a0c <lcd_proteus_cmd+0x352>
    3a10:	fe 01       	movw	r30, r28
    3a12:	e7 5b       	subi	r30, 0xB7	; 183
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	80 83       	st	Z, r24
	_delay_us(10);
	CLEAR_BIT(PORTD,3);
    3a18:	a2 e3       	ldi	r26, 0x32	; 50
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	e2 e3       	ldi	r30, 0x32	; 50
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	80 81       	ld	r24, Z
    3a22:	87 7f       	andi	r24, 0xF7	; 247
    3a24:	8c 93       	st	X, r24
    3a26:	fe 01       	movw	r30, r28
    3a28:	eb 5b       	subi	r30, 0xBB	; 187
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	a8 e4       	ldi	r26, 0x48	; 72
    3a32:	b3 e4       	ldi	r27, 0x43	; 67
    3a34:	80 83       	st	Z, r24
    3a36:	91 83       	std	Z+1, r25	; 0x01
    3a38:	a2 83       	std	Z+2, r26	; 0x02
    3a3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a3c:	8e 01       	movw	r16, r28
    3a3e:	0f 5b       	subi	r16, 0xBF	; 191
    3a40:	1f 4f       	sbci	r17, 0xFF	; 255
    3a42:	fe 01       	movw	r30, r28
    3a44:	eb 5b       	subi	r30, 0xBB	; 187
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	60 81       	ld	r22, Z
    3a4a:	71 81       	ldd	r23, Z+1	; 0x01
    3a4c:	82 81       	ldd	r24, Z+2	; 0x02
    3a4e:	93 81       	ldd	r25, Z+3	; 0x03
    3a50:	2b ea       	ldi	r18, 0xAB	; 171
    3a52:	3a ea       	ldi	r19, 0xAA	; 170
    3a54:	4a ea       	ldi	r20, 0xAA	; 170
    3a56:	50 e4       	ldi	r21, 0x40	; 64
    3a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	f8 01       	movw	r30, r16
    3a62:	80 83       	st	Z, r24
    3a64:	91 83       	std	Z+1, r25	; 0x01
    3a66:	a2 83       	std	Z+2, r26	; 0x02
    3a68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	ef 5b       	subi	r30, 0xBF	; 191
    3a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a70:	60 81       	ld	r22, Z
    3a72:	71 81       	ldd	r23, Z+1	; 0x01
    3a74:	82 81       	ldd	r24, Z+2	; 0x02
    3a76:	93 81       	ldd	r25, Z+3	; 0x03
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e8       	ldi	r20, 0x80	; 128
    3a7e:	5f e3       	ldi	r21, 0x3F	; 63
    3a80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a84:	88 23       	and	r24, r24
    3a86:	34 f4       	brge	.+12     	; 0x3a94 <lcd_proteus_cmd+0x3da>
		__ticks = 1;
    3a88:	81 e0       	ldi	r24, 0x01	; 1
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	e0 5c       	subi	r30, 0xC0	; 192
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	80 83       	st	Z, r24
    3a92:	9d c0       	rjmp	.+314    	; 0x3bce <lcd_proteus_cmd+0x514>
	else if (__tmp > 255)
    3a94:	fe 01       	movw	r30, r28
    3a96:	ef 5b       	subi	r30, 0xBF	; 191
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	60 81       	ld	r22, Z
    3a9c:	71 81       	ldd	r23, Z+1	; 0x01
    3a9e:	82 81       	ldd	r24, Z+2	; 0x02
    3aa0:	93 81       	ldd	r25, Z+3	; 0x03
    3aa2:	20 e0       	ldi	r18, 0x00	; 0
    3aa4:	30 e0       	ldi	r19, 0x00	; 0
    3aa6:	4f e7       	ldi	r20, 0x7F	; 127
    3aa8:	53 e4       	ldi	r21, 0x43	; 67
    3aaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aae:	18 16       	cp	r1, r24
    3ab0:	0c f0       	brlt	.+2      	; 0x3ab4 <lcd_proteus_cmd+0x3fa>
    3ab2:	7e c0       	rjmp	.+252    	; 0x3bb0 <lcd_proteus_cmd+0x4f6>
	{
		_delay_ms(__us / 1000.0);
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	eb 5b       	subi	r30, 0xBB	; 187
    3ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aba:	60 81       	ld	r22, Z
    3abc:	71 81       	ldd	r23, Z+1	; 0x01
    3abe:	82 81       	ldd	r24, Z+2	; 0x02
    3ac0:	93 81       	ldd	r25, Z+3	; 0x03
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	4a e7       	ldi	r20, 0x7A	; 122
    3ac8:	54 e4       	ldi	r21, 0x44	; 68
    3aca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	8c af       	std	Y+60, r24	; 0x3c
    3ad4:	9d af       	std	Y+61, r25	; 0x3d
    3ad6:	ae af       	std	Y+62, r26	; 0x3e
    3ad8:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ada:	6c ad       	ldd	r22, Y+60	; 0x3c
    3adc:	7d ad       	ldd	r23, Y+61	; 0x3d
    3ade:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ae0:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	4a e7       	ldi	r20, 0x7A	; 122
    3ae8:	55 e4       	ldi	r21, 0x45	; 69
    3aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	88 af       	std	Y+56, r24	; 0x38
    3af4:	99 af       	std	Y+57, r25	; 0x39
    3af6:	aa af       	std	Y+58, r26	; 0x3a
    3af8:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3afa:	68 ad       	ldd	r22, Y+56	; 0x38
    3afc:	79 ad       	ldd	r23, Y+57	; 0x39
    3afe:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b00:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	40 e8       	ldi	r20, 0x80	; 128
    3b08:	5f e3       	ldi	r21, 0x3F	; 63
    3b0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b0e:	88 23       	and	r24, r24
    3b10:	2c f4       	brge	.+10     	; 0x3b1c <lcd_proteus_cmd+0x462>
		__ticks = 1;
    3b12:	81 e0       	ldi	r24, 0x01	; 1
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	9f ab       	std	Y+55, r25	; 0x37
    3b18:	8e ab       	std	Y+54, r24	; 0x36
    3b1a:	3f c0       	rjmp	.+126    	; 0x3b9a <lcd_proteus_cmd+0x4e0>
	else if (__tmp > 65535)
    3b1c:	68 ad       	ldd	r22, Y+56	; 0x38
    3b1e:	79 ad       	ldd	r23, Y+57	; 0x39
    3b20:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b22:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	3f ef       	ldi	r19, 0xFF	; 255
    3b28:	4f e7       	ldi	r20, 0x7F	; 127
    3b2a:	57 e4       	ldi	r21, 0x47	; 71
    3b2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b30:	18 16       	cp	r1, r24
    3b32:	4c f5       	brge	.+82     	; 0x3b86 <lcd_proteus_cmd+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b34:	6c ad       	ldd	r22, Y+60	; 0x3c
    3b36:	7d ad       	ldd	r23, Y+61	; 0x3d
    3b38:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	40 e2       	ldi	r20, 0x20	; 32
    3b42:	51 e4       	ldi	r21, 0x41	; 65
    3b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	bc 01       	movw	r22, r24
    3b4e:	cd 01       	movw	r24, r26
    3b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	9f ab       	std	Y+55, r25	; 0x37
    3b5a:	8e ab       	std	Y+54, r24	; 0x36
    3b5c:	0f c0       	rjmp	.+30     	; 0x3b7c <lcd_proteus_cmd+0x4c2>
    3b5e:	80 e9       	ldi	r24, 0x90	; 144
    3b60:	91 e0       	ldi	r25, 0x01	; 1
    3b62:	9d ab       	std	Y+53, r25	; 0x35
    3b64:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b66:	8c a9       	ldd	r24, Y+52	; 0x34
    3b68:	9d a9       	ldd	r25, Y+53	; 0x35
    3b6a:	01 97       	sbiw	r24, 0x01	; 1
    3b6c:	f1 f7       	brne	.-4      	; 0x3b6a <lcd_proteus_cmd+0x4b0>
    3b6e:	9d ab       	std	Y+53, r25	; 0x35
    3b70:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b72:	8e a9       	ldd	r24, Y+54	; 0x36
    3b74:	9f a9       	ldd	r25, Y+55	; 0x37
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	9f ab       	std	Y+55, r25	; 0x37
    3b7a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b7c:	8e a9       	ldd	r24, Y+54	; 0x36
    3b7e:	9f a9       	ldd	r25, Y+55	; 0x37
    3b80:	00 97       	sbiw	r24, 0x00	; 0
    3b82:	69 f7       	brne	.-38     	; 0x3b5e <lcd_proteus_cmd+0x4a4>
    3b84:	2d c0       	rjmp	.+90     	; 0x3be0 <lcd_proteus_cmd+0x526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b86:	68 ad       	ldd	r22, Y+56	; 0x38
    3b88:	79 ad       	ldd	r23, Y+57	; 0x39
    3b8a:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b8c:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	9f ab       	std	Y+55, r25	; 0x37
    3b98:	8e ab       	std	Y+54, r24	; 0x36
    3b9a:	8e a9       	ldd	r24, Y+54	; 0x36
    3b9c:	9f a9       	ldd	r25, Y+55	; 0x37
    3b9e:	9b ab       	std	Y+51, r25	; 0x33
    3ba0:	8a ab       	std	Y+50, r24	; 0x32
    3ba2:	8a a9       	ldd	r24, Y+50	; 0x32
    3ba4:	9b a9       	ldd	r25, Y+51	; 0x33
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	f1 f7       	brne	.-4      	; 0x3ba6 <lcd_proteus_cmd+0x4ec>
    3baa:	9b ab       	std	Y+51, r25	; 0x33
    3bac:	8a ab       	std	Y+50, r24	; 0x32
    3bae:	18 c0       	rjmp	.+48     	; 0x3be0 <lcd_proteus_cmd+0x526>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	ef 5b       	subi	r30, 0xBF	; 191
    3bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb6:	60 81       	ld	r22, Z
    3bb8:	71 81       	ldd	r23, Z+1	; 0x01
    3bba:	82 81       	ldd	r24, Z+2	; 0x02
    3bbc:	93 81       	ldd	r25, Z+3	; 0x03
    3bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	e0 5c       	subi	r30, 0xC0	; 192
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	80 83       	st	Z, r24
    3bce:	fe 01       	movw	r30, r28
    3bd0:	e0 5c       	subi	r30, 0xC0	; 192
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	80 81       	ld	r24, Z
    3bd6:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3bd8:	89 a9       	ldd	r24, Y+49	; 0x31
    3bda:	8a 95       	dec	r24
    3bdc:	f1 f7       	brne	.-4      	; 0x3bda <lcd_proteus_cmd+0x520>
    3bde:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);
	if(GET_BIT(cmd, 0)) { SET_BIT(PORTD,4); }else{ CLEAR_BIT(PORTD,4);}
    3be0:	fe 01       	movw	r30, r28
    3be2:	ef 59       	subi	r30, 0x9F	; 159
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	80 81       	ld	r24, Z
    3be8:	88 2f       	mov	r24, r24
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	81 70       	andi	r24, 0x01	; 1
    3bee:	90 70       	andi	r25, 0x00	; 0
    3bf0:	88 23       	and	r24, r24
    3bf2:	41 f0       	breq	.+16     	; 0x3c04 <lcd_proteus_cmd+0x54a>
    3bf4:	a2 e3       	ldi	r26, 0x32	; 50
    3bf6:	b0 e0       	ldi	r27, 0x00	; 0
    3bf8:	e2 e3       	ldi	r30, 0x32	; 50
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	80 81       	ld	r24, Z
    3bfe:	80 61       	ori	r24, 0x10	; 16
    3c00:	8c 93       	st	X, r24
    3c02:	07 c0       	rjmp	.+14     	; 0x3c12 <lcd_proteus_cmd+0x558>
    3c04:	a2 e3       	ldi	r26, 0x32	; 50
    3c06:	b0 e0       	ldi	r27, 0x00	; 0
    3c08:	e2 e3       	ldi	r30, 0x32	; 50
    3c0a:	f0 e0       	ldi	r31, 0x00	; 0
    3c0c:	80 81       	ld	r24, Z
    3c0e:	8f 7e       	andi	r24, 0xEF	; 239
    3c10:	8c 93       	st	X, r24
	if(GET_BIT(cmd, 1)) { SET_BIT(PORTD,5) ;}else{ CLEAR_BIT(PORTD,5);}
    3c12:	fe 01       	movw	r30, r28
    3c14:	ef 59       	subi	r30, 0x9F	; 159
    3c16:	ff 4f       	sbci	r31, 0xFF	; 255
    3c18:	80 81       	ld	r24, Z
    3c1a:	88 2f       	mov	r24, r24
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	82 70       	andi	r24, 0x02	; 2
    3c20:	90 70       	andi	r25, 0x00	; 0
    3c22:	00 97       	sbiw	r24, 0x00	; 0
    3c24:	41 f0       	breq	.+16     	; 0x3c36 <lcd_proteus_cmd+0x57c>
    3c26:	a2 e3       	ldi	r26, 0x32	; 50
    3c28:	b0 e0       	ldi	r27, 0x00	; 0
    3c2a:	e2 e3       	ldi	r30, 0x32	; 50
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	80 81       	ld	r24, Z
    3c30:	80 62       	ori	r24, 0x20	; 32
    3c32:	8c 93       	st	X, r24
    3c34:	07 c0       	rjmp	.+14     	; 0x3c44 <lcd_proteus_cmd+0x58a>
    3c36:	a2 e3       	ldi	r26, 0x32	; 50
    3c38:	b0 e0       	ldi	r27, 0x00	; 0
    3c3a:	e2 e3       	ldi	r30, 0x32	; 50
    3c3c:	f0 e0       	ldi	r31, 0x00	; 0
    3c3e:	80 81       	ld	r24, Z
    3c40:	8f 7d       	andi	r24, 0xDF	; 223
    3c42:	8c 93       	st	X, r24
	if(GET_BIT(cmd, 2)) { SET_BIT(PORTD,6) ;}else{ CLEAR_BIT(PORTD,6);}
    3c44:	fe 01       	movw	r30, r28
    3c46:	ef 59       	subi	r30, 0x9F	; 159
    3c48:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4a:	80 81       	ld	r24, Z
    3c4c:	88 2f       	mov	r24, r24
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	84 70       	andi	r24, 0x04	; 4
    3c52:	90 70       	andi	r25, 0x00	; 0
    3c54:	00 97       	sbiw	r24, 0x00	; 0
    3c56:	41 f0       	breq	.+16     	; 0x3c68 <lcd_proteus_cmd+0x5ae>
    3c58:	a2 e3       	ldi	r26, 0x32	; 50
    3c5a:	b0 e0       	ldi	r27, 0x00	; 0
    3c5c:	e2 e3       	ldi	r30, 0x32	; 50
    3c5e:	f0 e0       	ldi	r31, 0x00	; 0
    3c60:	80 81       	ld	r24, Z
    3c62:	80 64       	ori	r24, 0x40	; 64
    3c64:	8c 93       	st	X, r24
    3c66:	07 c0       	rjmp	.+14     	; 0x3c76 <lcd_proteus_cmd+0x5bc>
    3c68:	a2 e3       	ldi	r26, 0x32	; 50
    3c6a:	b0 e0       	ldi	r27, 0x00	; 0
    3c6c:	e2 e3       	ldi	r30, 0x32	; 50
    3c6e:	f0 e0       	ldi	r31, 0x00	; 0
    3c70:	80 81       	ld	r24, Z
    3c72:	8f 7b       	andi	r24, 0xBF	; 191
    3c74:	8c 93       	st	X, r24
	if(GET_BIT(cmd, 3)) { SET_BIT(PORTD,7) ;}else{ CLEAR_BIT(PORTD,7);}
    3c76:	fe 01       	movw	r30, r28
    3c78:	ef 59       	subi	r30, 0x9F	; 159
    3c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7c:	80 81       	ld	r24, Z
    3c7e:	88 2f       	mov	r24, r24
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	88 70       	andi	r24, 0x08	; 8
    3c84:	90 70       	andi	r25, 0x00	; 0
    3c86:	00 97       	sbiw	r24, 0x00	; 0
    3c88:	41 f0       	breq	.+16     	; 0x3c9a <lcd_proteus_cmd+0x5e0>
    3c8a:	a2 e3       	ldi	r26, 0x32	; 50
    3c8c:	b0 e0       	ldi	r27, 0x00	; 0
    3c8e:	e2 e3       	ldi	r30, 0x32	; 50
    3c90:	f0 e0       	ldi	r31, 0x00	; 0
    3c92:	80 81       	ld	r24, Z
    3c94:	80 68       	ori	r24, 0x80	; 128
    3c96:	8c 93       	st	X, r24
    3c98:	07 c0       	rjmp	.+14     	; 0x3ca8 <lcd_proteus_cmd+0x5ee>
    3c9a:	a2 e3       	ldi	r26, 0x32	; 50
    3c9c:	b0 e0       	ldi	r27, 0x00	; 0
    3c9e:	e2 e3       	ldi	r30, 0x32	; 50
    3ca0:	f0 e0       	ldi	r31, 0x00	; 0
    3ca2:	80 81       	ld	r24, Z
    3ca4:	8f 77       	andi	r24, 0x7F	; 127
    3ca6:	8c 93       	st	X, r24
	SET_BIT(PORTD,3);
    3ca8:	a2 e3       	ldi	r26, 0x32	; 50
    3caa:	b0 e0       	ldi	r27, 0x00	; 0
    3cac:	e2 e3       	ldi	r30, 0x32	; 50
    3cae:	f0 e0       	ldi	r31, 0x00	; 0
    3cb0:	80 81       	ld	r24, Z
    3cb2:	88 60       	ori	r24, 0x08	; 8
    3cb4:	8c 93       	st	X, r24
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	a0 e2       	ldi	r26, 0x20	; 32
    3cbc:	b1 e4       	ldi	r27, 0x41	; 65
    3cbe:	8d a7       	std	Y+45, r24	; 0x2d
    3cc0:	9e a7       	std	Y+46, r25	; 0x2e
    3cc2:	af a7       	std	Y+47, r26	; 0x2f
    3cc4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3cc6:	6d a5       	ldd	r22, Y+45	; 0x2d
    3cc8:	7e a5       	ldd	r23, Y+46	; 0x2e
    3cca:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ccc:	98 a9       	ldd	r25, Y+48	; 0x30
    3cce:	2b ea       	ldi	r18, 0xAB	; 171
    3cd0:	3a ea       	ldi	r19, 0xAA	; 170
    3cd2:	4a ea       	ldi	r20, 0xAA	; 170
    3cd4:	50 e4       	ldi	r21, 0x40	; 64
    3cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cda:	dc 01       	movw	r26, r24
    3cdc:	cb 01       	movw	r24, r22
    3cde:	89 a7       	std	Y+41, r24	; 0x29
    3ce0:	9a a7       	std	Y+42, r25	; 0x2a
    3ce2:	ab a7       	std	Y+43, r26	; 0x2b
    3ce4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3ce6:	69 a5       	ldd	r22, Y+41	; 0x29
    3ce8:	7a a5       	ldd	r23, Y+42	; 0x2a
    3cea:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cec:	9c a5       	ldd	r25, Y+44	; 0x2c
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	40 e8       	ldi	r20, 0x80	; 128
    3cf4:	5f e3       	ldi	r21, 0x3F	; 63
    3cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cfa:	88 23       	and	r24, r24
    3cfc:	1c f4       	brge	.+6      	; 0x3d04 <lcd_proteus_cmd+0x64a>
		__ticks = 1;
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	88 a7       	std	Y+40, r24	; 0x28
    3d02:	91 c0       	rjmp	.+290    	; 0x3e26 <lcd_proteus_cmd+0x76c>
	else if (__tmp > 255)
    3d04:	69 a5       	ldd	r22, Y+41	; 0x29
    3d06:	7a a5       	ldd	r23, Y+42	; 0x2a
    3d08:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d0a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	4f e7       	ldi	r20, 0x7F	; 127
    3d12:	53 e4       	ldi	r21, 0x43	; 67
    3d14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d18:	18 16       	cp	r1, r24
    3d1a:	0c f0       	brlt	.+2      	; 0x3d1e <lcd_proteus_cmd+0x664>
    3d1c:	7b c0       	rjmp	.+246    	; 0x3e14 <lcd_proteus_cmd+0x75a>
	{
		_delay_ms(__us / 1000.0);
    3d1e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3d20:	7e a5       	ldd	r23, Y+46	; 0x2e
    3d22:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d24:	98 a9       	ldd	r25, Y+48	; 0x30
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	4a e7       	ldi	r20, 0x7A	; 122
    3d2c:	54 e4       	ldi	r21, 0x44	; 68
    3d2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d32:	dc 01       	movw	r26, r24
    3d34:	cb 01       	movw	r24, r22
    3d36:	8c a3       	std	Y+36, r24	; 0x24
    3d38:	9d a3       	std	Y+37, r25	; 0x25
    3d3a:	ae a3       	std	Y+38, r26	; 0x26
    3d3c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d3e:	6c a1       	ldd	r22, Y+36	; 0x24
    3d40:	7d a1       	ldd	r23, Y+37	; 0x25
    3d42:	8e a1       	ldd	r24, Y+38	; 0x26
    3d44:	9f a1       	ldd	r25, Y+39	; 0x27
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	4a e7       	ldi	r20, 0x7A	; 122
    3d4c:	55 e4       	ldi	r21, 0x45	; 69
    3d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d52:	dc 01       	movw	r26, r24
    3d54:	cb 01       	movw	r24, r22
    3d56:	88 a3       	std	Y+32, r24	; 0x20
    3d58:	99 a3       	std	Y+33, r25	; 0x21
    3d5a:	aa a3       	std	Y+34, r26	; 0x22
    3d5c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3d5e:	68 a1       	ldd	r22, Y+32	; 0x20
    3d60:	79 a1       	ldd	r23, Y+33	; 0x21
    3d62:	8a a1       	ldd	r24, Y+34	; 0x22
    3d64:	9b a1       	ldd	r25, Y+35	; 0x23
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	40 e8       	ldi	r20, 0x80	; 128
    3d6c:	5f e3       	ldi	r21, 0x3F	; 63
    3d6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d72:	88 23       	and	r24, r24
    3d74:	2c f4       	brge	.+10     	; 0x3d80 <lcd_proteus_cmd+0x6c6>
		__ticks = 1;
    3d76:	81 e0       	ldi	r24, 0x01	; 1
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	9f 8f       	std	Y+31, r25	; 0x1f
    3d7c:	8e 8f       	std	Y+30, r24	; 0x1e
    3d7e:	3f c0       	rjmp	.+126    	; 0x3dfe <lcd_proteus_cmd+0x744>
	else if (__tmp > 65535)
    3d80:	68 a1       	ldd	r22, Y+32	; 0x20
    3d82:	79 a1       	ldd	r23, Y+33	; 0x21
    3d84:	8a a1       	ldd	r24, Y+34	; 0x22
    3d86:	9b a1       	ldd	r25, Y+35	; 0x23
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	3f ef       	ldi	r19, 0xFF	; 255
    3d8c:	4f e7       	ldi	r20, 0x7F	; 127
    3d8e:	57 e4       	ldi	r21, 0x47	; 71
    3d90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d94:	18 16       	cp	r1, r24
    3d96:	4c f5       	brge	.+82     	; 0x3dea <lcd_proteus_cmd+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d98:	6c a1       	ldd	r22, Y+36	; 0x24
    3d9a:	7d a1       	ldd	r23, Y+37	; 0x25
    3d9c:	8e a1       	ldd	r24, Y+38	; 0x26
    3d9e:	9f a1       	ldd	r25, Y+39	; 0x27
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	40 e2       	ldi	r20, 0x20	; 32
    3da6:	51 e4       	ldi	r21, 0x41	; 65
    3da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dac:	dc 01       	movw	r26, r24
    3dae:	cb 01       	movw	r24, r22
    3db0:	bc 01       	movw	r22, r24
    3db2:	cd 01       	movw	r24, r26
    3db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22
    3dbc:	9f 8f       	std	Y+31, r25	; 0x1f
    3dbe:	8e 8f       	std	Y+30, r24	; 0x1e
    3dc0:	0f c0       	rjmp	.+30     	; 0x3de0 <lcd_proteus_cmd+0x726>
    3dc2:	80 e9       	ldi	r24, 0x90	; 144
    3dc4:	91 e0       	ldi	r25, 0x01	; 1
    3dc6:	9d 8f       	std	Y+29, r25	; 0x1d
    3dc8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3dca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3dcc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3dce:	01 97       	sbiw	r24, 0x01	; 1
    3dd0:	f1 f7       	brne	.-4      	; 0x3dce <lcd_proteus_cmd+0x714>
    3dd2:	9d 8f       	std	Y+29, r25	; 0x1d
    3dd4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3dd8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3dda:	01 97       	sbiw	r24, 0x01	; 1
    3ddc:	9f 8f       	std	Y+31, r25	; 0x1f
    3dde:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3de2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3de4:	00 97       	sbiw	r24, 0x00	; 0
    3de6:	69 f7       	brne	.-38     	; 0x3dc2 <lcd_proteus_cmd+0x708>
    3de8:	24 c0       	rjmp	.+72     	; 0x3e32 <lcd_proteus_cmd+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dea:	68 a1       	ldd	r22, Y+32	; 0x20
    3dec:	79 a1       	ldd	r23, Y+33	; 0x21
    3dee:	8a a1       	ldd	r24, Y+34	; 0x22
    3df0:	9b a1       	ldd	r25, Y+35	; 0x23
    3df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3df6:	dc 01       	movw	r26, r24
    3df8:	cb 01       	movw	r24, r22
    3dfa:	9f 8f       	std	Y+31, r25	; 0x1f
    3dfc:	8e 8f       	std	Y+30, r24	; 0x1e
    3dfe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e00:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3e02:	9b 8f       	std	Y+27, r25	; 0x1b
    3e04:	8a 8f       	std	Y+26, r24	; 0x1a
    3e06:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3e08:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3e0a:	01 97       	sbiw	r24, 0x01	; 1
    3e0c:	f1 f7       	brne	.-4      	; 0x3e0a <lcd_proteus_cmd+0x750>
    3e0e:	9b 8f       	std	Y+27, r25	; 0x1b
    3e10:	8a 8f       	std	Y+26, r24	; 0x1a
    3e12:	0f c0       	rjmp	.+30     	; 0x3e32 <lcd_proteus_cmd+0x778>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e14:	69 a5       	ldd	r22, Y+41	; 0x29
    3e16:	7a a5       	ldd	r23, Y+42	; 0x2a
    3e18:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e20:	dc 01       	movw	r26, r24
    3e22:	cb 01       	movw	r24, r22
    3e24:	88 a7       	std	Y+40, r24	; 0x28
    3e26:	88 a5       	ldd	r24, Y+40	; 0x28
    3e28:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e2a:	89 8d       	ldd	r24, Y+25	; 0x19
    3e2c:	8a 95       	dec	r24
    3e2e:	f1 f7       	brne	.-4      	; 0x3e2c <lcd_proteus_cmd+0x772>
    3e30:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	CLEAR_BIT(PORTD,3);
    3e32:	a2 e3       	ldi	r26, 0x32	; 50
    3e34:	b0 e0       	ldi	r27, 0x00	; 0
    3e36:	e2 e3       	ldi	r30, 0x32	; 50
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	80 81       	ld	r24, Z
    3e3c:	87 7f       	andi	r24, 0xF7	; 247
    3e3e:	8c 93       	st	X, r24
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	a8 e4       	ldi	r26, 0x48	; 72
    3e46:	b3 e4       	ldi	r27, 0x43	; 67
    3e48:	8d 8b       	std	Y+21, r24	; 0x15
    3e4a:	9e 8b       	std	Y+22, r25	; 0x16
    3e4c:	af 8b       	std	Y+23, r26	; 0x17
    3e4e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3e50:	6d 89       	ldd	r22, Y+21	; 0x15
    3e52:	7e 89       	ldd	r23, Y+22	; 0x16
    3e54:	8f 89       	ldd	r24, Y+23	; 0x17
    3e56:	98 8d       	ldd	r25, Y+24	; 0x18
    3e58:	2b ea       	ldi	r18, 0xAB	; 171
    3e5a:	3a ea       	ldi	r19, 0xAA	; 170
    3e5c:	4a ea       	ldi	r20, 0xAA	; 170
    3e5e:	50 e4       	ldi	r21, 0x40	; 64
    3e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	89 8b       	std	Y+17, r24	; 0x11
    3e6a:	9a 8b       	std	Y+18, r25	; 0x12
    3e6c:	ab 8b       	std	Y+19, r26	; 0x13
    3e6e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3e70:	69 89       	ldd	r22, Y+17	; 0x11
    3e72:	7a 89       	ldd	r23, Y+18	; 0x12
    3e74:	8b 89       	ldd	r24, Y+19	; 0x13
    3e76:	9c 89       	ldd	r25, Y+20	; 0x14
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	40 e8       	ldi	r20, 0x80	; 128
    3e7e:	5f e3       	ldi	r21, 0x3F	; 63
    3e80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e84:	88 23       	and	r24, r24
    3e86:	1c f4       	brge	.+6      	; 0x3e8e <lcd_proteus_cmd+0x7d4>
		__ticks = 1;
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	88 8b       	std	Y+16, r24	; 0x10
    3e8c:	91 c0       	rjmp	.+290    	; 0x3fb0 <lcd_proteus_cmd+0x8f6>
	else if (__tmp > 255)
    3e8e:	69 89       	ldd	r22, Y+17	; 0x11
    3e90:	7a 89       	ldd	r23, Y+18	; 0x12
    3e92:	8b 89       	ldd	r24, Y+19	; 0x13
    3e94:	9c 89       	ldd	r25, Y+20	; 0x14
    3e96:	20 e0       	ldi	r18, 0x00	; 0
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	4f e7       	ldi	r20, 0x7F	; 127
    3e9c:	53 e4       	ldi	r21, 0x43	; 67
    3e9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ea2:	18 16       	cp	r1, r24
    3ea4:	0c f0       	brlt	.+2      	; 0x3ea8 <lcd_proteus_cmd+0x7ee>
    3ea6:	7b c0       	rjmp	.+246    	; 0x3f9e <lcd_proteus_cmd+0x8e4>
	{
		_delay_ms(__us / 1000.0);
    3ea8:	6d 89       	ldd	r22, Y+21	; 0x15
    3eaa:	7e 89       	ldd	r23, Y+22	; 0x16
    3eac:	8f 89       	ldd	r24, Y+23	; 0x17
    3eae:	98 8d       	ldd	r25, Y+24	; 0x18
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	4a e7       	ldi	r20, 0x7A	; 122
    3eb6:	54 e4       	ldi	r21, 0x44	; 68
    3eb8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ebc:	dc 01       	movw	r26, r24
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	8c 87       	std	Y+12, r24	; 0x0c
    3ec2:	9d 87       	std	Y+13, r25	; 0x0d
    3ec4:	ae 87       	std	Y+14, r26	; 0x0e
    3ec6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec8:	6c 85       	ldd	r22, Y+12	; 0x0c
    3eca:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ecc:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ece:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	4a e7       	ldi	r20, 0x7A	; 122
    3ed6:	55 e4       	ldi	r21, 0x45	; 69
    3ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	88 87       	std	Y+8, r24	; 0x08
    3ee2:	99 87       	std	Y+9, r25	; 0x09
    3ee4:	aa 87       	std	Y+10, r26	; 0x0a
    3ee6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3ee8:	68 85       	ldd	r22, Y+8	; 0x08
    3eea:	79 85       	ldd	r23, Y+9	; 0x09
    3eec:	8a 85       	ldd	r24, Y+10	; 0x0a
    3eee:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	40 e8       	ldi	r20, 0x80	; 128
    3ef6:	5f e3       	ldi	r21, 0x3F	; 63
    3ef8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3efc:	88 23       	and	r24, r24
    3efe:	2c f4       	brge	.+10     	; 0x3f0a <lcd_proteus_cmd+0x850>
		__ticks = 1;
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	9f 83       	std	Y+7, r25	; 0x07
    3f06:	8e 83       	std	Y+6, r24	; 0x06
    3f08:	3f c0       	rjmp	.+126    	; 0x3f88 <lcd_proteus_cmd+0x8ce>
	else if (__tmp > 65535)
    3f0a:	68 85       	ldd	r22, Y+8	; 0x08
    3f0c:	79 85       	ldd	r23, Y+9	; 0x09
    3f0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f10:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	3f ef       	ldi	r19, 0xFF	; 255
    3f16:	4f e7       	ldi	r20, 0x7F	; 127
    3f18:	57 e4       	ldi	r21, 0x47	; 71
    3f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f1e:	18 16       	cp	r1, r24
    3f20:	4c f5       	brge	.+82     	; 0x3f74 <lcd_proteus_cmd+0x8ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f22:	6c 85       	ldd	r22, Y+12	; 0x0c
    3f24:	7d 85       	ldd	r23, Y+13	; 0x0d
    3f26:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f28:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	40 e2       	ldi	r20, 0x20	; 32
    3f30:	51 e4       	ldi	r21, 0x41	; 65
    3f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	bc 01       	movw	r22, r24
    3f3c:	cd 01       	movw	r24, r26
    3f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	9f 83       	std	Y+7, r25	; 0x07
    3f48:	8e 83       	std	Y+6, r24	; 0x06
    3f4a:	0f c0       	rjmp	.+30     	; 0x3f6a <lcd_proteus_cmd+0x8b0>
    3f4c:	80 e9       	ldi	r24, 0x90	; 144
    3f4e:	91 e0       	ldi	r25, 0x01	; 1
    3f50:	9d 83       	std	Y+5, r25	; 0x05
    3f52:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f54:	8c 81       	ldd	r24, Y+4	; 0x04
    3f56:	9d 81       	ldd	r25, Y+5	; 0x05
    3f58:	01 97       	sbiw	r24, 0x01	; 1
    3f5a:	f1 f7       	brne	.-4      	; 0x3f58 <lcd_proteus_cmd+0x89e>
    3f5c:	9d 83       	std	Y+5, r25	; 0x05
    3f5e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f60:	8e 81       	ldd	r24, Y+6	; 0x06
    3f62:	9f 81       	ldd	r25, Y+7	; 0x07
    3f64:	01 97       	sbiw	r24, 0x01	; 1
    3f66:	9f 83       	std	Y+7, r25	; 0x07
    3f68:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f6a:	8e 81       	ldd	r24, Y+6	; 0x06
    3f6c:	9f 81       	ldd	r25, Y+7	; 0x07
    3f6e:	00 97       	sbiw	r24, 0x00	; 0
    3f70:	69 f7       	brne	.-38     	; 0x3f4c <lcd_proteus_cmd+0x892>
    3f72:	24 c0       	rjmp	.+72     	; 0x3fbc <lcd_proteus_cmd+0x902>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f74:	68 85       	ldd	r22, Y+8	; 0x08
    3f76:	79 85       	ldd	r23, Y+9	; 0x09
    3f78:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	9f 83       	std	Y+7, r25	; 0x07
    3f86:	8e 83       	std	Y+6, r24	; 0x06
    3f88:	8e 81       	ldd	r24, Y+6	; 0x06
    3f8a:	9f 81       	ldd	r25, Y+7	; 0x07
    3f8c:	9b 83       	std	Y+3, r25	; 0x03
    3f8e:	8a 83       	std	Y+2, r24	; 0x02
    3f90:	8a 81       	ldd	r24, Y+2	; 0x02
    3f92:	9b 81       	ldd	r25, Y+3	; 0x03
    3f94:	01 97       	sbiw	r24, 0x01	; 1
    3f96:	f1 f7       	brne	.-4      	; 0x3f94 <lcd_proteus_cmd+0x8da>
    3f98:	9b 83       	std	Y+3, r25	; 0x03
    3f9a:	8a 83       	std	Y+2, r24	; 0x02
    3f9c:	0f c0       	rjmp	.+30     	; 0x3fbc <lcd_proteus_cmd+0x902>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3f9e:	69 89       	ldd	r22, Y+17	; 0x11
    3fa0:	7a 89       	ldd	r23, Y+18	; 0x12
    3fa2:	8b 89       	ldd	r24, Y+19	; 0x13
    3fa4:	9c 89       	ldd	r25, Y+20	; 0x14
    3fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	88 8b       	std	Y+16, r24	; 0x10
    3fb0:	88 89       	ldd	r24, Y+16	; 0x10
    3fb2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3fb4:	89 81       	ldd	r24, Y+1	; 0x01
    3fb6:	8a 95       	dec	r24
    3fb8:	f1 f7       	brne	.-4      	; 0x3fb6 <lcd_proteus_cmd+0x8fc>
    3fba:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    3fbc:	cf 59       	subi	r28, 0x9F	; 159
    3fbe:	df 4f       	sbci	r29, 0xFF	; 255
    3fc0:	0f b6       	in	r0, 0x3f	; 63
    3fc2:	f8 94       	cli
    3fc4:	de bf       	out	0x3e, r29	; 62
    3fc6:	0f be       	out	0x3f, r0	; 63
    3fc8:	cd bf       	out	0x3d, r28	; 61
    3fca:	cf 91       	pop	r28
    3fcc:	df 91       	pop	r29
    3fce:	1f 91       	pop	r17
    3fd0:	0f 91       	pop	r16
    3fd2:	08 95       	ret

00003fd4 <lcd_proteus_data>:

void lcd_proteus_data(uint8 data) {
    3fd4:	0f 93       	push	r16
    3fd6:	1f 93       	push	r17
    3fd8:	df 93       	push	r29
    3fda:	cf 93       	push	r28
    3fdc:	cd b7       	in	r28, 0x3d	; 61
    3fde:	de b7       	in	r29, 0x3e	; 62
    3fe0:	c1 56       	subi	r28, 0x61	; 97
    3fe2:	d0 40       	sbci	r29, 0x00	; 0
    3fe4:	0f b6       	in	r0, 0x3f	; 63
    3fe6:	f8 94       	cli
    3fe8:	de bf       	out	0x3e, r29	; 62
    3fea:	0f be       	out	0x3f, r0	; 63
    3fec:	cd bf       	out	0x3d, r28	; 61
    3fee:	fe 01       	movw	r30, r28
    3ff0:	ef 59       	subi	r30, 0x9F	; 159
    3ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff4:	80 83       	st	Z, r24
	CLEAR_BIT(PORTD,2);
    3ff6:	a2 e3       	ldi	r26, 0x32	; 50
    3ff8:	b0 e0       	ldi	r27, 0x00	; 0
    3ffa:	e2 e3       	ldi	r30, 0x32	; 50
    3ffc:	f0 e0       	ldi	r31, 0x00	; 0
    3ffe:	80 81       	ld	r24, Z
    4000:	8b 7f       	andi	r24, 0xFB	; 251
    4002:	8c 93       	st	X, r24
	SET_BIT(PORTD,1);
    4004:	a2 e3       	ldi	r26, 0x32	; 50
    4006:	b0 e0       	ldi	r27, 0x00	; 0
    4008:	e2 e3       	ldi	r30, 0x32	; 50
    400a:	f0 e0       	ldi	r31, 0x00	; 0
    400c:	80 81       	ld	r24, Z
    400e:	82 60       	ori	r24, 0x02	; 2
    4010:	8c 93       	st	X, r24
	if(GET_BIT(data, 4)) { SET_BIT(PORTD,4) ;}else{ CLEAR_BIT(PORTD,4);}
    4012:	fe 01       	movw	r30, r28
    4014:	ef 59       	subi	r30, 0x9F	; 159
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	80 81       	ld	r24, Z
    401a:	88 2f       	mov	r24, r24
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	80 71       	andi	r24, 0x10	; 16
    4020:	90 70       	andi	r25, 0x00	; 0
    4022:	00 97       	sbiw	r24, 0x00	; 0
    4024:	41 f0       	breq	.+16     	; 0x4036 <lcd_proteus_data+0x62>
    4026:	a2 e3       	ldi	r26, 0x32	; 50
    4028:	b0 e0       	ldi	r27, 0x00	; 0
    402a:	e2 e3       	ldi	r30, 0x32	; 50
    402c:	f0 e0       	ldi	r31, 0x00	; 0
    402e:	80 81       	ld	r24, Z
    4030:	80 61       	ori	r24, 0x10	; 16
    4032:	8c 93       	st	X, r24
    4034:	07 c0       	rjmp	.+14     	; 0x4044 <lcd_proteus_data+0x70>
    4036:	a2 e3       	ldi	r26, 0x32	; 50
    4038:	b0 e0       	ldi	r27, 0x00	; 0
    403a:	e2 e3       	ldi	r30, 0x32	; 50
    403c:	f0 e0       	ldi	r31, 0x00	; 0
    403e:	80 81       	ld	r24, Z
    4040:	8f 7e       	andi	r24, 0xEF	; 239
    4042:	8c 93       	st	X, r24
	if(GET_BIT(data, 5)) { SET_BIT(PORTD,5) ;}else{ CLEAR_BIT(PORTD,5);}
    4044:	fe 01       	movw	r30, r28
    4046:	ef 59       	subi	r30, 0x9F	; 159
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	80 81       	ld	r24, Z
    404c:	88 2f       	mov	r24, r24
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	80 72       	andi	r24, 0x20	; 32
    4052:	90 70       	andi	r25, 0x00	; 0
    4054:	00 97       	sbiw	r24, 0x00	; 0
    4056:	41 f0       	breq	.+16     	; 0x4068 <lcd_proteus_data+0x94>
    4058:	a2 e3       	ldi	r26, 0x32	; 50
    405a:	b0 e0       	ldi	r27, 0x00	; 0
    405c:	e2 e3       	ldi	r30, 0x32	; 50
    405e:	f0 e0       	ldi	r31, 0x00	; 0
    4060:	80 81       	ld	r24, Z
    4062:	80 62       	ori	r24, 0x20	; 32
    4064:	8c 93       	st	X, r24
    4066:	07 c0       	rjmp	.+14     	; 0x4076 <lcd_proteus_data+0xa2>
    4068:	a2 e3       	ldi	r26, 0x32	; 50
    406a:	b0 e0       	ldi	r27, 0x00	; 0
    406c:	e2 e3       	ldi	r30, 0x32	; 50
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	80 81       	ld	r24, Z
    4072:	8f 7d       	andi	r24, 0xDF	; 223
    4074:	8c 93       	st	X, r24
	if(GET_BIT(data, 6)) { SET_BIT(PORTD,6) ;}else{ CLEAR_BIT(PORTD,6);}
    4076:	fe 01       	movw	r30, r28
    4078:	ef 59       	subi	r30, 0x9F	; 159
    407a:	ff 4f       	sbci	r31, 0xFF	; 255
    407c:	80 81       	ld	r24, Z
    407e:	88 2f       	mov	r24, r24
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	80 74       	andi	r24, 0x40	; 64
    4084:	90 70       	andi	r25, 0x00	; 0
    4086:	00 97       	sbiw	r24, 0x00	; 0
    4088:	41 f0       	breq	.+16     	; 0x409a <lcd_proteus_data+0xc6>
    408a:	a2 e3       	ldi	r26, 0x32	; 50
    408c:	b0 e0       	ldi	r27, 0x00	; 0
    408e:	e2 e3       	ldi	r30, 0x32	; 50
    4090:	f0 e0       	ldi	r31, 0x00	; 0
    4092:	80 81       	ld	r24, Z
    4094:	80 64       	ori	r24, 0x40	; 64
    4096:	8c 93       	st	X, r24
    4098:	07 c0       	rjmp	.+14     	; 0x40a8 <lcd_proteus_data+0xd4>
    409a:	a2 e3       	ldi	r26, 0x32	; 50
    409c:	b0 e0       	ldi	r27, 0x00	; 0
    409e:	e2 e3       	ldi	r30, 0x32	; 50
    40a0:	f0 e0       	ldi	r31, 0x00	; 0
    40a2:	80 81       	ld	r24, Z
    40a4:	8f 7b       	andi	r24, 0xBF	; 191
    40a6:	8c 93       	st	X, r24
	if(GET_BIT(data, 7)) { SET_BIT(PORTD,7) ;}else{ CLEAR_BIT(PORTD,7);}
    40a8:	fe 01       	movw	r30, r28
    40aa:	ef 59       	subi	r30, 0x9F	; 159
    40ac:	ff 4f       	sbci	r31, 0xFF	; 255
    40ae:	80 81       	ld	r24, Z
    40b0:	88 23       	and	r24, r24
    40b2:	44 f4       	brge	.+16     	; 0x40c4 <lcd_proteus_data+0xf0>
    40b4:	a2 e3       	ldi	r26, 0x32	; 50
    40b6:	b0 e0       	ldi	r27, 0x00	; 0
    40b8:	e2 e3       	ldi	r30, 0x32	; 50
    40ba:	f0 e0       	ldi	r31, 0x00	; 0
    40bc:	80 81       	ld	r24, Z
    40be:	80 68       	ori	r24, 0x80	; 128
    40c0:	8c 93       	st	X, r24
    40c2:	07 c0       	rjmp	.+14     	; 0x40d2 <lcd_proteus_data+0xfe>
    40c4:	a2 e3       	ldi	r26, 0x32	; 50
    40c6:	b0 e0       	ldi	r27, 0x00	; 0
    40c8:	e2 e3       	ldi	r30, 0x32	; 50
    40ca:	f0 e0       	ldi	r31, 0x00	; 0
    40cc:	80 81       	ld	r24, Z
    40ce:	8f 77       	andi	r24, 0x7F	; 127
    40d0:	8c 93       	st	X, r24
	SET_BIT(PORTD,3);
    40d2:	a2 e3       	ldi	r26, 0x32	; 50
    40d4:	b0 e0       	ldi	r27, 0x00	; 0
    40d6:	e2 e3       	ldi	r30, 0x32	; 50
    40d8:	f0 e0       	ldi	r31, 0x00	; 0
    40da:	80 81       	ld	r24, Z
    40dc:	88 60       	ori	r24, 0x08	; 8
    40de:	8c 93       	st	X, r24
    40e0:	fe 01       	movw	r30, r28
    40e2:	e3 5a       	subi	r30, 0xA3	; 163
    40e4:	ff 4f       	sbci	r31, 0xFF	; 255
    40e6:	80 e0       	ldi	r24, 0x00	; 0
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	a0 e2       	ldi	r26, 0x20	; 32
    40ec:	b1 e4       	ldi	r27, 0x41	; 65
    40ee:	80 83       	st	Z, r24
    40f0:	91 83       	std	Z+1, r25	; 0x01
    40f2:	a2 83       	std	Z+2, r26	; 0x02
    40f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    40f6:	8e 01       	movw	r16, r28
    40f8:	07 5a       	subi	r16, 0xA7	; 167
    40fa:	1f 4f       	sbci	r17, 0xFF	; 255
    40fc:	fe 01       	movw	r30, r28
    40fe:	e3 5a       	subi	r30, 0xA3	; 163
    4100:	ff 4f       	sbci	r31, 0xFF	; 255
    4102:	60 81       	ld	r22, Z
    4104:	71 81       	ldd	r23, Z+1	; 0x01
    4106:	82 81       	ldd	r24, Z+2	; 0x02
    4108:	93 81       	ldd	r25, Z+3	; 0x03
    410a:	2b ea       	ldi	r18, 0xAB	; 171
    410c:	3a ea       	ldi	r19, 0xAA	; 170
    410e:	4a ea       	ldi	r20, 0xAA	; 170
    4110:	50 e4       	ldi	r21, 0x40	; 64
    4112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4116:	dc 01       	movw	r26, r24
    4118:	cb 01       	movw	r24, r22
    411a:	f8 01       	movw	r30, r16
    411c:	80 83       	st	Z, r24
    411e:	91 83       	std	Z+1, r25	; 0x01
    4120:	a2 83       	std	Z+2, r26	; 0x02
    4122:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4124:	fe 01       	movw	r30, r28
    4126:	e7 5a       	subi	r30, 0xA7	; 167
    4128:	ff 4f       	sbci	r31, 0xFF	; 255
    412a:	60 81       	ld	r22, Z
    412c:	71 81       	ldd	r23, Z+1	; 0x01
    412e:	82 81       	ldd	r24, Z+2	; 0x02
    4130:	93 81       	ldd	r25, Z+3	; 0x03
    4132:	20 e0       	ldi	r18, 0x00	; 0
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	40 e8       	ldi	r20, 0x80	; 128
    4138:	5f e3       	ldi	r21, 0x3F	; 63
    413a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    413e:	88 23       	and	r24, r24
    4140:	34 f4       	brge	.+12     	; 0x414e <lcd_proteus_data+0x17a>
		__ticks = 1;
    4142:	fe 01       	movw	r30, r28
    4144:	e8 5a       	subi	r30, 0xA8	; 168
    4146:	ff 4f       	sbci	r31, 0xFF	; 255
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	80 83       	st	Z, r24
    414c:	e0 c0       	rjmp	.+448    	; 0x430e <lcd_proteus_data+0x33a>
	else if (__tmp > 255)
    414e:	fe 01       	movw	r30, r28
    4150:	e7 5a       	subi	r30, 0xA7	; 167
    4152:	ff 4f       	sbci	r31, 0xFF	; 255
    4154:	60 81       	ld	r22, Z
    4156:	71 81       	ldd	r23, Z+1	; 0x01
    4158:	82 81       	ldd	r24, Z+2	; 0x02
    415a:	93 81       	ldd	r25, Z+3	; 0x03
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	4f e7       	ldi	r20, 0x7F	; 127
    4162:	53 e4       	ldi	r21, 0x43	; 67
    4164:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4168:	18 16       	cp	r1, r24
    416a:	0c f0       	brlt	.+2      	; 0x416e <lcd_proteus_data+0x19a>
    416c:	c0 c0       	rjmp	.+384    	; 0x42ee <lcd_proteus_data+0x31a>
	{
		_delay_ms(__us / 1000.0);
    416e:	fe 01       	movw	r30, r28
    4170:	e3 5a       	subi	r30, 0xA3	; 163
    4172:	ff 4f       	sbci	r31, 0xFF	; 255
    4174:	60 81       	ld	r22, Z
    4176:	71 81       	ldd	r23, Z+1	; 0x01
    4178:	82 81       	ldd	r24, Z+2	; 0x02
    417a:	93 81       	ldd	r25, Z+3	; 0x03
    417c:	20 e0       	ldi	r18, 0x00	; 0
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	4a e7       	ldi	r20, 0x7A	; 122
    4182:	54 e4       	ldi	r21, 0x44	; 68
    4184:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22
    418c:	fe 01       	movw	r30, r28
    418e:	ec 5a       	subi	r30, 0xAC	; 172
    4190:	ff 4f       	sbci	r31, 0xFF	; 255
    4192:	80 83       	st	Z, r24
    4194:	91 83       	std	Z+1, r25	; 0x01
    4196:	a2 83       	std	Z+2, r26	; 0x02
    4198:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    419a:	8e 01       	movw	r16, r28
    419c:	00 5b       	subi	r16, 0xB0	; 176
    419e:	1f 4f       	sbci	r17, 0xFF	; 255
    41a0:	fe 01       	movw	r30, r28
    41a2:	ec 5a       	subi	r30, 0xAC	; 172
    41a4:	ff 4f       	sbci	r31, 0xFF	; 255
    41a6:	60 81       	ld	r22, Z
    41a8:	71 81       	ldd	r23, Z+1	; 0x01
    41aa:	82 81       	ldd	r24, Z+2	; 0x02
    41ac:	93 81       	ldd	r25, Z+3	; 0x03
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	4a e7       	ldi	r20, 0x7A	; 122
    41b4:	55 e4       	ldi	r21, 0x45	; 69
    41b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	f8 01       	movw	r30, r16
    41c0:	80 83       	st	Z, r24
    41c2:	91 83       	std	Z+1, r25	; 0x01
    41c4:	a2 83       	std	Z+2, r26	; 0x02
    41c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41c8:	fe 01       	movw	r30, r28
    41ca:	e0 5b       	subi	r30, 0xB0	; 176
    41cc:	ff 4f       	sbci	r31, 0xFF	; 255
    41ce:	60 81       	ld	r22, Z
    41d0:	71 81       	ldd	r23, Z+1	; 0x01
    41d2:	82 81       	ldd	r24, Z+2	; 0x02
    41d4:	93 81       	ldd	r25, Z+3	; 0x03
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	40 e8       	ldi	r20, 0x80	; 128
    41dc:	5f e3       	ldi	r21, 0x3F	; 63
    41de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41e2:	88 23       	and	r24, r24
    41e4:	44 f4       	brge	.+16     	; 0x41f6 <lcd_proteus_data+0x222>
		__ticks = 1;
    41e6:	fe 01       	movw	r30, r28
    41e8:	e2 5b       	subi	r30, 0xB2	; 178
    41ea:	ff 4f       	sbci	r31, 0xFF	; 255
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	91 83       	std	Z+1, r25	; 0x01
    41f2:	80 83       	st	Z, r24
    41f4:	64 c0       	rjmp	.+200    	; 0x42be <lcd_proteus_data+0x2ea>
	else if (__tmp > 65535)
    41f6:	fe 01       	movw	r30, r28
    41f8:	e0 5b       	subi	r30, 0xB0	; 176
    41fa:	ff 4f       	sbci	r31, 0xFF	; 255
    41fc:	60 81       	ld	r22, Z
    41fe:	71 81       	ldd	r23, Z+1	; 0x01
    4200:	82 81       	ldd	r24, Z+2	; 0x02
    4202:	93 81       	ldd	r25, Z+3	; 0x03
    4204:	20 e0       	ldi	r18, 0x00	; 0
    4206:	3f ef       	ldi	r19, 0xFF	; 255
    4208:	4f e7       	ldi	r20, 0x7F	; 127
    420a:	57 e4       	ldi	r21, 0x47	; 71
    420c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4210:	18 16       	cp	r1, r24
    4212:	0c f0       	brlt	.+2      	; 0x4216 <lcd_proteus_data+0x242>
    4214:	43 c0       	rjmp	.+134    	; 0x429c <lcd_proteus_data+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4216:	fe 01       	movw	r30, r28
    4218:	ec 5a       	subi	r30, 0xAC	; 172
    421a:	ff 4f       	sbci	r31, 0xFF	; 255
    421c:	60 81       	ld	r22, Z
    421e:	71 81       	ldd	r23, Z+1	; 0x01
    4220:	82 81       	ldd	r24, Z+2	; 0x02
    4222:	93 81       	ldd	r25, Z+3	; 0x03
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	40 e2       	ldi	r20, 0x20	; 32
    422a:	51 e4       	ldi	r21, 0x41	; 65
    422c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4230:	dc 01       	movw	r26, r24
    4232:	cb 01       	movw	r24, r22
    4234:	8e 01       	movw	r16, r28
    4236:	02 5b       	subi	r16, 0xB2	; 178
    4238:	1f 4f       	sbci	r17, 0xFF	; 255
    423a:	bc 01       	movw	r22, r24
    423c:	cd 01       	movw	r24, r26
    423e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4242:	dc 01       	movw	r26, r24
    4244:	cb 01       	movw	r24, r22
    4246:	f8 01       	movw	r30, r16
    4248:	91 83       	std	Z+1, r25	; 0x01
    424a:	80 83       	st	Z, r24
    424c:	1f c0       	rjmp	.+62     	; 0x428c <lcd_proteus_data+0x2b8>
    424e:	fe 01       	movw	r30, r28
    4250:	e4 5b       	subi	r30, 0xB4	; 180
    4252:	ff 4f       	sbci	r31, 0xFF	; 255
    4254:	80 e9       	ldi	r24, 0x90	; 144
    4256:	91 e0       	ldi	r25, 0x01	; 1
    4258:	91 83       	std	Z+1, r25	; 0x01
    425a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    425c:	fe 01       	movw	r30, r28
    425e:	e4 5b       	subi	r30, 0xB4	; 180
    4260:	ff 4f       	sbci	r31, 0xFF	; 255
    4262:	80 81       	ld	r24, Z
    4264:	91 81       	ldd	r25, Z+1	; 0x01
    4266:	01 97       	sbiw	r24, 0x01	; 1
    4268:	f1 f7       	brne	.-4      	; 0x4266 <lcd_proteus_data+0x292>
    426a:	fe 01       	movw	r30, r28
    426c:	e4 5b       	subi	r30, 0xB4	; 180
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	91 83       	std	Z+1, r25	; 0x01
    4272:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4274:	de 01       	movw	r26, r28
    4276:	a2 5b       	subi	r26, 0xB2	; 178
    4278:	bf 4f       	sbci	r27, 0xFF	; 255
    427a:	fe 01       	movw	r30, r28
    427c:	e2 5b       	subi	r30, 0xB2	; 178
    427e:	ff 4f       	sbci	r31, 0xFF	; 255
    4280:	80 81       	ld	r24, Z
    4282:	91 81       	ldd	r25, Z+1	; 0x01
    4284:	01 97       	sbiw	r24, 0x01	; 1
    4286:	11 96       	adiw	r26, 0x01	; 1
    4288:	9c 93       	st	X, r25
    428a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    428c:	fe 01       	movw	r30, r28
    428e:	e2 5b       	subi	r30, 0xB2	; 178
    4290:	ff 4f       	sbci	r31, 0xFF	; 255
    4292:	80 81       	ld	r24, Z
    4294:	91 81       	ldd	r25, Z+1	; 0x01
    4296:	00 97       	sbiw	r24, 0x00	; 0
    4298:	d1 f6       	brne	.-76     	; 0x424e <lcd_proteus_data+0x27a>
    429a:	4b c0       	rjmp	.+150    	; 0x4332 <lcd_proteus_data+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    429c:	8e 01       	movw	r16, r28
    429e:	02 5b       	subi	r16, 0xB2	; 178
    42a0:	1f 4f       	sbci	r17, 0xFF	; 255
    42a2:	fe 01       	movw	r30, r28
    42a4:	e0 5b       	subi	r30, 0xB0	; 176
    42a6:	ff 4f       	sbci	r31, 0xFF	; 255
    42a8:	60 81       	ld	r22, Z
    42aa:	71 81       	ldd	r23, Z+1	; 0x01
    42ac:	82 81       	ldd	r24, Z+2	; 0x02
    42ae:	93 81       	ldd	r25, Z+3	; 0x03
    42b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	f8 01       	movw	r30, r16
    42ba:	91 83       	std	Z+1, r25	; 0x01
    42bc:	80 83       	st	Z, r24
    42be:	de 01       	movw	r26, r28
    42c0:	a6 5b       	subi	r26, 0xB6	; 182
    42c2:	bf 4f       	sbci	r27, 0xFF	; 255
    42c4:	fe 01       	movw	r30, r28
    42c6:	e2 5b       	subi	r30, 0xB2	; 178
    42c8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ca:	80 81       	ld	r24, Z
    42cc:	91 81       	ldd	r25, Z+1	; 0x01
    42ce:	11 96       	adiw	r26, 0x01	; 1
    42d0:	9c 93       	st	X, r25
    42d2:	8e 93       	st	-X, r24
    42d4:	fe 01       	movw	r30, r28
    42d6:	e6 5b       	subi	r30, 0xB6	; 182
    42d8:	ff 4f       	sbci	r31, 0xFF	; 255
    42da:	80 81       	ld	r24, Z
    42dc:	91 81       	ldd	r25, Z+1	; 0x01
    42de:	01 97       	sbiw	r24, 0x01	; 1
    42e0:	f1 f7       	brne	.-4      	; 0x42de <lcd_proteus_data+0x30a>
    42e2:	fe 01       	movw	r30, r28
    42e4:	e6 5b       	subi	r30, 0xB6	; 182
    42e6:	ff 4f       	sbci	r31, 0xFF	; 255
    42e8:	91 83       	std	Z+1, r25	; 0x01
    42ea:	80 83       	st	Z, r24
    42ec:	22 c0       	rjmp	.+68     	; 0x4332 <lcd_proteus_data+0x35e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    42ee:	8e 01       	movw	r16, r28
    42f0:	08 5a       	subi	r16, 0xA8	; 168
    42f2:	1f 4f       	sbci	r17, 0xFF	; 255
    42f4:	fe 01       	movw	r30, r28
    42f6:	e7 5a       	subi	r30, 0xA7	; 167
    42f8:	ff 4f       	sbci	r31, 0xFF	; 255
    42fa:	60 81       	ld	r22, Z
    42fc:	71 81       	ldd	r23, Z+1	; 0x01
    42fe:	82 81       	ldd	r24, Z+2	; 0x02
    4300:	93 81       	ldd	r25, Z+3	; 0x03
    4302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	f8 01       	movw	r30, r16
    430c:	80 83       	st	Z, r24
    430e:	de 01       	movw	r26, r28
    4310:	a7 5b       	subi	r26, 0xB7	; 183
    4312:	bf 4f       	sbci	r27, 0xFF	; 255
    4314:	fe 01       	movw	r30, r28
    4316:	e8 5a       	subi	r30, 0xA8	; 168
    4318:	ff 4f       	sbci	r31, 0xFF	; 255
    431a:	80 81       	ld	r24, Z
    431c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    431e:	fe 01       	movw	r30, r28
    4320:	e7 5b       	subi	r30, 0xB7	; 183
    4322:	ff 4f       	sbci	r31, 0xFF	; 255
    4324:	80 81       	ld	r24, Z
    4326:	8a 95       	dec	r24
    4328:	f1 f7       	brne	.-4      	; 0x4326 <lcd_proteus_data+0x352>
    432a:	fe 01       	movw	r30, r28
    432c:	e7 5b       	subi	r30, 0xB7	; 183
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	80 83       	st	Z, r24
	_delay_us(10);
	CLEAR_BIT(PORTD,3);
    4332:	a2 e3       	ldi	r26, 0x32	; 50
    4334:	b0 e0       	ldi	r27, 0x00	; 0
    4336:	e2 e3       	ldi	r30, 0x32	; 50
    4338:	f0 e0       	ldi	r31, 0x00	; 0
    433a:	80 81       	ld	r24, Z
    433c:	87 7f       	andi	r24, 0xF7	; 247
    433e:	8c 93       	st	X, r24
    4340:	fe 01       	movw	r30, r28
    4342:	eb 5b       	subi	r30, 0xBB	; 187
    4344:	ff 4f       	sbci	r31, 0xFF	; 255
    4346:	80 e0       	ldi	r24, 0x00	; 0
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	a8 e4       	ldi	r26, 0x48	; 72
    434c:	b3 e4       	ldi	r27, 0x43	; 67
    434e:	80 83       	st	Z, r24
    4350:	91 83       	std	Z+1, r25	; 0x01
    4352:	a2 83       	std	Z+2, r26	; 0x02
    4354:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4356:	8e 01       	movw	r16, r28
    4358:	0f 5b       	subi	r16, 0xBF	; 191
    435a:	1f 4f       	sbci	r17, 0xFF	; 255
    435c:	fe 01       	movw	r30, r28
    435e:	eb 5b       	subi	r30, 0xBB	; 187
    4360:	ff 4f       	sbci	r31, 0xFF	; 255
    4362:	60 81       	ld	r22, Z
    4364:	71 81       	ldd	r23, Z+1	; 0x01
    4366:	82 81       	ldd	r24, Z+2	; 0x02
    4368:	93 81       	ldd	r25, Z+3	; 0x03
    436a:	2b ea       	ldi	r18, 0xAB	; 171
    436c:	3a ea       	ldi	r19, 0xAA	; 170
    436e:	4a ea       	ldi	r20, 0xAA	; 170
    4370:	50 e4       	ldi	r21, 0x40	; 64
    4372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4376:	dc 01       	movw	r26, r24
    4378:	cb 01       	movw	r24, r22
    437a:	f8 01       	movw	r30, r16
    437c:	80 83       	st	Z, r24
    437e:	91 83       	std	Z+1, r25	; 0x01
    4380:	a2 83       	std	Z+2, r26	; 0x02
    4382:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4384:	fe 01       	movw	r30, r28
    4386:	ef 5b       	subi	r30, 0xBF	; 191
    4388:	ff 4f       	sbci	r31, 0xFF	; 255
    438a:	60 81       	ld	r22, Z
    438c:	71 81       	ldd	r23, Z+1	; 0x01
    438e:	82 81       	ldd	r24, Z+2	; 0x02
    4390:	93 81       	ldd	r25, Z+3	; 0x03
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	40 e8       	ldi	r20, 0x80	; 128
    4398:	5f e3       	ldi	r21, 0x3F	; 63
    439a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    439e:	88 23       	and	r24, r24
    43a0:	34 f4       	brge	.+12     	; 0x43ae <lcd_proteus_data+0x3da>
		__ticks = 1;
    43a2:	81 e0       	ldi	r24, 0x01	; 1
    43a4:	fe 01       	movw	r30, r28
    43a6:	e0 5c       	subi	r30, 0xC0	; 192
    43a8:	ff 4f       	sbci	r31, 0xFF	; 255
    43aa:	80 83       	st	Z, r24
    43ac:	9d c0       	rjmp	.+314    	; 0x44e8 <lcd_proteus_data+0x514>
	else if (__tmp > 255)
    43ae:	fe 01       	movw	r30, r28
    43b0:	ef 5b       	subi	r30, 0xBF	; 191
    43b2:	ff 4f       	sbci	r31, 0xFF	; 255
    43b4:	60 81       	ld	r22, Z
    43b6:	71 81       	ldd	r23, Z+1	; 0x01
    43b8:	82 81       	ldd	r24, Z+2	; 0x02
    43ba:	93 81       	ldd	r25, Z+3	; 0x03
    43bc:	20 e0       	ldi	r18, 0x00	; 0
    43be:	30 e0       	ldi	r19, 0x00	; 0
    43c0:	4f e7       	ldi	r20, 0x7F	; 127
    43c2:	53 e4       	ldi	r21, 0x43	; 67
    43c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43c8:	18 16       	cp	r1, r24
    43ca:	0c f0       	brlt	.+2      	; 0x43ce <lcd_proteus_data+0x3fa>
    43cc:	7e c0       	rjmp	.+252    	; 0x44ca <lcd_proteus_data+0x4f6>
	{
		_delay_ms(__us / 1000.0);
    43ce:	fe 01       	movw	r30, r28
    43d0:	eb 5b       	subi	r30, 0xBB	; 187
    43d2:	ff 4f       	sbci	r31, 0xFF	; 255
    43d4:	60 81       	ld	r22, Z
    43d6:	71 81       	ldd	r23, Z+1	; 0x01
    43d8:	82 81       	ldd	r24, Z+2	; 0x02
    43da:	93 81       	ldd	r25, Z+3	; 0x03
    43dc:	20 e0       	ldi	r18, 0x00	; 0
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	4a e7       	ldi	r20, 0x7A	; 122
    43e2:	54 e4       	ldi	r21, 0x44	; 68
    43e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    43e8:	dc 01       	movw	r26, r24
    43ea:	cb 01       	movw	r24, r22
    43ec:	8c af       	std	Y+60, r24	; 0x3c
    43ee:	9d af       	std	Y+61, r25	; 0x3d
    43f0:	ae af       	std	Y+62, r26	; 0x3e
    43f2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43f4:	6c ad       	ldd	r22, Y+60	; 0x3c
    43f6:	7d ad       	ldd	r23, Y+61	; 0x3d
    43f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    43fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	4a e7       	ldi	r20, 0x7A	; 122
    4402:	55 e4       	ldi	r21, 0x45	; 69
    4404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4408:	dc 01       	movw	r26, r24
    440a:	cb 01       	movw	r24, r22
    440c:	88 af       	std	Y+56, r24	; 0x38
    440e:	99 af       	std	Y+57, r25	; 0x39
    4410:	aa af       	std	Y+58, r26	; 0x3a
    4412:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4414:	68 ad       	ldd	r22, Y+56	; 0x38
    4416:	79 ad       	ldd	r23, Y+57	; 0x39
    4418:	8a ad       	ldd	r24, Y+58	; 0x3a
    441a:	9b ad       	ldd	r25, Y+59	; 0x3b
    441c:	20 e0       	ldi	r18, 0x00	; 0
    441e:	30 e0       	ldi	r19, 0x00	; 0
    4420:	40 e8       	ldi	r20, 0x80	; 128
    4422:	5f e3       	ldi	r21, 0x3F	; 63
    4424:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4428:	88 23       	and	r24, r24
    442a:	2c f4       	brge	.+10     	; 0x4436 <lcd_proteus_data+0x462>
		__ticks = 1;
    442c:	81 e0       	ldi	r24, 0x01	; 1
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	9f ab       	std	Y+55, r25	; 0x37
    4432:	8e ab       	std	Y+54, r24	; 0x36
    4434:	3f c0       	rjmp	.+126    	; 0x44b4 <lcd_proteus_data+0x4e0>
	else if (__tmp > 65535)
    4436:	68 ad       	ldd	r22, Y+56	; 0x38
    4438:	79 ad       	ldd	r23, Y+57	; 0x39
    443a:	8a ad       	ldd	r24, Y+58	; 0x3a
    443c:	9b ad       	ldd	r25, Y+59	; 0x3b
    443e:	20 e0       	ldi	r18, 0x00	; 0
    4440:	3f ef       	ldi	r19, 0xFF	; 255
    4442:	4f e7       	ldi	r20, 0x7F	; 127
    4444:	57 e4       	ldi	r21, 0x47	; 71
    4446:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    444a:	18 16       	cp	r1, r24
    444c:	4c f5       	brge	.+82     	; 0x44a0 <lcd_proteus_data+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    444e:	6c ad       	ldd	r22, Y+60	; 0x3c
    4450:	7d ad       	ldd	r23, Y+61	; 0x3d
    4452:	8e ad       	ldd	r24, Y+62	; 0x3e
    4454:	9f ad       	ldd	r25, Y+63	; 0x3f
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	40 e2       	ldi	r20, 0x20	; 32
    445c:	51 e4       	ldi	r21, 0x41	; 65
    445e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4462:	dc 01       	movw	r26, r24
    4464:	cb 01       	movw	r24, r22
    4466:	bc 01       	movw	r22, r24
    4468:	cd 01       	movw	r24, r26
    446a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    446e:	dc 01       	movw	r26, r24
    4470:	cb 01       	movw	r24, r22
    4472:	9f ab       	std	Y+55, r25	; 0x37
    4474:	8e ab       	std	Y+54, r24	; 0x36
    4476:	0f c0       	rjmp	.+30     	; 0x4496 <lcd_proteus_data+0x4c2>
    4478:	80 e9       	ldi	r24, 0x90	; 144
    447a:	91 e0       	ldi	r25, 0x01	; 1
    447c:	9d ab       	std	Y+53, r25	; 0x35
    447e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4480:	8c a9       	ldd	r24, Y+52	; 0x34
    4482:	9d a9       	ldd	r25, Y+53	; 0x35
    4484:	01 97       	sbiw	r24, 0x01	; 1
    4486:	f1 f7       	brne	.-4      	; 0x4484 <lcd_proteus_data+0x4b0>
    4488:	9d ab       	std	Y+53, r25	; 0x35
    448a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    448c:	8e a9       	ldd	r24, Y+54	; 0x36
    448e:	9f a9       	ldd	r25, Y+55	; 0x37
    4490:	01 97       	sbiw	r24, 0x01	; 1
    4492:	9f ab       	std	Y+55, r25	; 0x37
    4494:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4496:	8e a9       	ldd	r24, Y+54	; 0x36
    4498:	9f a9       	ldd	r25, Y+55	; 0x37
    449a:	00 97       	sbiw	r24, 0x00	; 0
    449c:	69 f7       	brne	.-38     	; 0x4478 <lcd_proteus_data+0x4a4>
    449e:	2d c0       	rjmp	.+90     	; 0x44fa <lcd_proteus_data+0x526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44a0:	68 ad       	ldd	r22, Y+56	; 0x38
    44a2:	79 ad       	ldd	r23, Y+57	; 0x39
    44a4:	8a ad       	ldd	r24, Y+58	; 0x3a
    44a6:	9b ad       	ldd	r25, Y+59	; 0x3b
    44a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ac:	dc 01       	movw	r26, r24
    44ae:	cb 01       	movw	r24, r22
    44b0:	9f ab       	std	Y+55, r25	; 0x37
    44b2:	8e ab       	std	Y+54, r24	; 0x36
    44b4:	8e a9       	ldd	r24, Y+54	; 0x36
    44b6:	9f a9       	ldd	r25, Y+55	; 0x37
    44b8:	9b ab       	std	Y+51, r25	; 0x33
    44ba:	8a ab       	std	Y+50, r24	; 0x32
    44bc:	8a a9       	ldd	r24, Y+50	; 0x32
    44be:	9b a9       	ldd	r25, Y+51	; 0x33
    44c0:	01 97       	sbiw	r24, 0x01	; 1
    44c2:	f1 f7       	brne	.-4      	; 0x44c0 <lcd_proteus_data+0x4ec>
    44c4:	9b ab       	std	Y+51, r25	; 0x33
    44c6:	8a ab       	std	Y+50, r24	; 0x32
    44c8:	18 c0       	rjmp	.+48     	; 0x44fa <lcd_proteus_data+0x526>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    44ca:	fe 01       	movw	r30, r28
    44cc:	ef 5b       	subi	r30, 0xBF	; 191
    44ce:	ff 4f       	sbci	r31, 0xFF	; 255
    44d0:	60 81       	ld	r22, Z
    44d2:	71 81       	ldd	r23, Z+1	; 0x01
    44d4:	82 81       	ldd	r24, Z+2	; 0x02
    44d6:	93 81       	ldd	r25, Z+3	; 0x03
    44d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44dc:	dc 01       	movw	r26, r24
    44de:	cb 01       	movw	r24, r22
    44e0:	fe 01       	movw	r30, r28
    44e2:	e0 5c       	subi	r30, 0xC0	; 192
    44e4:	ff 4f       	sbci	r31, 0xFF	; 255
    44e6:	80 83       	st	Z, r24
    44e8:	fe 01       	movw	r30, r28
    44ea:	e0 5c       	subi	r30, 0xC0	; 192
    44ec:	ff 4f       	sbci	r31, 0xFF	; 255
    44ee:	80 81       	ld	r24, Z
    44f0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    44f2:	89 a9       	ldd	r24, Y+49	; 0x31
    44f4:	8a 95       	dec	r24
    44f6:	f1 f7       	brne	.-4      	; 0x44f4 <lcd_proteus_data+0x520>
    44f8:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);
	if(GET_BIT(data, 0)) { SET_BIT(PORTD,4); }else{ CLEAR_BIT(PORTD,4);}
    44fa:	fe 01       	movw	r30, r28
    44fc:	ef 59       	subi	r30, 0x9F	; 159
    44fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4500:	80 81       	ld	r24, Z
    4502:	88 2f       	mov	r24, r24
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	81 70       	andi	r24, 0x01	; 1
    4508:	90 70       	andi	r25, 0x00	; 0
    450a:	88 23       	and	r24, r24
    450c:	41 f0       	breq	.+16     	; 0x451e <lcd_proteus_data+0x54a>
    450e:	a2 e3       	ldi	r26, 0x32	; 50
    4510:	b0 e0       	ldi	r27, 0x00	; 0
    4512:	e2 e3       	ldi	r30, 0x32	; 50
    4514:	f0 e0       	ldi	r31, 0x00	; 0
    4516:	80 81       	ld	r24, Z
    4518:	80 61       	ori	r24, 0x10	; 16
    451a:	8c 93       	st	X, r24
    451c:	07 c0       	rjmp	.+14     	; 0x452c <lcd_proteus_data+0x558>
    451e:	a2 e3       	ldi	r26, 0x32	; 50
    4520:	b0 e0       	ldi	r27, 0x00	; 0
    4522:	e2 e3       	ldi	r30, 0x32	; 50
    4524:	f0 e0       	ldi	r31, 0x00	; 0
    4526:	80 81       	ld	r24, Z
    4528:	8f 7e       	andi	r24, 0xEF	; 239
    452a:	8c 93       	st	X, r24
	if(GET_BIT(data, 1)) { SET_BIT(PORTD,5) ;}else{ CLEAR_BIT(PORTD,5);}
    452c:	fe 01       	movw	r30, r28
    452e:	ef 59       	subi	r30, 0x9F	; 159
    4530:	ff 4f       	sbci	r31, 0xFF	; 255
    4532:	80 81       	ld	r24, Z
    4534:	88 2f       	mov	r24, r24
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	82 70       	andi	r24, 0x02	; 2
    453a:	90 70       	andi	r25, 0x00	; 0
    453c:	00 97       	sbiw	r24, 0x00	; 0
    453e:	41 f0       	breq	.+16     	; 0x4550 <lcd_proteus_data+0x57c>
    4540:	a2 e3       	ldi	r26, 0x32	; 50
    4542:	b0 e0       	ldi	r27, 0x00	; 0
    4544:	e2 e3       	ldi	r30, 0x32	; 50
    4546:	f0 e0       	ldi	r31, 0x00	; 0
    4548:	80 81       	ld	r24, Z
    454a:	80 62       	ori	r24, 0x20	; 32
    454c:	8c 93       	st	X, r24
    454e:	07 c0       	rjmp	.+14     	; 0x455e <lcd_proteus_data+0x58a>
    4550:	a2 e3       	ldi	r26, 0x32	; 50
    4552:	b0 e0       	ldi	r27, 0x00	; 0
    4554:	e2 e3       	ldi	r30, 0x32	; 50
    4556:	f0 e0       	ldi	r31, 0x00	; 0
    4558:	80 81       	ld	r24, Z
    455a:	8f 7d       	andi	r24, 0xDF	; 223
    455c:	8c 93       	st	X, r24
	if(GET_BIT(data, 2)) { SET_BIT(PORTD,6) ;}else{ CLEAR_BIT(PORTD,6);}
    455e:	fe 01       	movw	r30, r28
    4560:	ef 59       	subi	r30, 0x9F	; 159
    4562:	ff 4f       	sbci	r31, 0xFF	; 255
    4564:	80 81       	ld	r24, Z
    4566:	88 2f       	mov	r24, r24
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	84 70       	andi	r24, 0x04	; 4
    456c:	90 70       	andi	r25, 0x00	; 0
    456e:	00 97       	sbiw	r24, 0x00	; 0
    4570:	41 f0       	breq	.+16     	; 0x4582 <lcd_proteus_data+0x5ae>
    4572:	a2 e3       	ldi	r26, 0x32	; 50
    4574:	b0 e0       	ldi	r27, 0x00	; 0
    4576:	e2 e3       	ldi	r30, 0x32	; 50
    4578:	f0 e0       	ldi	r31, 0x00	; 0
    457a:	80 81       	ld	r24, Z
    457c:	80 64       	ori	r24, 0x40	; 64
    457e:	8c 93       	st	X, r24
    4580:	07 c0       	rjmp	.+14     	; 0x4590 <lcd_proteus_data+0x5bc>
    4582:	a2 e3       	ldi	r26, 0x32	; 50
    4584:	b0 e0       	ldi	r27, 0x00	; 0
    4586:	e2 e3       	ldi	r30, 0x32	; 50
    4588:	f0 e0       	ldi	r31, 0x00	; 0
    458a:	80 81       	ld	r24, Z
    458c:	8f 7b       	andi	r24, 0xBF	; 191
    458e:	8c 93       	st	X, r24
	if(GET_BIT(data, 3)) { SET_BIT(PORTD,7) ;}else{ CLEAR_BIT(PORTD,7);}
    4590:	fe 01       	movw	r30, r28
    4592:	ef 59       	subi	r30, 0x9F	; 159
    4594:	ff 4f       	sbci	r31, 0xFF	; 255
    4596:	80 81       	ld	r24, Z
    4598:	88 2f       	mov	r24, r24
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	88 70       	andi	r24, 0x08	; 8
    459e:	90 70       	andi	r25, 0x00	; 0
    45a0:	00 97       	sbiw	r24, 0x00	; 0
    45a2:	41 f0       	breq	.+16     	; 0x45b4 <lcd_proteus_data+0x5e0>
    45a4:	a2 e3       	ldi	r26, 0x32	; 50
    45a6:	b0 e0       	ldi	r27, 0x00	; 0
    45a8:	e2 e3       	ldi	r30, 0x32	; 50
    45aa:	f0 e0       	ldi	r31, 0x00	; 0
    45ac:	80 81       	ld	r24, Z
    45ae:	80 68       	ori	r24, 0x80	; 128
    45b0:	8c 93       	st	X, r24
    45b2:	07 c0       	rjmp	.+14     	; 0x45c2 <lcd_proteus_data+0x5ee>
    45b4:	a2 e3       	ldi	r26, 0x32	; 50
    45b6:	b0 e0       	ldi	r27, 0x00	; 0
    45b8:	e2 e3       	ldi	r30, 0x32	; 50
    45ba:	f0 e0       	ldi	r31, 0x00	; 0
    45bc:	80 81       	ld	r24, Z
    45be:	8f 77       	andi	r24, 0x7F	; 127
    45c0:	8c 93       	st	X, r24
	SET_BIT(PORTD,3);
    45c2:	a2 e3       	ldi	r26, 0x32	; 50
    45c4:	b0 e0       	ldi	r27, 0x00	; 0
    45c6:	e2 e3       	ldi	r30, 0x32	; 50
    45c8:	f0 e0       	ldi	r31, 0x00	; 0
    45ca:	80 81       	ld	r24, Z
    45cc:	88 60       	ori	r24, 0x08	; 8
    45ce:	8c 93       	st	X, r24
    45d0:	80 e0       	ldi	r24, 0x00	; 0
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	a0 e2       	ldi	r26, 0x20	; 32
    45d6:	b1 e4       	ldi	r27, 0x41	; 65
    45d8:	8d a7       	std	Y+45, r24	; 0x2d
    45da:	9e a7       	std	Y+46, r25	; 0x2e
    45dc:	af a7       	std	Y+47, r26	; 0x2f
    45de:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    45e0:	6d a5       	ldd	r22, Y+45	; 0x2d
    45e2:	7e a5       	ldd	r23, Y+46	; 0x2e
    45e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    45e6:	98 a9       	ldd	r25, Y+48	; 0x30
    45e8:	2b ea       	ldi	r18, 0xAB	; 171
    45ea:	3a ea       	ldi	r19, 0xAA	; 170
    45ec:	4a ea       	ldi	r20, 0xAA	; 170
    45ee:	50 e4       	ldi	r21, 0x40	; 64
    45f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45f4:	dc 01       	movw	r26, r24
    45f6:	cb 01       	movw	r24, r22
    45f8:	89 a7       	std	Y+41, r24	; 0x29
    45fa:	9a a7       	std	Y+42, r25	; 0x2a
    45fc:	ab a7       	std	Y+43, r26	; 0x2b
    45fe:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4600:	69 a5       	ldd	r22, Y+41	; 0x29
    4602:	7a a5       	ldd	r23, Y+42	; 0x2a
    4604:	8b a5       	ldd	r24, Y+43	; 0x2b
    4606:	9c a5       	ldd	r25, Y+44	; 0x2c
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	40 e8       	ldi	r20, 0x80	; 128
    460e:	5f e3       	ldi	r21, 0x3F	; 63
    4610:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4614:	88 23       	and	r24, r24
    4616:	1c f4       	brge	.+6      	; 0x461e <lcd_proteus_data+0x64a>
		__ticks = 1;
    4618:	81 e0       	ldi	r24, 0x01	; 1
    461a:	88 a7       	std	Y+40, r24	; 0x28
    461c:	91 c0       	rjmp	.+290    	; 0x4740 <lcd_proteus_data+0x76c>
	else if (__tmp > 255)
    461e:	69 a5       	ldd	r22, Y+41	; 0x29
    4620:	7a a5       	ldd	r23, Y+42	; 0x2a
    4622:	8b a5       	ldd	r24, Y+43	; 0x2b
    4624:	9c a5       	ldd	r25, Y+44	; 0x2c
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	4f e7       	ldi	r20, 0x7F	; 127
    462c:	53 e4       	ldi	r21, 0x43	; 67
    462e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4632:	18 16       	cp	r1, r24
    4634:	0c f0       	brlt	.+2      	; 0x4638 <lcd_proteus_data+0x664>
    4636:	7b c0       	rjmp	.+246    	; 0x472e <lcd_proteus_data+0x75a>
	{
		_delay_ms(__us / 1000.0);
    4638:	6d a5       	ldd	r22, Y+45	; 0x2d
    463a:	7e a5       	ldd	r23, Y+46	; 0x2e
    463c:	8f a5       	ldd	r24, Y+47	; 0x2f
    463e:	98 a9       	ldd	r25, Y+48	; 0x30
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	4a e7       	ldi	r20, 0x7A	; 122
    4646:	54 e4       	ldi	r21, 0x44	; 68
    4648:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    464c:	dc 01       	movw	r26, r24
    464e:	cb 01       	movw	r24, r22
    4650:	8c a3       	std	Y+36, r24	; 0x24
    4652:	9d a3       	std	Y+37, r25	; 0x25
    4654:	ae a3       	std	Y+38, r26	; 0x26
    4656:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4658:	6c a1       	ldd	r22, Y+36	; 0x24
    465a:	7d a1       	ldd	r23, Y+37	; 0x25
    465c:	8e a1       	ldd	r24, Y+38	; 0x26
    465e:	9f a1       	ldd	r25, Y+39	; 0x27
    4660:	20 e0       	ldi	r18, 0x00	; 0
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	4a e7       	ldi	r20, 0x7A	; 122
    4666:	55 e4       	ldi	r21, 0x45	; 69
    4668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    466c:	dc 01       	movw	r26, r24
    466e:	cb 01       	movw	r24, r22
    4670:	88 a3       	std	Y+32, r24	; 0x20
    4672:	99 a3       	std	Y+33, r25	; 0x21
    4674:	aa a3       	std	Y+34, r26	; 0x22
    4676:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4678:	68 a1       	ldd	r22, Y+32	; 0x20
    467a:	79 a1       	ldd	r23, Y+33	; 0x21
    467c:	8a a1       	ldd	r24, Y+34	; 0x22
    467e:	9b a1       	ldd	r25, Y+35	; 0x23
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	30 e0       	ldi	r19, 0x00	; 0
    4684:	40 e8       	ldi	r20, 0x80	; 128
    4686:	5f e3       	ldi	r21, 0x3F	; 63
    4688:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    468c:	88 23       	and	r24, r24
    468e:	2c f4       	brge	.+10     	; 0x469a <lcd_proteus_data+0x6c6>
		__ticks = 1;
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	9f 8f       	std	Y+31, r25	; 0x1f
    4696:	8e 8f       	std	Y+30, r24	; 0x1e
    4698:	3f c0       	rjmp	.+126    	; 0x4718 <lcd_proteus_data+0x744>
	else if (__tmp > 65535)
    469a:	68 a1       	ldd	r22, Y+32	; 0x20
    469c:	79 a1       	ldd	r23, Y+33	; 0x21
    469e:	8a a1       	ldd	r24, Y+34	; 0x22
    46a0:	9b a1       	ldd	r25, Y+35	; 0x23
    46a2:	20 e0       	ldi	r18, 0x00	; 0
    46a4:	3f ef       	ldi	r19, 0xFF	; 255
    46a6:	4f e7       	ldi	r20, 0x7F	; 127
    46a8:	57 e4       	ldi	r21, 0x47	; 71
    46aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46ae:	18 16       	cp	r1, r24
    46b0:	4c f5       	brge	.+82     	; 0x4704 <lcd_proteus_data+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46b2:	6c a1       	ldd	r22, Y+36	; 0x24
    46b4:	7d a1       	ldd	r23, Y+37	; 0x25
    46b6:	8e a1       	ldd	r24, Y+38	; 0x26
    46b8:	9f a1       	ldd	r25, Y+39	; 0x27
    46ba:	20 e0       	ldi	r18, 0x00	; 0
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	40 e2       	ldi	r20, 0x20	; 32
    46c0:	51 e4       	ldi	r21, 0x41	; 65
    46c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c6:	dc 01       	movw	r26, r24
    46c8:	cb 01       	movw	r24, r22
    46ca:	bc 01       	movw	r22, r24
    46cc:	cd 01       	movw	r24, r26
    46ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22
    46d6:	9f 8f       	std	Y+31, r25	; 0x1f
    46d8:	8e 8f       	std	Y+30, r24	; 0x1e
    46da:	0f c0       	rjmp	.+30     	; 0x46fa <lcd_proteus_data+0x726>
    46dc:	80 e9       	ldi	r24, 0x90	; 144
    46de:	91 e0       	ldi	r25, 0x01	; 1
    46e0:	9d 8f       	std	Y+29, r25	; 0x1d
    46e2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    46e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    46e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    46e8:	01 97       	sbiw	r24, 0x01	; 1
    46ea:	f1 f7       	brne	.-4      	; 0x46e8 <lcd_proteus_data+0x714>
    46ec:	9d 8f       	std	Y+29, r25	; 0x1d
    46ee:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    46f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	9f 8f       	std	Y+31, r25	; 0x1f
    46f8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    46fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    46fe:	00 97       	sbiw	r24, 0x00	; 0
    4700:	69 f7       	brne	.-38     	; 0x46dc <lcd_proteus_data+0x708>
    4702:	24 c0       	rjmp	.+72     	; 0x474c <lcd_proteus_data+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4704:	68 a1       	ldd	r22, Y+32	; 0x20
    4706:	79 a1       	ldd	r23, Y+33	; 0x21
    4708:	8a a1       	ldd	r24, Y+34	; 0x22
    470a:	9b a1       	ldd	r25, Y+35	; 0x23
    470c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4710:	dc 01       	movw	r26, r24
    4712:	cb 01       	movw	r24, r22
    4714:	9f 8f       	std	Y+31, r25	; 0x1f
    4716:	8e 8f       	std	Y+30, r24	; 0x1e
    4718:	8e 8d       	ldd	r24, Y+30	; 0x1e
    471a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    471c:	9b 8f       	std	Y+27, r25	; 0x1b
    471e:	8a 8f       	std	Y+26, r24	; 0x1a
    4720:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4722:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4724:	01 97       	sbiw	r24, 0x01	; 1
    4726:	f1 f7       	brne	.-4      	; 0x4724 <lcd_proteus_data+0x750>
    4728:	9b 8f       	std	Y+27, r25	; 0x1b
    472a:	8a 8f       	std	Y+26, r24	; 0x1a
    472c:	0f c0       	rjmp	.+30     	; 0x474c <lcd_proteus_data+0x778>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    472e:	69 a5       	ldd	r22, Y+41	; 0x29
    4730:	7a a5       	ldd	r23, Y+42	; 0x2a
    4732:	8b a5       	ldd	r24, Y+43	; 0x2b
    4734:	9c a5       	ldd	r25, Y+44	; 0x2c
    4736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    473a:	dc 01       	movw	r26, r24
    473c:	cb 01       	movw	r24, r22
    473e:	88 a7       	std	Y+40, r24	; 0x28
    4740:	88 a5       	ldd	r24, Y+40	; 0x28
    4742:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4744:	89 8d       	ldd	r24, Y+25	; 0x19
    4746:	8a 95       	dec	r24
    4748:	f1 f7       	brne	.-4      	; 0x4746 <lcd_proteus_data+0x772>
    474a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	CLEAR_BIT(PORTD,3);
    474c:	a2 e3       	ldi	r26, 0x32	; 50
    474e:	b0 e0       	ldi	r27, 0x00	; 0
    4750:	e2 e3       	ldi	r30, 0x32	; 50
    4752:	f0 e0       	ldi	r31, 0x00	; 0
    4754:	80 81       	ld	r24, Z
    4756:	87 7f       	andi	r24, 0xF7	; 247
    4758:	8c 93       	st	X, r24
    475a:	80 e0       	ldi	r24, 0x00	; 0
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	a8 e4       	ldi	r26, 0x48	; 72
    4760:	b3 e4       	ldi	r27, 0x43	; 67
    4762:	8d 8b       	std	Y+21, r24	; 0x15
    4764:	9e 8b       	std	Y+22, r25	; 0x16
    4766:	af 8b       	std	Y+23, r26	; 0x17
    4768:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    476a:	6d 89       	ldd	r22, Y+21	; 0x15
    476c:	7e 89       	ldd	r23, Y+22	; 0x16
    476e:	8f 89       	ldd	r24, Y+23	; 0x17
    4770:	98 8d       	ldd	r25, Y+24	; 0x18
    4772:	2b ea       	ldi	r18, 0xAB	; 171
    4774:	3a ea       	ldi	r19, 0xAA	; 170
    4776:	4a ea       	ldi	r20, 0xAA	; 170
    4778:	50 e4       	ldi	r21, 0x40	; 64
    477a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    477e:	dc 01       	movw	r26, r24
    4780:	cb 01       	movw	r24, r22
    4782:	89 8b       	std	Y+17, r24	; 0x11
    4784:	9a 8b       	std	Y+18, r25	; 0x12
    4786:	ab 8b       	std	Y+19, r26	; 0x13
    4788:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    478a:	69 89       	ldd	r22, Y+17	; 0x11
    478c:	7a 89       	ldd	r23, Y+18	; 0x12
    478e:	8b 89       	ldd	r24, Y+19	; 0x13
    4790:	9c 89       	ldd	r25, Y+20	; 0x14
    4792:	20 e0       	ldi	r18, 0x00	; 0
    4794:	30 e0       	ldi	r19, 0x00	; 0
    4796:	40 e8       	ldi	r20, 0x80	; 128
    4798:	5f e3       	ldi	r21, 0x3F	; 63
    479a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    479e:	88 23       	and	r24, r24
    47a0:	1c f4       	brge	.+6      	; 0x47a8 <lcd_proteus_data+0x7d4>
		__ticks = 1;
    47a2:	81 e0       	ldi	r24, 0x01	; 1
    47a4:	88 8b       	std	Y+16, r24	; 0x10
    47a6:	91 c0       	rjmp	.+290    	; 0x48ca <lcd_proteus_data+0x8f6>
	else if (__tmp > 255)
    47a8:	69 89       	ldd	r22, Y+17	; 0x11
    47aa:	7a 89       	ldd	r23, Y+18	; 0x12
    47ac:	8b 89       	ldd	r24, Y+19	; 0x13
    47ae:	9c 89       	ldd	r25, Y+20	; 0x14
    47b0:	20 e0       	ldi	r18, 0x00	; 0
    47b2:	30 e0       	ldi	r19, 0x00	; 0
    47b4:	4f e7       	ldi	r20, 0x7F	; 127
    47b6:	53 e4       	ldi	r21, 0x43	; 67
    47b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47bc:	18 16       	cp	r1, r24
    47be:	0c f0       	brlt	.+2      	; 0x47c2 <lcd_proteus_data+0x7ee>
    47c0:	7b c0       	rjmp	.+246    	; 0x48b8 <lcd_proteus_data+0x8e4>
	{
		_delay_ms(__us / 1000.0);
    47c2:	6d 89       	ldd	r22, Y+21	; 0x15
    47c4:	7e 89       	ldd	r23, Y+22	; 0x16
    47c6:	8f 89       	ldd	r24, Y+23	; 0x17
    47c8:	98 8d       	ldd	r25, Y+24	; 0x18
    47ca:	20 e0       	ldi	r18, 0x00	; 0
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	4a e7       	ldi	r20, 0x7A	; 122
    47d0:	54 e4       	ldi	r21, 0x44	; 68
    47d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    47d6:	dc 01       	movw	r26, r24
    47d8:	cb 01       	movw	r24, r22
    47da:	8c 87       	std	Y+12, r24	; 0x0c
    47dc:	9d 87       	std	Y+13, r25	; 0x0d
    47de:	ae 87       	std	Y+14, r26	; 0x0e
    47e0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    47e4:	7d 85       	ldd	r23, Y+13	; 0x0d
    47e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    47e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	4a e7       	ldi	r20, 0x7A	; 122
    47f0:	55 e4       	ldi	r21, 0x45	; 69
    47f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f6:	dc 01       	movw	r26, r24
    47f8:	cb 01       	movw	r24, r22
    47fa:	88 87       	std	Y+8, r24	; 0x08
    47fc:	99 87       	std	Y+9, r25	; 0x09
    47fe:	aa 87       	std	Y+10, r26	; 0x0a
    4800:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4802:	68 85       	ldd	r22, Y+8	; 0x08
    4804:	79 85       	ldd	r23, Y+9	; 0x09
    4806:	8a 85       	ldd	r24, Y+10	; 0x0a
    4808:	9b 85       	ldd	r25, Y+11	; 0x0b
    480a:	20 e0       	ldi	r18, 0x00	; 0
    480c:	30 e0       	ldi	r19, 0x00	; 0
    480e:	40 e8       	ldi	r20, 0x80	; 128
    4810:	5f e3       	ldi	r21, 0x3F	; 63
    4812:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4816:	88 23       	and	r24, r24
    4818:	2c f4       	brge	.+10     	; 0x4824 <lcd_proteus_data+0x850>
		__ticks = 1;
    481a:	81 e0       	ldi	r24, 0x01	; 1
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	9f 83       	std	Y+7, r25	; 0x07
    4820:	8e 83       	std	Y+6, r24	; 0x06
    4822:	3f c0       	rjmp	.+126    	; 0x48a2 <lcd_proteus_data+0x8ce>
	else if (__tmp > 65535)
    4824:	68 85       	ldd	r22, Y+8	; 0x08
    4826:	79 85       	ldd	r23, Y+9	; 0x09
    4828:	8a 85       	ldd	r24, Y+10	; 0x0a
    482a:	9b 85       	ldd	r25, Y+11	; 0x0b
    482c:	20 e0       	ldi	r18, 0x00	; 0
    482e:	3f ef       	ldi	r19, 0xFF	; 255
    4830:	4f e7       	ldi	r20, 0x7F	; 127
    4832:	57 e4       	ldi	r21, 0x47	; 71
    4834:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4838:	18 16       	cp	r1, r24
    483a:	4c f5       	brge	.+82     	; 0x488e <lcd_proteus_data+0x8ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    483c:	6c 85       	ldd	r22, Y+12	; 0x0c
    483e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4840:	8e 85       	ldd	r24, Y+14	; 0x0e
    4842:	9f 85       	ldd	r25, Y+15	; 0x0f
    4844:	20 e0       	ldi	r18, 0x00	; 0
    4846:	30 e0       	ldi	r19, 0x00	; 0
    4848:	40 e2       	ldi	r20, 0x20	; 32
    484a:	51 e4       	ldi	r21, 0x41	; 65
    484c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	bc 01       	movw	r22, r24
    4856:	cd 01       	movw	r24, r26
    4858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485c:	dc 01       	movw	r26, r24
    485e:	cb 01       	movw	r24, r22
    4860:	9f 83       	std	Y+7, r25	; 0x07
    4862:	8e 83       	std	Y+6, r24	; 0x06
    4864:	0f c0       	rjmp	.+30     	; 0x4884 <lcd_proteus_data+0x8b0>
    4866:	80 e9       	ldi	r24, 0x90	; 144
    4868:	91 e0       	ldi	r25, 0x01	; 1
    486a:	9d 83       	std	Y+5, r25	; 0x05
    486c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    486e:	8c 81       	ldd	r24, Y+4	; 0x04
    4870:	9d 81       	ldd	r25, Y+5	; 0x05
    4872:	01 97       	sbiw	r24, 0x01	; 1
    4874:	f1 f7       	brne	.-4      	; 0x4872 <lcd_proteus_data+0x89e>
    4876:	9d 83       	std	Y+5, r25	; 0x05
    4878:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    487a:	8e 81       	ldd	r24, Y+6	; 0x06
    487c:	9f 81       	ldd	r25, Y+7	; 0x07
    487e:	01 97       	sbiw	r24, 0x01	; 1
    4880:	9f 83       	std	Y+7, r25	; 0x07
    4882:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4884:	8e 81       	ldd	r24, Y+6	; 0x06
    4886:	9f 81       	ldd	r25, Y+7	; 0x07
    4888:	00 97       	sbiw	r24, 0x00	; 0
    488a:	69 f7       	brne	.-38     	; 0x4866 <lcd_proteus_data+0x892>
    488c:	24 c0       	rjmp	.+72     	; 0x48d6 <lcd_proteus_data+0x902>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    488e:	68 85       	ldd	r22, Y+8	; 0x08
    4890:	79 85       	ldd	r23, Y+9	; 0x09
    4892:	8a 85       	ldd	r24, Y+10	; 0x0a
    4894:	9b 85       	ldd	r25, Y+11	; 0x0b
    4896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    489a:	dc 01       	movw	r26, r24
    489c:	cb 01       	movw	r24, r22
    489e:	9f 83       	std	Y+7, r25	; 0x07
    48a0:	8e 83       	std	Y+6, r24	; 0x06
    48a2:	8e 81       	ldd	r24, Y+6	; 0x06
    48a4:	9f 81       	ldd	r25, Y+7	; 0x07
    48a6:	9b 83       	std	Y+3, r25	; 0x03
    48a8:	8a 83       	std	Y+2, r24	; 0x02
    48aa:	8a 81       	ldd	r24, Y+2	; 0x02
    48ac:	9b 81       	ldd	r25, Y+3	; 0x03
    48ae:	01 97       	sbiw	r24, 0x01	; 1
    48b0:	f1 f7       	brne	.-4      	; 0x48ae <lcd_proteus_data+0x8da>
    48b2:	9b 83       	std	Y+3, r25	; 0x03
    48b4:	8a 83       	std	Y+2, r24	; 0x02
    48b6:	0f c0       	rjmp	.+30     	; 0x48d6 <lcd_proteus_data+0x902>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    48b8:	69 89       	ldd	r22, Y+17	; 0x11
    48ba:	7a 89       	ldd	r23, Y+18	; 0x12
    48bc:	8b 89       	ldd	r24, Y+19	; 0x13
    48be:	9c 89       	ldd	r25, Y+20	; 0x14
    48c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c4:	dc 01       	movw	r26, r24
    48c6:	cb 01       	movw	r24, r22
    48c8:	88 8b       	std	Y+16, r24	; 0x10
    48ca:	88 89       	ldd	r24, Y+16	; 0x10
    48cc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    48ce:	89 81       	ldd	r24, Y+1	; 0x01
    48d0:	8a 95       	dec	r24
    48d2:	f1 f7       	brne	.-4      	; 0x48d0 <lcd_proteus_data+0x8fc>
    48d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    48d6:	cf 59       	subi	r28, 0x9F	; 159
    48d8:	df 4f       	sbci	r29, 0xFF	; 255
    48da:	0f b6       	in	r0, 0x3f	; 63
    48dc:	f8 94       	cli
    48de:	de bf       	out	0x3e, r29	; 62
    48e0:	0f be       	out	0x3f, r0	; 63
    48e2:	cd bf       	out	0x3d, r28	; 61
    48e4:	cf 91       	pop	r28
    48e6:	df 91       	pop	r29
    48e8:	1f 91       	pop	r17
    48ea:	0f 91       	pop	r16
    48ec:	08 95       	ret

000048ee <lcd_proteus_string>:

void lcd_proteus_string(uint8 *str) {
    48ee:	df 93       	push	r29
    48f0:	cf 93       	push	r28
    48f2:	00 d0       	rcall	.+0      	; 0x48f4 <lcd_proteus_string+0x6>
    48f4:	0f 92       	push	r0
    48f6:	cd b7       	in	r28, 0x3d	; 61
    48f8:	de b7       	in	r29, 0x3e	; 62
    48fa:	9b 83       	std	Y+3, r25	; 0x03
    48fc:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i = 0; str[i]; i++) {
    48fe:	19 82       	std	Y+1, r1	; 0x01
    4900:	14 c0       	rjmp	.+40     	; 0x492a <lcd_proteus_string+0x3c>
		if (i == 16) {
    4902:	89 81       	ldd	r24, Y+1	; 0x01
    4904:	80 31       	cpi	r24, 0x10	; 16
    4906:	19 f4       	brne	.+6      	; 0x490e <lcd_proteus_string+0x20>
			lcd_proteus_cmd(0xc0);
    4908:	80 ec       	ldi	r24, 0xC0	; 192
    490a:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <lcd_proteus_cmd>
		}
		lcd_proteus_data(str[i]);
    490e:	89 81       	ldd	r24, Y+1	; 0x01
    4910:	28 2f       	mov	r18, r24
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	8a 81       	ldd	r24, Y+2	; 0x02
    4916:	9b 81       	ldd	r25, Y+3	; 0x03
    4918:	fc 01       	movw	r30, r24
    491a:	e2 0f       	add	r30, r18
    491c:	f3 1f       	adc	r31, r19
    491e:	80 81       	ld	r24, Z
    4920:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <lcd_proteus_data>
	CLEAR_BIT(PORTD,3);
	_delay_us(200);
}

void lcd_proteus_string(uint8 *str) {
	for (uint8 i = 0; str[i]; i++) {
    4924:	89 81       	ldd	r24, Y+1	; 0x01
    4926:	8f 5f       	subi	r24, 0xFF	; 255
    4928:	89 83       	std	Y+1, r24	; 0x01
    492a:	89 81       	ldd	r24, Y+1	; 0x01
    492c:	28 2f       	mov	r18, r24
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	8a 81       	ldd	r24, Y+2	; 0x02
    4932:	9b 81       	ldd	r25, Y+3	; 0x03
    4934:	fc 01       	movw	r30, r24
    4936:	e2 0f       	add	r30, r18
    4938:	f3 1f       	adc	r31, r19
    493a:	80 81       	ld	r24, Z
    493c:	88 23       	and	r24, r24
    493e:	09 f7       	brne	.-62     	; 0x4902 <lcd_proteus_string+0x14>
		if (i == 16) {
			lcd_proteus_cmd(0xc0);
		}
		lcd_proteus_data(str[i]);
	}
}
    4940:	0f 90       	pop	r0
    4942:	0f 90       	pop	r0
    4944:	0f 90       	pop	r0
    4946:	cf 91       	pop	r28
    4948:	df 91       	pop	r29
    494a:	08 95       	ret

0000494c <lcd_proteus_sent_num>:

void lcd_proteus_sent_num(uint32 num) {
    494c:	df 93       	push	r29
    494e:	cf 93       	push	r28
    4950:	cd b7       	in	r28, 0x3d	; 61
    4952:	de b7       	in	r29, 0x3e	; 62
    4954:	2e 97       	sbiw	r28, 0x0e	; 14
    4956:	0f b6       	in	r0, 0x3f	; 63
    4958:	f8 94       	cli
    495a:	de bf       	out	0x3e, r29	; 62
    495c:	0f be       	out	0x3f, r0	; 63
    495e:	cd bf       	out	0x3d, r28	; 61
    4960:	6b 87       	std	Y+11, r22	; 0x0b
    4962:	7c 87       	std	Y+12, r23	; 0x0c
    4964:	8d 87       	std	Y+13, r24	; 0x0d
    4966:	9e 87       	std	Y+14, r25	; 0x0e
	uint8 n[10];
	itoa(num, n, 10);
    4968:	8b 85       	ldd	r24, Y+11	; 0x0b
    496a:	9c 85       	ldd	r25, Y+12	; 0x0c
    496c:	9e 01       	movw	r18, r28
    496e:	2f 5f       	subi	r18, 0xFF	; 255
    4970:	3f 4f       	sbci	r19, 0xFF	; 255
    4972:	b9 01       	movw	r22, r18
    4974:	4a e0       	ldi	r20, 0x0A	; 10
    4976:	50 e0       	ldi	r21, 0x00	; 0
    4978:	0e 94 4f 06 	call	0xc9e	; 0xc9e <itoa>
	lcd_proteus_string(n);
    497c:	ce 01       	movw	r24, r28
    497e:	01 96       	adiw	r24, 0x01	; 1
    4980:	0e 94 77 24 	call	0x48ee	; 0x48ee <lcd_proteus_string>
}
    4984:	2e 96       	adiw	r28, 0x0e	; 14
    4986:	0f b6       	in	r0, 0x3f	; 63
    4988:	f8 94       	cli
    498a:	de bf       	out	0x3e, r29	; 62
    498c:	0f be       	out	0x3f, r0	; 63
    498e:	cd bf       	out	0x3d, r28	; 61
    4990:	cf 91       	pop	r28
    4992:	df 91       	pop	r29
    4994:	08 95       	ret

00004996 <keypad_Init>:
uint8 key[4][4] = { { '1', '4', '7', 'C' },
					{ '2', '5', '8', '0' },
					{ '3', '6', '9', '#' },
					{ '+', '-', '*', '/' } };

void keypad_Init(void) {
    4996:	df 93       	push	r29
    4998:	cf 93       	push	r28
    499a:	cd b7       	in	r28, 0x3d	; 61
    499c:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0xf0;
    499e:	e4 e3       	ldi	r30, 0x34	; 52
    49a0:	f0 e0       	ldi	r31, 0x00	; 0
    49a2:	80 ef       	ldi	r24, 0xF0	; 240
    49a4:	80 83       	st	Z, r24
}
    49a6:	cf 91       	pop	r28
    49a8:	df 91       	pop	r29
    49aa:	08 95       	ret

000049ac <get_key>:

uint8 get_key(void) {
    49ac:	df 93       	push	r29
    49ae:	cf 93       	push	r28
    49b0:	cd b7       	in	r28, 0x3d	; 61
    49b2:	de b7       	in	r29, 0x3e	; 62
    49b4:	6f 97       	sbiw	r28, 0x1f	; 31
    49b6:	0f b6       	in	r0, 0x3f	; 63
    49b8:	f8 94       	cli
    49ba:	de bf       	out	0x3e, r29	; 62
    49bc:	0f be       	out	0x3f, r0	; 63
    49be:	cd bf       	out	0x3d, r28	; 61
	uint8 i,j,ch;
	for (i=0; i < 4; i++) {
    49c0:	1f 8e       	std	Y+31, r1	; 0x1f
    49c2:	14 c1       	rjmp	.+552    	; 0x4bec <get_key+0x240>
		PORTC &= 0x0f;
    49c4:	a5 e3       	ldi	r26, 0x35	; 53
    49c6:	b0 e0       	ldi	r27, 0x00	; 0
    49c8:	e5 e3       	ldi	r30, 0x35	; 53
    49ca:	f0 e0       	ldi	r31, 0x00	; 0
    49cc:	80 81       	ld	r24, Z
    49ce:	8f 70       	andi	r24, 0x0F	; 15
    49d0:	8c 93       	st	X, r24
		DIO_Write(20 + i, High);
    49d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    49d4:	8c 5e       	subi	r24, 0xEC	; 236
    49d6:	61 e0       	ldi	r22, 0x01	; 1
    49d8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <DIO_Write>
    49dc:	80 e0       	ldi	r24, 0x00	; 0
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	aa e7       	ldi	r26, 0x7A	; 122
    49e2:	b3 e4       	ldi	r27, 0x43	; 67
    49e4:	89 8f       	std	Y+25, r24	; 0x19
    49e6:	9a 8f       	std	Y+26, r25	; 0x1a
    49e8:	ab 8f       	std	Y+27, r26	; 0x1b
    49ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49ec:	69 8d       	ldd	r22, Y+25	; 0x19
    49ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49f4:	20 e0       	ldi	r18, 0x00	; 0
    49f6:	30 e0       	ldi	r19, 0x00	; 0
    49f8:	4a e7       	ldi	r20, 0x7A	; 122
    49fa:	55 e4       	ldi	r21, 0x45	; 69
    49fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a00:	dc 01       	movw	r26, r24
    4a02:	cb 01       	movw	r24, r22
    4a04:	8d 8b       	std	Y+21, r24	; 0x15
    4a06:	9e 8b       	std	Y+22, r25	; 0x16
    4a08:	af 8b       	std	Y+23, r26	; 0x17
    4a0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    4a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    4a10:	8f 89       	ldd	r24, Y+23	; 0x17
    4a12:	98 8d       	ldd	r25, Y+24	; 0x18
    4a14:	20 e0       	ldi	r18, 0x00	; 0
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	40 e8       	ldi	r20, 0x80	; 128
    4a1a:	5f e3       	ldi	r21, 0x3F	; 63
    4a1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a20:	88 23       	and	r24, r24
    4a22:	2c f4       	brge	.+10     	; 0x4a2e <get_key+0x82>
		__ticks = 1;
    4a24:	81 e0       	ldi	r24, 0x01	; 1
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	9c 8b       	std	Y+20, r25	; 0x14
    4a2a:	8b 8b       	std	Y+19, r24	; 0x13
    4a2c:	3f c0       	rjmp	.+126    	; 0x4aac <get_key+0x100>
	else if (__tmp > 65535)
    4a2e:	6d 89       	ldd	r22, Y+21	; 0x15
    4a30:	7e 89       	ldd	r23, Y+22	; 0x16
    4a32:	8f 89       	ldd	r24, Y+23	; 0x17
    4a34:	98 8d       	ldd	r25, Y+24	; 0x18
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	3f ef       	ldi	r19, 0xFF	; 255
    4a3a:	4f e7       	ldi	r20, 0x7F	; 127
    4a3c:	57 e4       	ldi	r21, 0x47	; 71
    4a3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a42:	18 16       	cp	r1, r24
    4a44:	4c f5       	brge	.+82     	; 0x4a98 <get_key+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a46:	69 8d       	ldd	r22, Y+25	; 0x19
    4a48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a4e:	20 e0       	ldi	r18, 0x00	; 0
    4a50:	30 e0       	ldi	r19, 0x00	; 0
    4a52:	40 e2       	ldi	r20, 0x20	; 32
    4a54:	51 e4       	ldi	r21, 0x41	; 65
    4a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a5a:	dc 01       	movw	r26, r24
    4a5c:	cb 01       	movw	r24, r22
    4a5e:	bc 01       	movw	r22, r24
    4a60:	cd 01       	movw	r24, r26
    4a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a66:	dc 01       	movw	r26, r24
    4a68:	cb 01       	movw	r24, r22
    4a6a:	9c 8b       	std	Y+20, r25	; 0x14
    4a6c:	8b 8b       	std	Y+19, r24	; 0x13
    4a6e:	0f c0       	rjmp	.+30     	; 0x4a8e <get_key+0xe2>
    4a70:	80 e9       	ldi	r24, 0x90	; 144
    4a72:	91 e0       	ldi	r25, 0x01	; 1
    4a74:	9a 8b       	std	Y+18, r25	; 0x12
    4a76:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4a78:	89 89       	ldd	r24, Y+17	; 0x11
    4a7a:	9a 89       	ldd	r25, Y+18	; 0x12
    4a7c:	01 97       	sbiw	r24, 0x01	; 1
    4a7e:	f1 f7       	brne	.-4      	; 0x4a7c <get_key+0xd0>
    4a80:	9a 8b       	std	Y+18, r25	; 0x12
    4a82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a84:	8b 89       	ldd	r24, Y+19	; 0x13
    4a86:	9c 89       	ldd	r25, Y+20	; 0x14
    4a88:	01 97       	sbiw	r24, 0x01	; 1
    4a8a:	9c 8b       	std	Y+20, r25	; 0x14
    4a8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    4a90:	9c 89       	ldd	r25, Y+20	; 0x14
    4a92:	00 97       	sbiw	r24, 0x00	; 0
    4a94:	69 f7       	brne	.-38     	; 0x4a70 <get_key+0xc4>
    4a96:	14 c0       	rjmp	.+40     	; 0x4ac0 <get_key+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a98:	6d 89       	ldd	r22, Y+21	; 0x15
    4a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    4a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    4aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aa4:	dc 01       	movw	r26, r24
    4aa6:	cb 01       	movw	r24, r22
    4aa8:	9c 8b       	std	Y+20, r25	; 0x14
    4aaa:	8b 8b       	std	Y+19, r24	; 0x13
    4aac:	8b 89       	ldd	r24, Y+19	; 0x13
    4aae:	9c 89       	ldd	r25, Y+20	; 0x14
    4ab0:	98 8b       	std	Y+16, r25	; 0x10
    4ab2:	8f 87       	std	Y+15, r24	; 0x0f
    4ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ab6:	98 89       	ldd	r25, Y+16	; 0x10
    4ab8:	01 97       	sbiw	r24, 0x01	; 1
    4aba:	f1 f7       	brne	.-4      	; 0x4ab8 <get_key+0x10c>
    4abc:	98 8b       	std	Y+16, r25	; 0x10
    4abe:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		for (j=0; j < 4; j++) {
    4ac0:	1e 8e       	std	Y+30, r1	; 0x1e
    4ac2:	8d c0       	rjmp	.+282    	; 0x4bde <get_key+0x232>
    4ac4:	80 e0       	ldi	r24, 0x00	; 0
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	aa e7       	ldi	r26, 0x7A	; 122
    4aca:	b3 e4       	ldi	r27, 0x43	; 67
    4acc:	8b 87       	std	Y+11, r24	; 0x0b
    4ace:	9c 87       	std	Y+12, r25	; 0x0c
    4ad0:	ad 87       	std	Y+13, r26	; 0x0d
    4ad2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    4adc:	20 e0       	ldi	r18, 0x00	; 0
    4ade:	30 e0       	ldi	r19, 0x00	; 0
    4ae0:	4a e7       	ldi	r20, 0x7A	; 122
    4ae2:	55 e4       	ldi	r21, 0x45	; 69
    4ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ae8:	dc 01       	movw	r26, r24
    4aea:	cb 01       	movw	r24, r22
    4aec:	8f 83       	std	Y+7, r24	; 0x07
    4aee:	98 87       	std	Y+8, r25	; 0x08
    4af0:	a9 87       	std	Y+9, r26	; 0x09
    4af2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4af4:	6f 81       	ldd	r22, Y+7	; 0x07
    4af6:	78 85       	ldd	r23, Y+8	; 0x08
    4af8:	89 85       	ldd	r24, Y+9	; 0x09
    4afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    4afc:	20 e0       	ldi	r18, 0x00	; 0
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	40 e8       	ldi	r20, 0x80	; 128
    4b02:	5f e3       	ldi	r21, 0x3F	; 63
    4b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b08:	88 23       	and	r24, r24
    4b0a:	2c f4       	brge	.+10     	; 0x4b16 <get_key+0x16a>
		__ticks = 1;
    4b0c:	81 e0       	ldi	r24, 0x01	; 1
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	9e 83       	std	Y+6, r25	; 0x06
    4b12:	8d 83       	std	Y+5, r24	; 0x05
    4b14:	3f c0       	rjmp	.+126    	; 0x4b94 <get_key+0x1e8>
	else if (__tmp > 65535)
    4b16:	6f 81       	ldd	r22, Y+7	; 0x07
    4b18:	78 85       	ldd	r23, Y+8	; 0x08
    4b1a:	89 85       	ldd	r24, Y+9	; 0x09
    4b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b1e:	20 e0       	ldi	r18, 0x00	; 0
    4b20:	3f ef       	ldi	r19, 0xFF	; 255
    4b22:	4f e7       	ldi	r20, 0x7F	; 127
    4b24:	57 e4       	ldi	r21, 0x47	; 71
    4b26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b2a:	18 16       	cp	r1, r24
    4b2c:	4c f5       	brge	.+82     	; 0x4b80 <get_key+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b30:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b34:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b36:	20 e0       	ldi	r18, 0x00	; 0
    4b38:	30 e0       	ldi	r19, 0x00	; 0
    4b3a:	40 e2       	ldi	r20, 0x20	; 32
    4b3c:	51 e4       	ldi	r21, 0x41	; 65
    4b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b42:	dc 01       	movw	r26, r24
    4b44:	cb 01       	movw	r24, r22
    4b46:	bc 01       	movw	r22, r24
    4b48:	cd 01       	movw	r24, r26
    4b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b4e:	dc 01       	movw	r26, r24
    4b50:	cb 01       	movw	r24, r22
    4b52:	9e 83       	std	Y+6, r25	; 0x06
    4b54:	8d 83       	std	Y+5, r24	; 0x05
    4b56:	0f c0       	rjmp	.+30     	; 0x4b76 <get_key+0x1ca>
    4b58:	80 e9       	ldi	r24, 0x90	; 144
    4b5a:	91 e0       	ldi	r25, 0x01	; 1
    4b5c:	9c 83       	std	Y+4, r25	; 0x04
    4b5e:	8b 83       	std	Y+3, r24	; 0x03
    4b60:	8b 81       	ldd	r24, Y+3	; 0x03
    4b62:	9c 81       	ldd	r25, Y+4	; 0x04
    4b64:	01 97       	sbiw	r24, 0x01	; 1
    4b66:	f1 f7       	brne	.-4      	; 0x4b64 <get_key+0x1b8>
    4b68:	9c 83       	std	Y+4, r25	; 0x04
    4b6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    4b70:	01 97       	sbiw	r24, 0x01	; 1
    4b72:	9e 83       	std	Y+6, r25	; 0x06
    4b74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b76:	8d 81       	ldd	r24, Y+5	; 0x05
    4b78:	9e 81       	ldd	r25, Y+6	; 0x06
    4b7a:	00 97       	sbiw	r24, 0x00	; 0
    4b7c:	69 f7       	brne	.-38     	; 0x4b58 <get_key+0x1ac>
    4b7e:	14 c0       	rjmp	.+40     	; 0x4ba8 <get_key+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b80:	6f 81       	ldd	r22, Y+7	; 0x07
    4b82:	78 85       	ldd	r23, Y+8	; 0x08
    4b84:	89 85       	ldd	r24, Y+9	; 0x09
    4b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b8c:	dc 01       	movw	r26, r24
    4b8e:	cb 01       	movw	r24, r22
    4b90:	9e 83       	std	Y+6, r25	; 0x06
    4b92:	8d 83       	std	Y+5, r24	; 0x05
    4b94:	8d 81       	ldd	r24, Y+5	; 0x05
    4b96:	9e 81       	ldd	r25, Y+6	; 0x06
    4b98:	9a 83       	std	Y+2, r25	; 0x02
    4b9a:	89 83       	std	Y+1, r24	; 0x01
    4b9c:	89 81       	ldd	r24, Y+1	; 0x01
    4b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    4ba0:	01 97       	sbiw	r24, 0x01	; 1
    4ba2:	f1 f7       	brne	.-4      	; 0x4ba0 <get_key+0x1f4>
    4ba4:	9a 83       	std	Y+2, r25	; 0x02
    4ba6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			if (DIO_Read(16+j)) {
    4ba8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4baa:	80 5f       	subi	r24, 0xF0	; 240
    4bac:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DIO_Read>
    4bb0:	88 23       	and	r24, r24
    4bb2:	91 f0       	breq	.+36     	; 0x4bd8 <get_key+0x22c>
				ch=key[i][j];
    4bb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4bb6:	48 2f       	mov	r20, r24
    4bb8:	50 e0       	ldi	r21, 0x00	; 0
    4bba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4bbc:	28 2f       	mov	r18, r24
    4bbe:	30 e0       	ldi	r19, 0x00	; 0
    4bc0:	ca 01       	movw	r24, r20
    4bc2:	88 0f       	add	r24, r24
    4bc4:	99 1f       	adc	r25, r25
    4bc6:	88 0f       	add	r24, r24
    4bc8:	99 1f       	adc	r25, r25
    4bca:	82 0f       	add	r24, r18
    4bcc:	93 1f       	adc	r25, r19
    4bce:	fc 01       	movw	r30, r24
    4bd0:	e2 57       	subi	r30, 0x72	; 114
    4bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd4:	80 81       	ld	r24, Z
    4bd6:	8d 8f       	std	Y+29, r24	; 0x1d
	uint8 i,j,ch;
	for (i=0; i < 4; i++) {
		PORTC &= 0x0f;
		DIO_Write(20 + i, High);
		_delay_ms(250);
		for (j=0; j < 4; j++) {
    4bd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4bda:	8f 5f       	subi	r24, 0xFF	; 255
    4bdc:	8e 8f       	std	Y+30, r24	; 0x1e
    4bde:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4be0:	84 30       	cpi	r24, 0x04	; 4
    4be2:	08 f4       	brcc	.+2      	; 0x4be6 <get_key+0x23a>
    4be4:	6f cf       	rjmp	.-290    	; 0x4ac4 <get_key+0x118>
	DDRC = 0xf0;
}

uint8 get_key(void) {
	uint8 i,j,ch;
	for (i=0; i < 4; i++) {
    4be6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4be8:	8f 5f       	subi	r24, 0xFF	; 255
    4bea:	8f 8f       	std	Y+31, r24	; 0x1f
    4bec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4bee:	84 30       	cpi	r24, 0x04	; 4
    4bf0:	08 f4       	brcc	.+2      	; 0x4bf4 <get_key+0x248>
    4bf2:	e8 ce       	rjmp	.-560    	; 0x49c4 <get_key+0x18>
			if (DIO_Read(16+j)) {
				ch=key[i][j];
			}
		}
	}
	return ch;
    4bf4:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    4bf6:	6f 96       	adiw	r28, 0x1f	; 31
    4bf8:	0f b6       	in	r0, 0x3f	; 63
    4bfa:	f8 94       	cli
    4bfc:	de bf       	out	0x3e, r29	; 62
    4bfe:	0f be       	out	0x3f, r0	; 63
    4c00:	cd bf       	out	0x3d, r28	; 61
    4c02:	cf 91       	pop	r28
    4c04:	df 91       	pop	r29
    4c06:	08 95       	ret

00004c08 <main>:

#include "MCAL/SPI/spi.h"
#include "MCAL/UART/uart.h"

int main()
{
    4c08:	df 93       	push	r29
    4c0a:	cf 93       	push	r28
    4c0c:	cd b7       	in	r28, 0x3d	; 61
    4c0e:	de b7       	in	r29, 0x3e	; 62
    4c10:	6d 97       	sbiw	r28, 0x1d	; 29
    4c12:	0f b6       	in	r0, 0x3f	; 63
    4c14:	f8 94       	cli
    4c16:	de bf       	out	0x3e, r29	; 62
    4c18:	0f be       	out	0x3f, r0	; 63
    4c1a:	cd bf       	out	0x3d, r28	; 61
	spi_master_init();
    4c1c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <spi_master_init>
	uart_init();
    4c20:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_init>
	uint8 data=0;
    4c24:	1d 8e       	std	Y+29, r1	; 0x1d
	uart_transmit_data("Mohamed Eltokhy Project\r\n");
    4c26:	80 e6       	ldi	r24, 0x60	; 96
    4c28:	90 e0       	ldi	r25, 0x00	; 0
    4c2a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <uart_transmit_data>
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	a0 e2       	ldi	r26, 0x20	; 32
    4c34:	b1 e4       	ldi	r27, 0x41	; 65
    4c36:	89 8f       	std	Y+25, r24	; 0x19
    4c38:	9a 8f       	std	Y+26, r25	; 0x1a
    4c3a:	ab 8f       	std	Y+27, r26	; 0x1b
    4c3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c3e:	69 8d       	ldd	r22, Y+25	; 0x19
    4c40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c46:	20 e0       	ldi	r18, 0x00	; 0
    4c48:	30 e0       	ldi	r19, 0x00	; 0
    4c4a:	4a e7       	ldi	r20, 0x7A	; 122
    4c4c:	55 e4       	ldi	r21, 0x45	; 69
    4c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c52:	dc 01       	movw	r26, r24
    4c54:	cb 01       	movw	r24, r22
    4c56:	8d 8b       	std	Y+21, r24	; 0x15
    4c58:	9e 8b       	std	Y+22, r25	; 0x16
    4c5a:	af 8b       	std	Y+23, r26	; 0x17
    4c5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    4c60:	7e 89       	ldd	r23, Y+22	; 0x16
    4c62:	8f 89       	ldd	r24, Y+23	; 0x17
    4c64:	98 8d       	ldd	r25, Y+24	; 0x18
    4c66:	20 e0       	ldi	r18, 0x00	; 0
    4c68:	30 e0       	ldi	r19, 0x00	; 0
    4c6a:	40 e8       	ldi	r20, 0x80	; 128
    4c6c:	5f e3       	ldi	r21, 0x3F	; 63
    4c6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c72:	88 23       	and	r24, r24
    4c74:	2c f4       	brge	.+10     	; 0x4c80 <main+0x78>
		__ticks = 1;
    4c76:	81 e0       	ldi	r24, 0x01	; 1
    4c78:	90 e0       	ldi	r25, 0x00	; 0
    4c7a:	9c 8b       	std	Y+20, r25	; 0x14
    4c7c:	8b 8b       	std	Y+19, r24	; 0x13
    4c7e:	3f c0       	rjmp	.+126    	; 0x4cfe <main+0xf6>
	else if (__tmp > 65535)
    4c80:	6d 89       	ldd	r22, Y+21	; 0x15
    4c82:	7e 89       	ldd	r23, Y+22	; 0x16
    4c84:	8f 89       	ldd	r24, Y+23	; 0x17
    4c86:	98 8d       	ldd	r25, Y+24	; 0x18
    4c88:	20 e0       	ldi	r18, 0x00	; 0
    4c8a:	3f ef       	ldi	r19, 0xFF	; 255
    4c8c:	4f e7       	ldi	r20, 0x7F	; 127
    4c8e:	57 e4       	ldi	r21, 0x47	; 71
    4c90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c94:	18 16       	cp	r1, r24
    4c96:	4c f5       	brge	.+82     	; 0x4cea <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c98:	69 8d       	ldd	r22, Y+25	; 0x19
    4c9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ca0:	20 e0       	ldi	r18, 0x00	; 0
    4ca2:	30 e0       	ldi	r19, 0x00	; 0
    4ca4:	40 e2       	ldi	r20, 0x20	; 32
    4ca6:	51 e4       	ldi	r21, 0x41	; 65
    4ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cac:	dc 01       	movw	r26, r24
    4cae:	cb 01       	movw	r24, r22
    4cb0:	bc 01       	movw	r22, r24
    4cb2:	cd 01       	movw	r24, r26
    4cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb8:	dc 01       	movw	r26, r24
    4cba:	cb 01       	movw	r24, r22
    4cbc:	9c 8b       	std	Y+20, r25	; 0x14
    4cbe:	8b 8b       	std	Y+19, r24	; 0x13
    4cc0:	0f c0       	rjmp	.+30     	; 0x4ce0 <main+0xd8>
    4cc2:	80 e9       	ldi	r24, 0x90	; 144
    4cc4:	91 e0       	ldi	r25, 0x01	; 1
    4cc6:	9a 8b       	std	Y+18, r25	; 0x12
    4cc8:	89 8b       	std	Y+17, r24	; 0x11
    4cca:	89 89       	ldd	r24, Y+17	; 0x11
    4ccc:	9a 89       	ldd	r25, Y+18	; 0x12
    4cce:	01 97       	sbiw	r24, 0x01	; 1
    4cd0:	f1 f7       	brne	.-4      	; 0x4cce <main+0xc6>
    4cd2:	9a 8b       	std	Y+18, r25	; 0x12
    4cd4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cd6:	8b 89       	ldd	r24, Y+19	; 0x13
    4cd8:	9c 89       	ldd	r25, Y+20	; 0x14
    4cda:	01 97       	sbiw	r24, 0x01	; 1
    4cdc:	9c 8b       	std	Y+20, r25	; 0x14
    4cde:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ce0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ce2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ce4:	00 97       	sbiw	r24, 0x00	; 0
    4ce6:	69 f7       	brne	.-38     	; 0x4cc2 <main+0xba>
    4ce8:	14 c0       	rjmp	.+40     	; 0x4d12 <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cea:	6d 89       	ldd	r22, Y+21	; 0x15
    4cec:	7e 89       	ldd	r23, Y+22	; 0x16
    4cee:	8f 89       	ldd	r24, Y+23	; 0x17
    4cf0:	98 8d       	ldd	r25, Y+24	; 0x18
    4cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf6:	dc 01       	movw	r26, r24
    4cf8:	cb 01       	movw	r24, r22
    4cfa:	9c 8b       	std	Y+20, r25	; 0x14
    4cfc:	8b 8b       	std	Y+19, r24	; 0x13
    4cfe:	8b 89       	ldd	r24, Y+19	; 0x13
    4d00:	9c 89       	ldd	r25, Y+20	; 0x14
    4d02:	98 8b       	std	Y+16, r25	; 0x10
    4d04:	8f 87       	std	Y+15, r24	; 0x0f
    4d06:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d08:	98 89       	ldd	r25, Y+16	; 0x10
    4d0a:	01 97       	sbiw	r24, 0x01	; 1
    4d0c:	f1 f7       	brne	.-4      	; 0x4d0a <main+0x102>
    4d0e:	98 8b       	std	Y+16, r25	; 0x10
    4d10:	8f 87       	std	Y+15, r24	; 0x0f
	while(1){
		_delay_ms(10);
		data=uart_receive();
    4d12:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <uart_receive>
    4d16:	8d 8f       	std	Y+29, r24	; 0x1d
		spi_master_send(data);
    4d18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d1a:	0e 94 92 0a 	call	0x1524	; 0x1524 <spi_master_send>
    4d1e:	80 e0       	ldi	r24, 0x00	; 0
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	a0 e2       	ldi	r26, 0x20	; 32
    4d24:	b1 e4       	ldi	r27, 0x41	; 65
    4d26:	8b 87       	std	Y+11, r24	; 0x0b
    4d28:	9c 87       	std	Y+12, r25	; 0x0c
    4d2a:	ad 87       	std	Y+13, r26	; 0x0d
    4d2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d30:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d32:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d34:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d36:	20 e0       	ldi	r18, 0x00	; 0
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	4a e7       	ldi	r20, 0x7A	; 122
    4d3c:	55 e4       	ldi	r21, 0x45	; 69
    4d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d42:	dc 01       	movw	r26, r24
    4d44:	cb 01       	movw	r24, r22
    4d46:	8f 83       	std	Y+7, r24	; 0x07
    4d48:	98 87       	std	Y+8, r25	; 0x08
    4d4a:	a9 87       	std	Y+9, r26	; 0x09
    4d4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    4d50:	78 85       	ldd	r23, Y+8	; 0x08
    4d52:	89 85       	ldd	r24, Y+9	; 0x09
    4d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d56:	20 e0       	ldi	r18, 0x00	; 0
    4d58:	30 e0       	ldi	r19, 0x00	; 0
    4d5a:	40 e8       	ldi	r20, 0x80	; 128
    4d5c:	5f e3       	ldi	r21, 0x3F	; 63
    4d5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d62:	88 23       	and	r24, r24
    4d64:	2c f4       	brge	.+10     	; 0x4d70 <main+0x168>
		__ticks = 1;
    4d66:	81 e0       	ldi	r24, 0x01	; 1
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	9e 83       	std	Y+6, r25	; 0x06
    4d6c:	8d 83       	std	Y+5, r24	; 0x05
    4d6e:	3f c0       	rjmp	.+126    	; 0x4dee <main+0x1e6>
	else if (__tmp > 65535)
    4d70:	6f 81       	ldd	r22, Y+7	; 0x07
    4d72:	78 85       	ldd	r23, Y+8	; 0x08
    4d74:	89 85       	ldd	r24, Y+9	; 0x09
    4d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d78:	20 e0       	ldi	r18, 0x00	; 0
    4d7a:	3f ef       	ldi	r19, 0xFF	; 255
    4d7c:	4f e7       	ldi	r20, 0x7F	; 127
    4d7e:	57 e4       	ldi	r21, 0x47	; 71
    4d80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d84:	18 16       	cp	r1, r24
    4d86:	4c f5       	brge	.+82     	; 0x4dda <main+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d88:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d90:	20 e0       	ldi	r18, 0x00	; 0
    4d92:	30 e0       	ldi	r19, 0x00	; 0
    4d94:	40 e2       	ldi	r20, 0x20	; 32
    4d96:	51 e4       	ldi	r21, 0x41	; 65
    4d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d9c:	dc 01       	movw	r26, r24
    4d9e:	cb 01       	movw	r24, r22
    4da0:	bc 01       	movw	r22, r24
    4da2:	cd 01       	movw	r24, r26
    4da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da8:	dc 01       	movw	r26, r24
    4daa:	cb 01       	movw	r24, r22
    4dac:	9e 83       	std	Y+6, r25	; 0x06
    4dae:	8d 83       	std	Y+5, r24	; 0x05
    4db0:	0f c0       	rjmp	.+30     	; 0x4dd0 <main+0x1c8>
    4db2:	80 e9       	ldi	r24, 0x90	; 144
    4db4:	91 e0       	ldi	r25, 0x01	; 1
    4db6:	9c 83       	std	Y+4, r25	; 0x04
    4db8:	8b 83       	std	Y+3, r24	; 0x03
    4dba:	8b 81       	ldd	r24, Y+3	; 0x03
    4dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    4dbe:	01 97       	sbiw	r24, 0x01	; 1
    4dc0:	f1 f7       	brne	.-4      	; 0x4dbe <main+0x1b6>
    4dc2:	9c 83       	std	Y+4, r25	; 0x04
    4dc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    4dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dca:	01 97       	sbiw	r24, 0x01	; 1
    4dcc:	9e 83       	std	Y+6, r25	; 0x06
    4dce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4dd4:	00 97       	sbiw	r24, 0x00	; 0
    4dd6:	69 f7       	brne	.-38     	; 0x4db2 <main+0x1aa>
    4dd8:	2a cf       	rjmp	.-428    	; 0x4c2e <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dda:	6f 81       	ldd	r22, Y+7	; 0x07
    4ddc:	78 85       	ldd	r23, Y+8	; 0x08
    4dde:	89 85       	ldd	r24, Y+9	; 0x09
    4de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4de6:	dc 01       	movw	r26, r24
    4de8:	cb 01       	movw	r24, r22
    4dea:	9e 83       	std	Y+6, r25	; 0x06
    4dec:	8d 83       	std	Y+5, r24	; 0x05
    4dee:	8d 81       	ldd	r24, Y+5	; 0x05
    4df0:	9e 81       	ldd	r25, Y+6	; 0x06
    4df2:	9a 83       	std	Y+2, r25	; 0x02
    4df4:	89 83       	std	Y+1, r24	; 0x01
    4df6:	89 81       	ldd	r24, Y+1	; 0x01
    4df8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dfa:	01 97       	sbiw	r24, 0x01	; 1
    4dfc:	f1 f7       	brne	.-4      	; 0x4dfa <main+0x1f2>
    4dfe:	9a 83       	std	Y+2, r25	; 0x02
    4e00:	89 83       	std	Y+1, r24	; 0x01
    4e02:	15 cf       	rjmp	.-470    	; 0x4c2e <main+0x26>

00004e04 <__udivmodqi4>:
    4e04:	99 1b       	sub	r25, r25
    4e06:	79 e0       	ldi	r23, 0x09	; 9
    4e08:	04 c0       	rjmp	.+8      	; 0x4e12 <__udivmodqi4_ep>

00004e0a <__udivmodqi4_loop>:
    4e0a:	99 1f       	adc	r25, r25
    4e0c:	96 17       	cp	r25, r22
    4e0e:	08 f0       	brcs	.+2      	; 0x4e12 <__udivmodqi4_ep>
    4e10:	96 1b       	sub	r25, r22

00004e12 <__udivmodqi4_ep>:
    4e12:	88 1f       	adc	r24, r24
    4e14:	7a 95       	dec	r23
    4e16:	c9 f7       	brne	.-14     	; 0x4e0a <__udivmodqi4_loop>
    4e18:	80 95       	com	r24
    4e1a:	08 95       	ret

00004e1c <__prologue_saves__>:
    4e1c:	2f 92       	push	r2
    4e1e:	3f 92       	push	r3
    4e20:	4f 92       	push	r4
    4e22:	5f 92       	push	r5
    4e24:	6f 92       	push	r6
    4e26:	7f 92       	push	r7
    4e28:	8f 92       	push	r8
    4e2a:	9f 92       	push	r9
    4e2c:	af 92       	push	r10
    4e2e:	bf 92       	push	r11
    4e30:	cf 92       	push	r12
    4e32:	df 92       	push	r13
    4e34:	ef 92       	push	r14
    4e36:	ff 92       	push	r15
    4e38:	0f 93       	push	r16
    4e3a:	1f 93       	push	r17
    4e3c:	cf 93       	push	r28
    4e3e:	df 93       	push	r29
    4e40:	cd b7       	in	r28, 0x3d	; 61
    4e42:	de b7       	in	r29, 0x3e	; 62
    4e44:	ca 1b       	sub	r28, r26
    4e46:	db 0b       	sbc	r29, r27
    4e48:	0f b6       	in	r0, 0x3f	; 63
    4e4a:	f8 94       	cli
    4e4c:	de bf       	out	0x3e, r29	; 62
    4e4e:	0f be       	out	0x3f, r0	; 63
    4e50:	cd bf       	out	0x3d, r28	; 61
    4e52:	09 94       	ijmp

00004e54 <__epilogue_restores__>:
    4e54:	2a 88       	ldd	r2, Y+18	; 0x12
    4e56:	39 88       	ldd	r3, Y+17	; 0x11
    4e58:	48 88       	ldd	r4, Y+16	; 0x10
    4e5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e60:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e62:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e64:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e66:	b9 84       	ldd	r11, Y+9	; 0x09
    4e68:	c8 84       	ldd	r12, Y+8	; 0x08
    4e6a:	df 80       	ldd	r13, Y+7	; 0x07
    4e6c:	ee 80       	ldd	r14, Y+6	; 0x06
    4e6e:	fd 80       	ldd	r15, Y+5	; 0x05
    4e70:	0c 81       	ldd	r16, Y+4	; 0x04
    4e72:	1b 81       	ldd	r17, Y+3	; 0x03
    4e74:	aa 81       	ldd	r26, Y+2	; 0x02
    4e76:	b9 81       	ldd	r27, Y+1	; 0x01
    4e78:	ce 0f       	add	r28, r30
    4e7a:	d1 1d       	adc	r29, r1
    4e7c:	0f b6       	in	r0, 0x3f	; 63
    4e7e:	f8 94       	cli
    4e80:	de bf       	out	0x3e, r29	; 62
    4e82:	0f be       	out	0x3f, r0	; 63
    4e84:	cd bf       	out	0x3d, r28	; 61
    4e86:	ed 01       	movw	r28, r26
    4e88:	08 95       	ret

00004e8a <__udivmodhi4>:
    4e8a:	aa 1b       	sub	r26, r26
    4e8c:	bb 1b       	sub	r27, r27
    4e8e:	51 e1       	ldi	r21, 0x11	; 17
    4e90:	07 c0       	rjmp	.+14     	; 0x4ea0 <__udivmodhi4_ep>

00004e92 <__udivmodhi4_loop>:
    4e92:	aa 1f       	adc	r26, r26
    4e94:	bb 1f       	adc	r27, r27
    4e96:	a6 17       	cp	r26, r22
    4e98:	b7 07       	cpc	r27, r23
    4e9a:	10 f0       	brcs	.+4      	; 0x4ea0 <__udivmodhi4_ep>
    4e9c:	a6 1b       	sub	r26, r22
    4e9e:	b7 0b       	sbc	r27, r23

00004ea0 <__udivmodhi4_ep>:
    4ea0:	88 1f       	adc	r24, r24
    4ea2:	99 1f       	adc	r25, r25
    4ea4:	5a 95       	dec	r21
    4ea6:	a9 f7       	brne	.-22     	; 0x4e92 <__udivmodhi4_loop>
    4ea8:	80 95       	com	r24
    4eaa:	90 95       	com	r25
    4eac:	bc 01       	movw	r22, r24
    4eae:	cd 01       	movw	r24, r26
    4eb0:	08 95       	ret

00004eb2 <_exit>:
    4eb2:	f8 94       	cli

00004eb4 <__stop_program>:
    4eb4:	ff cf       	rjmp	.-2      	; 0x4eb4 <__stop_program>
