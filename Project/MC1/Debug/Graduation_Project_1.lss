
Graduation_Project_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00004afe  00004b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080007c  0080007c  00004bae  2**0
                  ALLOC
  3 .stab         000043c8  00000000  00000000  00004bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d16  00000000  00000000  00008f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__vector_1>
       8:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__vector_2>
       c:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_3>
      10:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__vector_4>
      14:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__vector_10>
      2c:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__vector_11>
      30:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__vector_12>
      34:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 24 	call	0x48e4	; 0x48e4 <main>
      8a:	0c 94 7d 25 	jmp	0x4afa	; 0x4afa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4e 25 	jmp	0x4a9c	; 0x4a9c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4e 25 	jmp	0x4a9c	; 0x4a9c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3a 25 	jmp	0x4a74	; 0x4a74 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 56 25 	jmp	0x4aac	; 0x4aac <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 42 25 	jmp	0x4a84	; 0x4a84 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5e 25 	jmp	0x4abc	; 0x4abc <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <itoa>:
     c9e:	fb 01       	movw	r30, r22
     ca0:	9f 01       	movw	r18, r30
     ca2:	e8 94       	clt
     ca4:	42 30       	cpi	r20, 0x02	; 2
     ca6:	c4 f0       	brlt	.+48     	; 0xcd8 <itoa+0x3a>
     ca8:	45 32       	cpi	r20, 0x25	; 37
     caa:	b4 f4       	brge	.+44     	; 0xcd8 <itoa+0x3a>
     cac:	4a 30       	cpi	r20, 0x0A	; 10
     cae:	29 f4       	brne	.+10     	; 0xcba <itoa+0x1c>
     cb0:	97 fb       	bst	r25, 7
     cb2:	1e f4       	brtc	.+6      	; 0xcba <itoa+0x1c>
     cb4:	90 95       	com	r25
     cb6:	81 95       	neg	r24
     cb8:	9f 4f       	sbci	r25, 0xFF	; 255
     cba:	64 2f       	mov	r22, r20
     cbc:	77 27       	eor	r23, r23
     cbe:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__udivmodhi4>
     cc2:	80 5d       	subi	r24, 0xD0	; 208
     cc4:	8a 33       	cpi	r24, 0x3A	; 58
     cc6:	0c f0       	brlt	.+2      	; 0xcca <itoa+0x2c>
     cc8:	89 5d       	subi	r24, 0xD9	; 217
     cca:	81 93       	st	Z+, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	a1 f7       	brne	.-24     	; 0xcba <itoa+0x1c>
     cd2:	16 f4       	brtc	.+4      	; 0xcd8 <itoa+0x3a>
     cd4:	5d e2       	ldi	r21, 0x2D	; 45
     cd6:	51 93       	st	Z+, r21
     cd8:	10 82       	st	Z, r1
     cda:	c9 01       	movw	r24, r18
     cdc:	0c 94 70 06 	jmp	0xce0	; 0xce0 <strrev>

00000ce0 <strrev>:
     ce0:	dc 01       	movw	r26, r24
     ce2:	fc 01       	movw	r30, r24
     ce4:	67 2f       	mov	r22, r23
     ce6:	71 91       	ld	r23, Z+
     ce8:	77 23       	and	r23, r23
     cea:	e1 f7       	brne	.-8      	; 0xce4 <strrev+0x4>
     cec:	32 97       	sbiw	r30, 0x02	; 2
     cee:	04 c0       	rjmp	.+8      	; 0xcf8 <strrev+0x18>
     cf0:	7c 91       	ld	r23, X
     cf2:	6d 93       	st	X+, r22
     cf4:	70 83       	st	Z, r23
     cf6:	62 91       	ld	r22, -Z
     cf8:	ae 17       	cp	r26, r30
     cfa:	bf 07       	cpc	r27, r31
     cfc:	c8 f3       	brcs	.-14     	; 0xcf0 <strrev+0x10>
     cfe:	08 95       	ret

00000d00 <uart_init>:
#include "uart.h"

void (*ptftx)(void);
void (*ptfrx)(void);

void uart_init(void) {
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
#if uart_type == Asynchronous
	UCSRC |= ((1 << URSEL) & ~(1 << UMSEL));
     d08:	a0 e4       	ldi	r26, 0x40	; 64
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e0 e4       	ldi	r30, 0x40	; 64
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
#elif uart_type == Synchronous
	UCSRC|= ((1<<URSEL) | (1<<UMSEL));
#endif

#if Parity_Mode == Disabled
	UCSRC |= ((1 << URSEL) & ~(1 << UPM1) & ~(1 << UPM0));
     d16:	a0 e4       	ldi	r26, 0x40	; 64
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e0 e4       	ldi	r30, 0x40	; 64
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 68       	ori	r24, 0x80	; 128
     d22:	8c 93       	st	X, r24
#elif Parity_Mode == Odd_Parity
	UCSRC |= ((1 << URSEL) | (1 << UPM1) | (1 << UPM0));
#endif

#if Stop_Bit == one_bit
	UCSRC |= ((1 << URSEL) & ~(1 << USBS));
     d24:	a0 e4       	ldi	r26, 0x40	; 64
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e0 e4       	ldi	r30, 0x40	; 64
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	80 68       	ori	r24, 0x80	; 128
     d30:	8c 93       	st	X, r24
#elif Stop_Bit == two_bit
	UCSRC |= ((1 << URSEL) | (1 << USBS));
#endif

#if uart_speed == normal_speed && Baud_Rate == 9600
	CLEAR_BIT(UCSRA, U2X);
     d32:	ab e2       	ldi	r26, 0x2B	; 43
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	eb e2       	ldi	r30, 0x2B	; 43
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8d 7f       	andi	r24, 0xFD	; 253
     d3e:	8c 93       	st	X, r24
	UBRRL = 103;
     d40:	e9 e2       	ldi	r30, 0x29	; 41
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	87 e6       	ldi	r24, 0x67	; 103
     d46:	80 83       	st	Z, r24
	SET_BIT(UCSRA,U2X);
	UBRRL=16;
#endif

#if Stop_Bit == one_bit
	UCSRC |= ((1 << URSEL) & ~(1 << USBS));
     d48:	a0 e4       	ldi	r26, 0x40	; 64
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e0 e4       	ldi	r30, 0x40	; 64
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 68       	ori	r24, 0x80	; 128
     d54:	8c 93       	st	X, r24
#elif Stop_Bit == two_bit
	UCSRC |= ((1 << URSEL) | (1 << USBS));
#endif

#if Transmitter
	SET_BIT(UCSRB, TXEN);
     d56:	aa e2       	ldi	r26, 0x2A	; 42
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	ea e2       	ldi	r30, 0x2A	; 42
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	88 60       	ori	r24, 0x08	; 8
     d62:	8c 93       	st	X, r24
#else
	CLEAR_BIT(UCSRB,TXEN);
#endif

#if Receiver
	SET_BIT(UCSRB, RXEN);
     d64:	aa e2       	ldi	r26, 0x2A	; 42
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	ea e2       	ldi	r30, 0x2A	; 42
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 61       	ori	r24, 0x10	; 16
     d70:	8c 93       	st	X, r24
#endif

#if TX_interrupt
	SET_BIT(UCSRB, TXCIE);
#else
	CLEAR_BIT(UCSRB,TXCIE);
     d72:	aa e2       	ldi	r26, 0x2A	; 42
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ea e2       	ldi	r30, 0x2A	; 42
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	8f 7b       	andi	r24, 0xBF	; 191
     d7e:	8c 93       	st	X, r24
#endif

#if RX_interrupt
	SET_BIT(UCSRB, RXCIE);
#else
	CLEAR_BIT(UCSRB,RXCIE);
     d80:	aa e2       	ldi	r26, 0x2A	; 42
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	ea e2       	ldi	r30, 0x2A	; 42
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	8f 77       	andi	r24, 0x7F	; 127
     d8c:	8c 93       	st	X, r24
	UCSRC |= ((1 << URSEL) & ~(1 << UCSZ1) | (1 << UCSZ0));
#elif Character_Size == seven_bit
	CLEAR_BIT(UCSRB,UCSZ2);
	UCSRC |= ((1 << URSEL) & ~(1 << UCSZ1) & ~(1 << UCSZ0));
#elif Character_Size == eight_bit
	CLEAR_BIT(UCSRB, UCSZ2);
     d8e:	aa e2       	ldi	r26, 0x2A	; 42
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ea e2       	ldi	r30, 0x2A	; 42
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8b 7f       	andi	r24, 0xFB	; 251
     d9a:	8c 93       	st	X, r24
	UCSRC |= ((1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0));
     d9c:	a0 e4       	ldi	r26, 0x40	; 64
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e0 e4       	ldi	r30, 0x40	; 64
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	86 68       	ori	r24, 0x86	; 134
     da8:	8c 93       	st	X, r24
#elif Character_Size == nine_bit
	SET_BIT(UCSRB,UCSZ2);
	UCSRC |= ((1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0));
#endif
}
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <uart_transmit>:

void uart_transmit(uint8 data)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	0f 92       	push	r0
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSRA & (1<<UDRE)) );
     dbc:	eb e2       	ldi	r30, 0x2B	; 43
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	80 72       	andi	r24, 0x20	; 32
     dc8:	90 70       	andi	r25, 0x00	; 0
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	b9 f3       	breq	.-18     	; 0xdbc <uart_transmit+0xc>
	UDR=data;
     dce:	ec e2       	ldi	r30, 0x2C	; 44
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	80 83       	st	Z, r24
}
     dd6:	0f 90       	pop	r0
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	08 95       	ret

00000dde <uart_transmit_data>:

void uart_transmit_data(uint8 *data)
{
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	00 d0       	rcall	.+0      	; 0xde4 <uart_transmit_data+0x6>
     de4:	0f 92       	push	r0
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	9b 83       	std	Y+3, r25	; 0x03
     dec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     dee:	19 82       	std	Y+1, r1	; 0x01
     df0:	18 c0       	rjmp	.+48     	; 0xe22 <uart_transmit_data+0x44>
	while(data[i]!='\n'){
		while ( !( UCSRA & (1<<UDRE)) );
     df2:	eb e2       	ldi	r30, 0x2B	; 43
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	80 72       	andi	r24, 0x20	; 32
     dfe:	90 70       	andi	r25, 0x00	; 0
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	b9 f3       	breq	.-18     	; 0xdf2 <uart_transmit_data+0x14>
		UDR=data[i];
     e04:	ac e2       	ldi	r26, 0x2C	; 44
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	9b 81       	ldd	r25, Y+3	; 0x03
     e12:	fc 01       	movw	r30, r24
     e14:	e2 0f       	add	r30, r18
     e16:	f3 1f       	adc	r31, r19
     e18:	80 81       	ld	r24, Z
     e1a:	8c 93       	st	X, r24
		i++;
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	8f 5f       	subi	r24, 0xFF	; 255
     e20:	89 83       	std	Y+1, r24	; 0x01
}

void uart_transmit_data(uint8 *data)
{
	uint8 i=0;
	while(data[i]!='\n'){
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	9b 81       	ldd	r25, Y+3	; 0x03
     e2c:	fc 01       	movw	r30, r24
     e2e:	e2 0f       	add	r30, r18
     e30:	f3 1f       	adc	r31, r19
     e32:	80 81       	ld	r24, Z
     e34:	8a 30       	cpi	r24, 0x0A	; 10
     e36:	e9 f6       	brne	.-70     	; 0xdf2 <uart_transmit_data+0x14>
		while ( !( UCSRA & (1<<UDRE)) );
		UDR=data[i];
		i++;
	}

}
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <uart_receive>:

uint8 uart_receive(void)
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
	while ( !(UCSRA & (1<<RXC)) );
     e4c:	eb e2       	ldi	r30, 0x2B	; 43
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	88 23       	and	r24, r24
     e54:	dc f7       	brge	.-10     	; 0xe4c <uart_receive+0x8>
	return UDR;
     e56:	ec e2       	ldi	r30, 0x2C	; 44
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
}
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <call_back_tx>:

void call_back_tx(void (*callback)(void)) {
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	00 d0       	rcall	.+0      	; 0xe68 <call_back_tx+0x6>
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
	ptftx = callback;
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	90 93 7f 00 	sts	0x007F, r25
     e78:	80 93 7e 00 	sts	0x007E, r24
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <call_back_rx>:

void call_back_rx(void (*callback)(void)) {
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <call_back_rx+0x6>
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01
	ptfrx = callback;
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	9a 81       	ldd	r25, Y+2	; 0x02
     e98:	90 93 7d 00 	sts	0x007D, r25
     e9c:	80 93 7c 00 	sts	0x007C, r24
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <__vector_15>:

ISR(USART_TXC_vect) {
     eaa:	1f 92       	push	r1
     eac:	0f 92       	push	r0
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	0f 92       	push	r0
     eb2:	11 24       	eor	r1, r1
     eb4:	2f 93       	push	r18
     eb6:	3f 93       	push	r19
     eb8:	4f 93       	push	r20
     eba:	5f 93       	push	r21
     ebc:	6f 93       	push	r22
     ebe:	7f 93       	push	r23
     ec0:	8f 93       	push	r24
     ec2:	9f 93       	push	r25
     ec4:	af 93       	push	r26
     ec6:	bf 93       	push	r27
     ec8:	ef 93       	push	r30
     eca:	ff 93       	push	r31
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	ptftx();
     ed4:	e0 91 7e 00 	lds	r30, 0x007E
     ed8:	f0 91 7f 00 	lds	r31, 0x007F
     edc:	09 95       	icall
}
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	ff 91       	pop	r31
     ee4:	ef 91       	pop	r30
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	0f 90       	pop	r0
     f00:	1f 90       	pop	r1
     f02:	18 95       	reti

00000f04 <__vector_13>:

ISR(USART_RXC_vect) {
     f04:	1f 92       	push	r1
     f06:	0f 92       	push	r0
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	0f 92       	push	r0
     f0c:	11 24       	eor	r1, r1
     f0e:	2f 93       	push	r18
     f10:	3f 93       	push	r19
     f12:	4f 93       	push	r20
     f14:	5f 93       	push	r21
     f16:	6f 93       	push	r22
     f18:	7f 93       	push	r23
     f1a:	8f 93       	push	r24
     f1c:	9f 93       	push	r25
     f1e:	af 93       	push	r26
     f20:	bf 93       	push	r27
     f22:	ef 93       	push	r30
     f24:	ff 93       	push	r31
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
	ptfrx();
     f2e:	e0 91 7c 00 	lds	r30, 0x007C
     f32:	f0 91 7d 00 	lds	r31, 0x007D
     f36:	09 95       	icall
}
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	ff 91       	pop	r31
     f3e:	ef 91       	pop	r30
     f40:	bf 91       	pop	r27
     f42:	af 91       	pop	r26
     f44:	9f 91       	pop	r25
     f46:	8f 91       	pop	r24
     f48:	7f 91       	pop	r23
     f4a:	6f 91       	pop	r22
     f4c:	5f 91       	pop	r21
     f4e:	4f 91       	pop	r20
     f50:	3f 91       	pop	r19
     f52:	2f 91       	pop	r18
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	0f 90       	pop	r0
     f5a:	1f 90       	pop	r1
     f5c:	18 95       	reti

00000f5e <timer0_init>:
void (*ptf_t2_OVF)(void);
void (*ptf_t2_OCF)(void);

//timer0 initialization
void timer0_init(void)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62

	TCCR0|=timer0_prescaler_mode;
     f66:	a3 e5       	ldi	r26, 0x53	; 83
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e3 e5       	ldi	r30, 0x53	; 83
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	85 60       	ori	r24, 0x05	; 5
     f72:	8c 93       	st	X, r24

	TCNT0=TIMER0_init_val;
     f74:	e2 e5       	ldi	r30, 0x52	; 82
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	10 82       	st	Z, r1
//	OCR0=TIMER0_OCR_val;

#if timer0_OV_interrupt
	SET_BIT(TIMSK,TOIE0);
     f7a:	a9 e5       	ldi	r26, 0x59	; 89
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e9 e5       	ldi	r30, 0x59	; 89
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	81 60       	ori	r24, 0x01	; 1
     f86:	8c 93       	st	X, r24
#endif

#if timer0_OC_interrupt
	SET_BIT(TIMSK,OCIE0);
#else
	CLEAR_BIT(TIMSK,OCIE0);
     f88:	a9 e5       	ldi	r26, 0x59	; 89
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e9 e5       	ldi	r30, 0x59	; 89
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8d 7f       	andi	r24, 0xFD	; 253
     f94:	8c 93       	st	X, r24
#endif

#if timer0_mode == normal
	CLEAR_BIT(TCCR0,WGM00);
     f96:	a3 e5       	ldi	r26, 0x53	; 83
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e3 e5       	ldi	r30, 0x53	; 83
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 7b       	andi	r24, 0xBF	; 191
     fa2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,WGM01);
     fa4:	a3 e5       	ldi	r26, 0x53	; 83
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e3 e5       	ldi	r30, 0x53	; 83
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	87 7f       	andi	r24, 0xF7	; 247
     fb0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM00);
	SET_BIT(TCCR0,WGM01);
#endif

#if timer0_match_output == disconnected
	CLEAR_BIT(TCCR0,COM00);
     fb2:	a3 e5       	ldi	r26, 0x53	; 83
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e3 e5       	ldi	r30, 0x53	; 83
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8f 7e       	andi	r24, 0xEF	; 239
     fbe:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,COM01);
     fc0:	a3 e5       	ldi	r26, 0x53	; 83
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e3 e5       	ldi	r30, 0x53	; 83
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8f 7d       	andi	r24, 0xDF	; 223
     fcc:	8c 93       	st	X, r24
#elif timer0_match_output == set
	SET_BIT(TCCR0,COM00);
	SET_BIT(TCCR0,COM01);
#endif

}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <timer2_init>:

//timer2 initialization
void timer2_init(void)
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62

	TCCR2|=timer0_prescaler_mode;
     fdc:	a5 e4       	ldi	r26, 0x45	; 69
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e5 e4       	ldi	r30, 0x45	; 69
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	85 60       	ori	r24, 0x05	; 5
     fe8:	8c 93       	st	X, r24

	TCNT2=TIMER0_init_val;
     fea:	e4 e4       	ldi	r30, 0x44	; 68
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	10 82       	st	Z, r1
//	OCR2=TIMER0_OCR_val;

#if timer2_OV_interrupt
	SET_BIT(TIMSK,TOIE2);
#else
	CLEAR_BIT(TIMSK,TOIE2);
     ff0:	a9 e5       	ldi	r26, 0x59	; 89
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e9 e5       	ldi	r30, 0x59	; 89
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8f 7b       	andi	r24, 0xBF	; 191
     ffc:	8c 93       	st	X, r24
#endif

#if timer2_OC_interrupt
	SET_BIT(TIMSK,OCIE2);
#else
	CLEAR_BIT(TIMSK,OCIE2);
     ffe:	a9 e5       	ldi	r26, 0x59	; 89
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e9 e5       	ldi	r30, 0x59	; 89
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8f 77       	andi	r24, 0x7F	; 127
    100a:	8c 93       	st	X, r24
#endif

#if timer2_mode == normal
	CLEAR_BIT(TCCR0,WGM20);
    100c:	a3 e5       	ldi	r26, 0x53	; 83
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e3 e5       	ldi	r30, 0x53	; 83
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	8f 7b       	andi	r24, 0xBF	; 191
    1018:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,WGM21);
    101a:	a3 e5       	ldi	r26, 0x53	; 83
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e3 e5       	ldi	r30, 0x53	; 83
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	87 7f       	andi	r24, 0xF7	; 247
    1026:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM20);
	SET_BIT(TCCR0,WGM21);
#endif

#if timer2_match_output == disconnected
	CLEAR_BIT(TCCR0,COM20);
    1028:	a3 e5       	ldi	r26, 0x53	; 83
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e3 e5       	ldi	r30, 0x53	; 83
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8f 7e       	andi	r24, 0xEF	; 239
    1034:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,COM21);
    1036:	a3 e5       	ldi	r26, 0x53	; 83
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e3 e5       	ldi	r30, 0x53	; 83
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8f 7d       	andi	r24, 0xDF	; 223
    1042:	8c 93       	st	X, r24
#elif timer2_match_output == set
	SET_BIT(TCCR0,COM20);
	SET_BIT(TCCR0,COM21);
#endif

}
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <setcallback_T0_TOV>:

//callback function for overflow of timer0
void setcallback_T0_TOV(void (*ptf)(void))
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <setcallback_T0_TOV+0x6>
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	9a 83       	std	Y+2, r25	; 0x02
    1056:	89 83       	std	Y+1, r24	; 0x01
	ptf_t0_OVF=ptf;
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	90 93 81 00 	sts	0x0081, r25
    1060:	80 93 80 00 	sts	0x0080, r24
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <setcallback_T0_OCF>:

//callback function for compare match of timer0
void setcallback_T0_OCF(void (*ptf)(void))
{
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	00 d0       	rcall	.+0      	; 0x1074 <setcallback_T0_OCF+0x6>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
	ptf_t0_OCF=ptf;
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	90 93 85 00 	sts	0x0085, r25
    1084:	80 93 84 00 	sts	0x0084, r24
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <setcallback_T2_TOV>:

//callback function for overflow of timer2
void setcallback_T2_TOV(void (*ptf)(void))
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <setcallback_T2_TOV+0x6>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	9a 83       	std	Y+2, r25	; 0x02
    109e:	89 83       	std	Y+1, r24	; 0x01
	ptf_t2_OVF=ptf;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	90 93 83 00 	sts	0x0083, r25
    10a8:	80 93 82 00 	sts	0x0082, r24
}
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <setcallback_T2_OCF>:

//callback function for compare match of timer2
void setcallback_T2_OCF(void (*ptf)(void))
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <setcallback_T2_OCF+0x6>
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	89 83       	std	Y+1, r24	; 0x01
	ptf_t2_OCF=ptf;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	90 93 87 00 	sts	0x0087, r25
    10cc:	80 93 86 00 	sts	0x0086, r24
}
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    10da:	1f 92       	push	r1
    10dc:	0f 92       	push	r0
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	0f 92       	push	r0
    10e2:	11 24       	eor	r1, r1
    10e4:	2f 93       	push	r18
    10e6:	3f 93       	push	r19
    10e8:	4f 93       	push	r20
    10ea:	5f 93       	push	r21
    10ec:	6f 93       	push	r22
    10ee:	7f 93       	push	r23
    10f0:	8f 93       	push	r24
    10f2:	9f 93       	push	r25
    10f4:	af 93       	push	r26
    10f6:	bf 93       	push	r27
    10f8:	ef 93       	push	r30
    10fa:	ff 93       	push	r31
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
	ptf_t0_OVF();
    1104:	e0 91 80 00 	lds	r30, 0x0080
    1108:	f0 91 81 00 	lds	r31, 0x0081
    110c:	09 95       	icall
}
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	ff 91       	pop	r31
    1114:	ef 91       	pop	r30
    1116:	bf 91       	pop	r27
    1118:	af 91       	pop	r26
    111a:	9f 91       	pop	r25
    111c:	8f 91       	pop	r24
    111e:	7f 91       	pop	r23
    1120:	6f 91       	pop	r22
    1122:	5f 91       	pop	r21
    1124:	4f 91       	pop	r20
    1126:	3f 91       	pop	r19
    1128:	2f 91       	pop	r18
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	0f 90       	pop	r0
    1130:	1f 90       	pop	r1
    1132:	18 95       	reti

00001134 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1134:	1f 92       	push	r1
    1136:	0f 92       	push	r0
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	0f 92       	push	r0
    113c:	11 24       	eor	r1, r1
    113e:	2f 93       	push	r18
    1140:	3f 93       	push	r19
    1142:	4f 93       	push	r20
    1144:	5f 93       	push	r21
    1146:	6f 93       	push	r22
    1148:	7f 93       	push	r23
    114a:	8f 93       	push	r24
    114c:	9f 93       	push	r25
    114e:	af 93       	push	r26
    1150:	bf 93       	push	r27
    1152:	ef 93       	push	r30
    1154:	ff 93       	push	r31
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
	ptf_t0_OCF();
    115e:	e0 91 84 00 	lds	r30, 0x0084
    1162:	f0 91 85 00 	lds	r31, 0x0085
    1166:	09 95       	icall
}
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	ff 91       	pop	r31
    116e:	ef 91       	pop	r30
    1170:	bf 91       	pop	r27
    1172:	af 91       	pop	r26
    1174:	9f 91       	pop	r25
    1176:	8f 91       	pop	r24
    1178:	7f 91       	pop	r23
    117a:	6f 91       	pop	r22
    117c:	5f 91       	pop	r21
    117e:	4f 91       	pop	r20
    1180:	3f 91       	pop	r19
    1182:	2f 91       	pop	r18
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti

0000118e <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    118e:	1f 92       	push	r1
    1190:	0f 92       	push	r0
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	0f 92       	push	r0
    1196:	11 24       	eor	r1, r1
    1198:	2f 93       	push	r18
    119a:	3f 93       	push	r19
    119c:	4f 93       	push	r20
    119e:	5f 93       	push	r21
    11a0:	6f 93       	push	r22
    11a2:	7f 93       	push	r23
    11a4:	8f 93       	push	r24
    11a6:	9f 93       	push	r25
    11a8:	af 93       	push	r26
    11aa:	bf 93       	push	r27
    11ac:	ef 93       	push	r30
    11ae:	ff 93       	push	r31
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	ptf_t2_OVF();
    11b8:	e0 91 82 00 	lds	r30, 0x0082
    11bc:	f0 91 83 00 	lds	r31, 0x0083
    11c0:	09 95       	icall
}
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	ff 91       	pop	r31
    11c8:	ef 91       	pop	r30
    11ca:	bf 91       	pop	r27
    11cc:	af 91       	pop	r26
    11ce:	9f 91       	pop	r25
    11d0:	8f 91       	pop	r24
    11d2:	7f 91       	pop	r23
    11d4:	6f 91       	pop	r22
    11d6:	5f 91       	pop	r21
    11d8:	4f 91       	pop	r20
    11da:	3f 91       	pop	r19
    11dc:	2f 91       	pop	r18
    11de:	0f 90       	pop	r0
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	0f 90       	pop	r0
    11e4:	1f 90       	pop	r1
    11e6:	18 95       	reti

000011e8 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    11e8:	1f 92       	push	r1
    11ea:	0f 92       	push	r0
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	0f 92       	push	r0
    11f0:	11 24       	eor	r1, r1
    11f2:	2f 93       	push	r18
    11f4:	3f 93       	push	r19
    11f6:	4f 93       	push	r20
    11f8:	5f 93       	push	r21
    11fa:	6f 93       	push	r22
    11fc:	7f 93       	push	r23
    11fe:	8f 93       	push	r24
    1200:	9f 93       	push	r25
    1202:	af 93       	push	r26
    1204:	bf 93       	push	r27
    1206:	ef 93       	push	r30
    1208:	ff 93       	push	r31
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
	ptf_t2_OCF();
    1212:	e0 91 86 00 	lds	r30, 0x0086
    1216:	f0 91 87 00 	lds	r31, 0x0087
    121a:	09 95       	icall
}
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	ff 91       	pop	r31
    1222:	ef 91       	pop	r30
    1224:	bf 91       	pop	r27
    1226:	af 91       	pop	r26
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	7f 91       	pop	r23
    122e:	6f 91       	pop	r22
    1230:	5f 91       	pop	r21
    1232:	4f 91       	pop	r20
    1234:	3f 91       	pop	r19
    1236:	2f 91       	pop	r18
    1238:	0f 90       	pop	r0
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	0f 90       	pop	r0
    123e:	1f 90       	pop	r1
    1240:	18 95       	reti

00001242 <spi_master_init>:

#include "spi.h"

void (*ptfspi)(void);

void spi_master_init(void) {
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB, 5);
    124a:	a7 e3       	ldi	r26, 0x37	; 55
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e7 e3       	ldi	r30, 0x37	; 55
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	80 62       	ori	r24, 0x20	; 32
    1256:	8c 93       	st	X, r24
	SET_BIT(DDRB, 7);
    1258:	a7 e3       	ldi	r26, 0x37	; 55
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e7 e3       	ldi	r30, 0x37	; 55
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	80 68       	ori	r24, 0x80	; 128
    1264:	8c 93       	st	X, r24
	SET_BIT(DDRB, 4);
    1266:	a7 e3       	ldi	r26, 0x37	; 55
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e7 e3       	ldi	r30, 0x37	; 55
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	80 61       	ori	r24, 0x10	; 16
    1272:	8c 93       	st	X, r24
	CLEAR_BIT(DDRB, 6);
    1274:	a7 e3       	ldi	r26, 0x37	; 55
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e7 e3       	ldi	r30, 0x37	; 55
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	8f 7b       	andi	r24, 0xBF	; 191
    1280:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, 4);
    1282:	a8 e3       	ldi	r26, 0x38	; 56
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e8 e3       	ldi	r30, 0x38	; 56
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	8f 7e       	andi	r24, 0xEF	; 239
    128e:	8c 93       	st	X, r24
	SET_BIT(SPCR, MSTR);
    1290:	ad e2       	ldi	r26, 0x2D	; 45
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	ed e2       	ldi	r30, 0x2D	; 45
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	80 61       	ori	r24, 0x10	; 16
    129c:	8c 93       	st	X, r24
	SPCR |= SPI_Clock_Rate;
    129e:	ad e2       	ldi	r26, 0x2D	; 45
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	ed e2       	ldi	r30, 0x2D	; 45
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	81 60       	ori	r24, 0x01	; 1
    12aa:	8c 93       	st	X, r24

#if spi_interrupt == enable
	SET_BIT(SPCR,SPIE);
#else
	CLEAR_BIT(SPCR, SPIE);
    12ac:	ad e2       	ldi	r26, 0x2D	; 45
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	ed e2       	ldi	r30, 0x2D	; 45
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	8f 77       	andi	r24, 0x7F	; 127
    12b8:	8c 93       	st	X, r24
#endif

#if spi_enable == enable
	SET_BIT(SPCR, SPE);
    12ba:	ad e2       	ldi	r26, 0x2D	; 45
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	ed e2       	ldi	r30, 0x2D	; 45
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	80 64       	ori	r24, 0x40	; 64
    12c6:	8c 93       	st	X, r24
#elif spi_enable == disable
	SET_BIT(SPCR,SPE);
#endif

#if Data_Order == MSB
	SET_BIT(SPCR, DORD);
    12c8:	ad e2       	ldi	r26, 0x2D	; 45
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	ed e2       	ldi	r30, 0x2D	; 45
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	80 62       	ori	r24, 0x20	; 32
    12d4:	8c 93       	st	X, r24
#elif Data_Order == LSB
	SET_BIT(SPCR,DORD);
#endif

#if Clock_Phase == leading
	CLEAR_BIT(SPCR, CPHA);
    12d6:	ad e2       	ldi	r26, 0x2D	; 45
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	ed e2       	ldi	r30, 0x2D	; 45
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8b 7f       	andi	r24, 0xFB	; 251
    12e2:	8c 93       	st	X, r24
#elif Clock_Phase == trailing
	SET_BIT(SPCR,CPHA);
#endif

#if SPI_Speed == normal_speed
	CLEAR_BIT(SPSR, SPI2X);
    12e4:	ae e2       	ldi	r26, 0x2E	; 46
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	ee e2       	ldi	r30, 0x2E	; 46
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	8e 7f       	andi	r24, 0xFE	; 254
    12f0:	8c 93       	st	X, r24
#elif SPI_Speed == double_speed
	SET_BIT(SPSR,SPI2X);
#endif

}
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <spi_slave_init>:

void spi_slave_init(void) {
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(DDRB, 5);
    1300:	a7 e3       	ldi	r26, 0x37	; 55
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e7 e3       	ldi	r30, 0x37	; 55
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8f 7d       	andi	r24, 0xDF	; 223
    130c:	8c 93       	st	X, r24
	CLEAR_BIT(DDRB, 7);
    130e:	a7 e3       	ldi	r26, 0x37	; 55
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e7 e3       	ldi	r30, 0x37	; 55
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8f 77       	andi	r24, 0x7F	; 127
    131a:	8c 93       	st	X, r24
	CLEAR_BIT(DDRB, 4);
    131c:	a7 e3       	ldi	r26, 0x37	; 55
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e7 e3       	ldi	r30, 0x37	; 55
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	8f 7e       	andi	r24, 0xEF	; 239
    1328:	8c 93       	st	X, r24
	SET_BIT(DDRB, 6);
    132a:	a7 e3       	ldi	r26, 0x37	; 55
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e7 e3       	ldi	r30, 0x37	; 55
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	80 64       	ori	r24, 0x40	; 64
    1336:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR, MSTR);
    1338:	ad e2       	ldi	r26, 0x2D	; 45
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	ed e2       	ldi	r30, 0x2D	; 45
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	8f 7e       	andi	r24, 0xEF	; 239
    1344:	8c 93       	st	X, r24
	SPCR |= SPI_Clock_Rate;
    1346:	ad e2       	ldi	r26, 0x2D	; 45
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ed e2       	ldi	r30, 0x2D	; 45
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	81 60       	ori	r24, 0x01	; 1
    1352:	8c 93       	st	X, r24

#if spi_interrupt == enable
	SET_BIT(SPCR,SPIE);
#else
	CLEAR_BIT(SPCR, SPIE);
    1354:	ad e2       	ldi	r26, 0x2D	; 45
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ed e2       	ldi	r30, 0x2D	; 45
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8f 77       	andi	r24, 0x7F	; 127
    1360:	8c 93       	st	X, r24
#endif

#if spi_enable == enable
	SET_BIT(SPCR, SPE);
    1362:	ad e2       	ldi	r26, 0x2D	; 45
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	ed e2       	ldi	r30, 0x2D	; 45
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	80 64       	ori	r24, 0x40	; 64
    136e:	8c 93       	st	X, r24
#elif spi_enable == disable
	SET_BIT(SPCR,SPE);
#endif

#if Data_Order == MSB
	SET_BIT(SPCR, DORD);
    1370:	ad e2       	ldi	r26, 0x2D	; 45
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	ed e2       	ldi	r30, 0x2D	; 45
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	80 62       	ori	r24, 0x20	; 32
    137c:	8c 93       	st	X, r24
#elif Data_Order == LSB
	SET_BIT(SPCR,DORD);
#endif

#if Clock_Phase == leading
	CLEAR_BIT(SPCR, CPHA);
    137e:	ad e2       	ldi	r26, 0x2D	; 45
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	ed e2       	ldi	r30, 0x2D	; 45
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	8b 7f       	andi	r24, 0xFB	; 251
    138a:	8c 93       	st	X, r24
#elif Clock_Phase == trailing
	SET_BIT(SPCR,CPHA);
#endif

#if SPI_Speed == normal_speed
	CLEAR_BIT(SPSR, SPI2X);
    138c:	ae e2       	ldi	r26, 0x2E	; 46
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	ee e2       	ldi	r30, 0x2E	; 46
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	8e 7f       	andi	r24, 0xFE	; 254
    1398:	8c 93       	st	X, r24
#elif SPI_Speed == double_speed
	SET_BIT(SPSR,SPI2X);
#endif

}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <spi_master_send>:

void spi_master_send(uint8 data) {
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	0f 92       	push	r0
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    13ac:	ef e2       	ldi	r30, 0x2F	; 47
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	80 83       	st	Z, r24
	while (!(SPSR & (1 << SPIF)));
    13b4:	ee e2       	ldi	r30, 0x2E	; 46
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	88 23       	and	r24, r24
    13bc:	dc f7       	brge	.-10     	; 0x13b4 <spi_master_send+0x14>
}
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <spi_slave_receive>:

uint8 spi_slave_receive(void) {
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
	while(!(SPSR & (1<<SPIF)));
    13ce:	ee e2       	ldi	r30, 0x2E	; 46
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	88 23       	and	r24, r24
    13d6:	dc f7       	brge	.-10     	; 0x13ce <spi_slave_receive+0x8>
	return SPDR;
    13d8:	ef e2       	ldi	r30, 0x2F	; 47
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <call_back_spi>:

void call_back_spi(void (*callback)(void)) {
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <call_back_spi+0x6>
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	9a 83       	std	Y+2, r25	; 0x02
    13f0:	89 83       	std	Y+1, r24	; 0x01
	ptfspi = callback;
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	9a 81       	ldd	r25, Y+2	; 0x02
    13f6:	90 93 89 00 	sts	0x0089, r25
    13fa:	80 93 88 00 	sts	0x0088, r24
}
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <__vector_12>:

ISR(SPI_STC_vect) {
    1408:	1f 92       	push	r1
    140a:	0f 92       	push	r0
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	0f 92       	push	r0
    1410:	11 24       	eor	r1, r1
    1412:	2f 93       	push	r18
    1414:	3f 93       	push	r19
    1416:	4f 93       	push	r20
    1418:	5f 93       	push	r21
    141a:	6f 93       	push	r22
    141c:	7f 93       	push	r23
    141e:	8f 93       	push	r24
    1420:	9f 93       	push	r25
    1422:	af 93       	push	r26
    1424:	bf 93       	push	r27
    1426:	ef 93       	push	r30
    1428:	ff 93       	push	r31
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
	ptfspi();
    1432:	e0 91 88 00 	lds	r30, 0x0088
    1436:	f0 91 89 00 	lds	r31, 0x0089
    143a:	09 95       	icall
}
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	ff 91       	pop	r31
    1442:	ef 91       	pop	r30
    1444:	bf 91       	pop	r27
    1446:	af 91       	pop	r26
    1448:	9f 91       	pop	r25
    144a:	8f 91       	pop	r24
    144c:	7f 91       	pop	r23
    144e:	6f 91       	pop	r22
    1450:	5f 91       	pop	r21
    1452:	4f 91       	pop	r20
    1454:	3f 91       	pop	r19
    1456:	2f 91       	pop	r18
    1458:	0f 90       	pop	r0
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	0f 90       	pop	r0
    145e:	1f 90       	pop	r1
    1460:	18 95       	reti

00001462 <EXTI_init>:

void (*ptf0)(void);
void (*ptf1)(void);
void (*ptf2)(void);

void EXTI_init(void){
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
//		MCUCR|=INT0_TRIG;
//	}else{
//		CLEAR_BIT(GICR,INT0);
//	}
#if EXTI_INT0 == ENABLED
	SET_BIT(GICR,INT0);
    146a:	ab e5       	ldi	r26, 0x5B	; 91
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e5       	ldi	r30, 0x5B	; 91
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 64       	ori	r24, 0x40	; 64
    1476:	8c 93       	st	X, r24
	MCUCR|=INT0_TRIG;
    1478:	a5 e5       	ldi	r26, 0x55	; 85
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e5 e5       	ldi	r30, 0x55	; 85
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	83 60       	ori	r24, 0x03	; 3
    1484:	8c 93       	st	X, r24
//	}
#if EXTI_INT1 == ENABLED
	SET_BIT(GICR,INT1);
	MCUCR|=(INT1_TRIG<<2);
#else
	CLEAR_BIT(GICR,INT1);
    1486:	ab e5       	ldi	r26, 0x5B	; 91
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	eb e5       	ldi	r30, 0x5B	; 91
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	8f 77       	andi	r24, 0x7F	; 127
    1492:	8c 93       	st	X, r24
	SET_BIT(MCUCSR, 6);
#else
	CLEAR_BIT(GICR, INT2);
#endif
#else
	CLEAR_BIT(GICR,INT2);
    1494:	ab e5       	ldi	r26, 0x5B	; 91
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	eb e5       	ldi	r30, 0x5B	; 91
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	8f 7d       	andi	r24, 0xDF	; 223
    14a0:	8c 93       	st	X, r24
#endif
}
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <call_back_INT0>:

void call_back_INT0(void (*callback)(void)){
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <call_back_INT0+0x6>
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	9a 83       	std	Y+2, r25	; 0x02
    14b4:	89 83       	std	Y+1, r24	; 0x01
	ptf0=callback;
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	90 93 8f 00 	sts	0x008F, r25
    14be:	80 93 8e 00 	sts	0x008E, r24
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <call_back_INT1>:
void call_back_INT1(void (*callback)(void)){
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <call_back_INT1+0x6>
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	9a 83       	std	Y+2, r25	; 0x02
    14d8:	89 83       	std	Y+1, r24	; 0x01
	ptf1=callback;
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	90 93 8d 00 	sts	0x008D, r25
    14e2:	80 93 8c 00 	sts	0x008C, r24
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <call_back_INT2>:
void call_back_INT2(void (*callback)(void)){
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <call_back_INT2+0x6>
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	89 83       	std	Y+1, r24	; 0x01
	ptf2=callback;
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	90 93 8b 00 	sts	0x008B, r25
    1506:	80 93 8a 00 	sts	0x008A, r24
}
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <__vector_1>:

ISR(INT0_vect){
    1514:	1f 92       	push	r1
    1516:	0f 92       	push	r0
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	0f 92       	push	r0
    151c:	11 24       	eor	r1, r1
    151e:	2f 93       	push	r18
    1520:	3f 93       	push	r19
    1522:	4f 93       	push	r20
    1524:	5f 93       	push	r21
    1526:	6f 93       	push	r22
    1528:	7f 93       	push	r23
    152a:	8f 93       	push	r24
    152c:	9f 93       	push	r25
    152e:	af 93       	push	r26
    1530:	bf 93       	push	r27
    1532:	ef 93       	push	r30
    1534:	ff 93       	push	r31
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
	ptf0();
    153e:	e0 91 8e 00 	lds	r30, 0x008E
    1542:	f0 91 8f 00 	lds	r31, 0x008F
    1546:	09 95       	icall
}
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	ff 91       	pop	r31
    154e:	ef 91       	pop	r30
    1550:	bf 91       	pop	r27
    1552:	af 91       	pop	r26
    1554:	9f 91       	pop	r25
    1556:	8f 91       	pop	r24
    1558:	7f 91       	pop	r23
    155a:	6f 91       	pop	r22
    155c:	5f 91       	pop	r21
    155e:	4f 91       	pop	r20
    1560:	3f 91       	pop	r19
    1562:	2f 91       	pop	r18
    1564:	0f 90       	pop	r0
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	0f 90       	pop	r0
    156a:	1f 90       	pop	r1
    156c:	18 95       	reti

0000156e <__vector_2>:
ISR(INT1_vect){
    156e:	1f 92       	push	r1
    1570:	0f 92       	push	r0
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	0f 92       	push	r0
    1576:	11 24       	eor	r1, r1
    1578:	2f 93       	push	r18
    157a:	3f 93       	push	r19
    157c:	4f 93       	push	r20
    157e:	5f 93       	push	r21
    1580:	6f 93       	push	r22
    1582:	7f 93       	push	r23
    1584:	8f 93       	push	r24
    1586:	9f 93       	push	r25
    1588:	af 93       	push	r26
    158a:	bf 93       	push	r27
    158c:	ef 93       	push	r30
    158e:	ff 93       	push	r31
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	ptf1();
    1598:	e0 91 8c 00 	lds	r30, 0x008C
    159c:	f0 91 8d 00 	lds	r31, 0x008D
    15a0:	09 95       	icall
}
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	ff 91       	pop	r31
    15a8:	ef 91       	pop	r30
    15aa:	bf 91       	pop	r27
    15ac:	af 91       	pop	r26
    15ae:	9f 91       	pop	r25
    15b0:	8f 91       	pop	r24
    15b2:	7f 91       	pop	r23
    15b4:	6f 91       	pop	r22
    15b6:	5f 91       	pop	r21
    15b8:	4f 91       	pop	r20
    15ba:	3f 91       	pop	r19
    15bc:	2f 91       	pop	r18
    15be:	0f 90       	pop	r0
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	0f 90       	pop	r0
    15c4:	1f 90       	pop	r1
    15c6:	18 95       	reti

000015c8 <__vector_3>:
ISR(INT2_vect){
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	11 24       	eor	r1, r1
    15d2:	2f 93       	push	r18
    15d4:	3f 93       	push	r19
    15d6:	4f 93       	push	r20
    15d8:	5f 93       	push	r21
    15da:	6f 93       	push	r22
    15dc:	7f 93       	push	r23
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
    15e2:	af 93       	push	r26
    15e4:	bf 93       	push	r27
    15e6:	ef 93       	push	r30
    15e8:	ff 93       	push	r31
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
	ptf2();
    15f2:	e0 91 8a 00 	lds	r30, 0x008A
    15f6:	f0 91 8b 00 	lds	r31, 0x008B
    15fa:	09 95       	icall
}
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	ff 91       	pop	r31
    1602:	ef 91       	pop	r30
    1604:	bf 91       	pop	r27
    1606:	af 91       	pop	r26
    1608:	9f 91       	pop	r25
    160a:	8f 91       	pop	r24
    160c:	7f 91       	pop	r23
    160e:	6f 91       	pop	r22
    1610:	5f 91       	pop	r21
    1612:	4f 91       	pop	r20
    1614:	3f 91       	pop	r19
    1616:	2f 91       	pop	r18
    1618:	0f 90       	pop	r0
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	0f 90       	pop	r0
    161e:	1f 90       	pop	r1
    1620:	18 95       	reti

00001622 <DIO_Write>:

Dio_Init_Type init_pins[] = { { PORT_A0, Output },{ PORT_A1, Output } };



void DIO_Write(Dio_Pin pin, Dio_Status_Type status) {
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	00 d0       	rcall	.+0      	; 0x1628 <DIO_Write+0x6>
    1628:	00 d0       	rcall	.+0      	; 0x162a <DIO_Write+0x8>
    162a:	00 d0       	rcall	.+0      	; 0x162c <DIO_Write+0xa>
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	8b 83       	std	Y+3, r24	; 0x03
    1632:	6c 83       	std	Y+4, r22	; 0x04
	Dio_Port_Type port_var = pin / 8;
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	86 95       	lsr	r24
    1638:	86 95       	lsr	r24
    163a:	86 95       	lsr	r24
    163c:	8a 83       	std	Y+2, r24	; 0x02
	Dio_Pin pin_var = pin % 8;
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	87 70       	andi	r24, 0x07	; 7
    1642:	89 83       	std	Y+1, r24	; 0x01
	switch (port_var) {
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	3e 83       	std	Y+6, r19	; 0x06
    164c:	2d 83       	std	Y+5, r18	; 0x05
    164e:	8d 81       	ldd	r24, Y+5	; 0x05
    1650:	9e 81       	ldd	r25, Y+6	; 0x06
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	91 05       	cpc	r25, r1
    1656:	09 f4       	brne	.+2      	; 0x165a <DIO_Write+0x38>
    1658:	43 c0       	rjmp	.+134    	; 0x16e0 <DIO_Write+0xbe>
    165a:	2d 81       	ldd	r18, Y+5	; 0x05
    165c:	3e 81       	ldd	r19, Y+6	; 0x06
    165e:	22 30       	cpi	r18, 0x02	; 2
    1660:	31 05       	cpc	r19, r1
    1662:	2c f4       	brge	.+10     	; 0x166e <DIO_Write+0x4c>
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	71 f0       	breq	.+28     	; 0x1688 <DIO_Write+0x66>
    166c:	bc c0       	rjmp	.+376    	; 0x17e6 <DIO_Write+0x1c4>
    166e:	2d 81       	ldd	r18, Y+5	; 0x05
    1670:	3e 81       	ldd	r19, Y+6	; 0x06
    1672:	22 30       	cpi	r18, 0x02	; 2
    1674:	31 05       	cpc	r19, r1
    1676:	09 f4       	brne	.+2      	; 0x167a <DIO_Write+0x58>
    1678:	5f c0       	rjmp	.+190    	; 0x1738 <DIO_Write+0x116>
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	9e 81       	ldd	r25, Y+6	; 0x06
    167e:	83 30       	cpi	r24, 0x03	; 3
    1680:	91 05       	cpc	r25, r1
    1682:	09 f4       	brne	.+2      	; 0x1686 <DIO_Write+0x64>
    1684:	85 c0       	rjmp	.+266    	; 0x1790 <DIO_Write+0x16e>
    1686:	af c0       	rjmp	.+350    	; 0x17e6 <DIO_Write+0x1c4>
	case PORT_A:
		if (status) {
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
    168a:	88 23       	and	r24, r24
    168c:	a1 f0       	breq	.+40     	; 0x16b6 <DIO_Write+0x94>
			SET_BIT(PORTA, pin_var);
    168e:	ab e3       	ldi	r26, 0x3B	; 59
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	eb e3       	ldi	r30, 0x3B	; 59
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_Write+0x8a>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_Write+0x86>
    16b0:	84 2b       	or	r24, r20
    16b2:	8c 93       	st	X, r24
    16b4:	98 c0       	rjmp	.+304    	; 0x17e6 <DIO_Write+0x1c4>
		} else {
			CLEAR_BIT(PORTA, pin_var);
    16b6:	ab e3       	ldi	r26, 0x3B	; 59
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	eb e3       	ldi	r30, 0x3B	; 59
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	48 2f       	mov	r20, r24
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 2e       	mov	r0, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_Write+0xb2>
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	0a 94       	dec	r0
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <DIO_Write+0xae>
    16d8:	80 95       	com	r24
    16da:	84 23       	and	r24, r20
    16dc:	8c 93       	st	X, r24
    16de:	83 c0       	rjmp	.+262    	; 0x17e6 <DIO_Write+0x1c4>
		}
		break;
	case PORT_B:
		if (status) {
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	88 23       	and	r24, r24
    16e4:	a1 f0       	breq	.+40     	; 0x170e <DIO_Write+0xec>
			SET_BIT(PORTB, pin_var);
    16e6:	a8 e3       	ldi	r26, 0x38	; 56
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e8 e3       	ldi	r30, 0x38	; 56
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_Write+0xe2>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_Write+0xde>
    1708:	84 2b       	or	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	6c c0       	rjmp	.+216    	; 0x17e6 <DIO_Write+0x1c4>
		} else {
			CLEAR_BIT(PORTB, pin_var);
    170e:	a8 e3       	ldi	r26, 0x38	; 56
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e8 e3       	ldi	r30, 0x38	; 56
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	48 2f       	mov	r20, r24
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	02 2e       	mov	r0, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <DIO_Write+0x10a>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	0a 94       	dec	r0
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <DIO_Write+0x106>
    1730:	80 95       	com	r24
    1732:	84 23       	and	r24, r20
    1734:	8c 93       	st	X, r24
    1736:	57 c0       	rjmp	.+174    	; 0x17e6 <DIO_Write+0x1c4>
		}
		break;
	case PORT_C:
		if (status) {
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	88 23       	and	r24, r24
    173c:	a1 f0       	breq	.+40     	; 0x1766 <DIO_Write+0x144>
			SET_BIT(PORTC, pin_var);
    173e:	a5 e3       	ldi	r26, 0x35	; 53
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e5 e3       	ldi	r30, 0x35	; 53
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_Write+0x13a>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <DIO_Write+0x136>
    1760:	84 2b       	or	r24, r20
    1762:	8c 93       	st	X, r24
    1764:	40 c0       	rjmp	.+128    	; 0x17e6 <DIO_Write+0x1c4>
		} else {
			CLEAR_BIT(PORTC, pin_var);
    1766:	a5 e3       	ldi	r26, 0x35	; 53
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e5 e3       	ldi	r30, 0x35	; 53
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	48 2f       	mov	r20, r24
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 2e       	mov	r0, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <DIO_Write+0x162>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <DIO_Write+0x15e>
    1788:	80 95       	com	r24
    178a:	84 23       	and	r24, r20
    178c:	8c 93       	st	X, r24
    178e:	2b c0       	rjmp	.+86     	; 0x17e6 <DIO_Write+0x1c4>
		}
		break;
	case PORT_D:
		if (status) {
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	88 23       	and	r24, r24
    1794:	a1 f0       	breq	.+40     	; 0x17be <DIO_Write+0x19c>
			SET_BIT(PORTD, pin_var);
    1796:	a2 e3       	ldi	r26, 0x32	; 50
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e2 e3       	ldi	r30, 0x32	; 50
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_Write+0x192>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_Write+0x18e>
    17b8:	84 2b       	or	r24, r20
    17ba:	8c 93       	st	X, r24
    17bc:	14 c0       	rjmp	.+40     	; 0x17e6 <DIO_Write+0x1c4>
		} else {
			CLEAR_BIT(PORTD, pin_var);
    17be:	a2 e3       	ldi	r26, 0x32	; 50
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e2 e3       	ldi	r30, 0x32	; 50
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <DIO_Write+0x1ba>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <DIO_Write+0x1b6>
    17e0:	80 95       	com	r24
    17e2:	84 23       	and	r24, r20
    17e4:	8c 93       	st	X, r24
		}
		break;
	}
}
    17e6:	26 96       	adiw	r28, 0x06	; 6
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <DIO_Port_Write>:

void DIO_Port_Write(Dio_Port_Type port, uint8 data) {
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <DIO_Port_Write+0x6>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <DIO_Port_Write+0x8>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	6a 83       	std	Y+2, r22	; 0x02
	switch (port) {
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	3c 83       	std	Y+4, r19	; 0x04
    1810:	2b 83       	std	Y+3, r18	; 0x03
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	81 30       	cpi	r24, 0x01	; 1
    1818:	91 05       	cpc	r25, r1
    181a:	d1 f0       	breq	.+52     	; 0x1850 <DIO_Port_Write+0x58>
    181c:	2b 81       	ldd	r18, Y+3	; 0x03
    181e:	3c 81       	ldd	r19, Y+4	; 0x04
    1820:	22 30       	cpi	r18, 0x02	; 2
    1822:	31 05       	cpc	r19, r1
    1824:	2c f4       	brge	.+10     	; 0x1830 <DIO_Port_Write+0x38>
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	61 f0       	breq	.+24     	; 0x1846 <DIO_Port_Write+0x4e>
    182e:	1e c0       	rjmp	.+60     	; 0x186c <DIO_Port_Write+0x74>
    1830:	2b 81       	ldd	r18, Y+3	; 0x03
    1832:	3c 81       	ldd	r19, Y+4	; 0x04
    1834:	22 30       	cpi	r18, 0x02	; 2
    1836:	31 05       	cpc	r19, r1
    1838:	81 f0       	breq	.+32     	; 0x185a <DIO_Port_Write+0x62>
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	9c 81       	ldd	r25, Y+4	; 0x04
    183e:	83 30       	cpi	r24, 0x03	; 3
    1840:	91 05       	cpc	r25, r1
    1842:	81 f0       	breq	.+32     	; 0x1864 <DIO_Port_Write+0x6c>
    1844:	13 c0       	rjmp	.+38     	; 0x186c <DIO_Port_Write+0x74>
	case PORT_A:
		PORTA = data;
    1846:	eb e3       	ldi	r30, 0x3B	; 59
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	80 83       	st	Z, r24
    184e:	0e c0       	rjmp	.+28     	; 0x186c <DIO_Port_Write+0x74>
		break;
	case PORT_B:
		PORTB = data;
    1850:	e8 e3       	ldi	r30, 0x38	; 56
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	80 83       	st	Z, r24
    1858:	09 c0       	rjmp	.+18     	; 0x186c <DIO_Port_Write+0x74>
		break;
	case PORT_C:
		PORTC = data;
    185a:	e5 e3       	ldi	r30, 0x35	; 53
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	80 83       	st	Z, r24
    1862:	04 c0       	rjmp	.+8      	; 0x186c <DIO_Port_Write+0x74>
		break;
	case PORT_D:
		PORTD = data;
    1864:	e2 e3       	ldi	r30, 0x32	; 50
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	80 83       	st	Z, r24
		break;
	}
}
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <DIO_Read>:

Dio_Status_Type DIO_Read(Dio_Pin pin) {
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	00 d0       	rcall	.+0      	; 0x1880 <DIO_Read+0x6>
    1880:	00 d0       	rcall	.+0      	; 0x1882 <DIO_Read+0x8>
    1882:	00 d0       	rcall	.+0      	; 0x1884 <DIO_Read+0xa>
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	8b 83       	std	Y+3, r24	; 0x03
	Dio_Port_Type port_var = pin / 8;
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	86 95       	lsr	r24
    188e:	86 95       	lsr	r24
    1890:	86 95       	lsr	r24
    1892:	8a 83       	std	Y+2, r24	; 0x02
	Dio_Pin pin_var = pin % 8;
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	87 70       	andi	r24, 0x07	; 7
    1898:	89 83       	std	Y+1, r24	; 0x01
	switch (port_var) {
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	3e 83       	std	Y+6, r19	; 0x06
    18a2:	2d 83       	std	Y+5, r18	; 0x05
    18a4:	4d 81       	ldd	r20, Y+5	; 0x05
    18a6:	5e 81       	ldd	r21, Y+6	; 0x06
    18a8:	41 30       	cpi	r20, 0x01	; 1
    18aa:	51 05       	cpc	r21, r1
    18ac:	79 f1       	breq	.+94     	; 0x190c <DIO_Read+0x92>
    18ae:	8d 81       	ldd	r24, Y+5	; 0x05
    18b0:	9e 81       	ldd	r25, Y+6	; 0x06
    18b2:	82 30       	cpi	r24, 0x02	; 2
    18b4:	91 05       	cpc	r25, r1
    18b6:	34 f4       	brge	.+12     	; 0x18c4 <DIO_Read+0x4a>
    18b8:	2d 81       	ldd	r18, Y+5	; 0x05
    18ba:	3e 81       	ldd	r19, Y+6	; 0x06
    18bc:	21 15       	cp	r18, r1
    18be:	31 05       	cpc	r19, r1
    18c0:	69 f0       	breq	.+26     	; 0x18dc <DIO_Read+0x62>
    18c2:	6c c0       	rjmp	.+216    	; 0x199c <DIO_Read+0x122>
    18c4:	4d 81       	ldd	r20, Y+5	; 0x05
    18c6:	5e 81       	ldd	r21, Y+6	; 0x06
    18c8:	42 30       	cpi	r20, 0x02	; 2
    18ca:	51 05       	cpc	r21, r1
    18cc:	b9 f1       	breq	.+110    	; 0x193c <DIO_Read+0xc2>
    18ce:	8d 81       	ldd	r24, Y+5	; 0x05
    18d0:	9e 81       	ldd	r25, Y+6	; 0x06
    18d2:	83 30       	cpi	r24, 0x03	; 3
    18d4:	91 05       	cpc	r25, r1
    18d6:	09 f4       	brne	.+2      	; 0x18da <DIO_Read+0x60>
    18d8:	49 c0       	rjmp	.+146    	; 0x196c <DIO_Read+0xf2>
    18da:	60 c0       	rjmp	.+192    	; 0x199c <DIO_Read+0x122>
	case PORT_A:
		if (GET_BIT(PINA, pin_var)) {
    18dc:	e9 e3       	ldi	r30, 0x39	; 57
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	88 2f       	mov	r24, r24
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a9 01       	movw	r20, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_Read+0x7a>
    18f0:	55 95       	asr	r21
    18f2:	47 95       	ror	r20
    18f4:	8a 95       	dec	r24
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <DIO_Read+0x76>
    18f8:	ca 01       	movw	r24, r20
    18fa:	81 70       	andi	r24, 0x01	; 1
    18fc:	90 70       	andi	r25, 0x00	; 0
    18fe:	88 23       	and	r24, r24
    1900:	19 f0       	breq	.+6      	; 0x1908 <DIO_Read+0x8e>
			return High;
    1902:	51 e0       	ldi	r21, 0x01	; 1
    1904:	5c 83       	std	Y+4, r21	; 0x04
    1906:	4b c0       	rjmp	.+150    	; 0x199e <DIO_Read+0x124>
		} else {
			return Low;
    1908:	1c 82       	std	Y+4, r1	; 0x04
    190a:	49 c0       	rjmp	.+146    	; 0x199e <DIO_Read+0x124>
		}
		break;
	case PORT_B:
		if (GET_BIT(PINB, pin_var)) {
    190c:	e6 e3       	ldi	r30, 0x36	; 54
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a9 01       	movw	r20, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <DIO_Read+0xaa>
    1920:	55 95       	asr	r21
    1922:	47 95       	ror	r20
    1924:	8a 95       	dec	r24
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <DIO_Read+0xa6>
    1928:	ca 01       	movw	r24, r20
    192a:	81 70       	andi	r24, 0x01	; 1
    192c:	90 70       	andi	r25, 0x00	; 0
    192e:	88 23       	and	r24, r24
    1930:	19 f0       	breq	.+6      	; 0x1938 <DIO_Read+0xbe>
			return High;
    1932:	51 e0       	ldi	r21, 0x01	; 1
    1934:	5c 83       	std	Y+4, r21	; 0x04
    1936:	33 c0       	rjmp	.+102    	; 0x199e <DIO_Read+0x124>
		} else {
			return Low;
    1938:	1c 82       	std	Y+4, r1	; 0x04
    193a:	31 c0       	rjmp	.+98     	; 0x199e <DIO_Read+0x124>
		}
		break;
	case PORT_C:
		if (GET_BIT(PINC, pin_var)) {
    193c:	e3 e3       	ldi	r30, 0x33	; 51
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	a9 01       	movw	r20, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <DIO_Read+0xda>
    1950:	55 95       	asr	r21
    1952:	47 95       	ror	r20
    1954:	8a 95       	dec	r24
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <DIO_Read+0xd6>
    1958:	ca 01       	movw	r24, r20
    195a:	81 70       	andi	r24, 0x01	; 1
    195c:	90 70       	andi	r25, 0x00	; 0
    195e:	88 23       	and	r24, r24
    1960:	19 f0       	breq	.+6      	; 0x1968 <DIO_Read+0xee>
			return High;
    1962:	51 e0       	ldi	r21, 0x01	; 1
    1964:	5c 83       	std	Y+4, r21	; 0x04
    1966:	1b c0       	rjmp	.+54     	; 0x199e <DIO_Read+0x124>
		} else {
			return Low;
    1968:	1c 82       	std	Y+4, r1	; 0x04
    196a:	19 c0       	rjmp	.+50     	; 0x199e <DIO_Read+0x124>
		}
		break;
	case PORT_D:
		if (GET_BIT(PIND, pin_var)) {
    196c:	e0 e3       	ldi	r30, 0x30	; 48
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	88 2f       	mov	r24, r24
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a9 01       	movw	r20, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_Read+0x10a>
    1980:	55 95       	asr	r21
    1982:	47 95       	ror	r20
    1984:	8a 95       	dec	r24
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_Read+0x106>
    1988:	ca 01       	movw	r24, r20
    198a:	81 70       	andi	r24, 0x01	; 1
    198c:	90 70       	andi	r25, 0x00	; 0
    198e:	88 23       	and	r24, r24
    1990:	19 f0       	breq	.+6      	; 0x1998 <DIO_Read+0x11e>
			return High;
    1992:	51 e0       	ldi	r21, 0x01	; 1
    1994:	5c 83       	std	Y+4, r21	; 0x04
    1996:	03 c0       	rjmp	.+6      	; 0x199e <DIO_Read+0x124>
		} else {
			return Low;
    1998:	1c 82       	std	Y+4, r1	; 0x04
    199a:	01 c0       	rjmp	.+2      	; 0x199e <DIO_Read+0x124>
		}
		break;
	default:
		break;
	}
	return Low;
    199c:	1c 82       	std	Y+4, r1	; 0x04
    199e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    19a0:	26 96       	adiw	r28, 0x06	; 6
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <DIO_Init>:

void DIO_Init(void) {
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <DIO_Init+0x6>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <DIO_Init+0x8>
    19ba:	0f 92       	push	r0
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < (sizeof(init_pins) / sizeof(init_pins[0])); i++) {
    19c0:	1b 82       	std	Y+3, r1	; 0x03
    19c2:	1a 82       	std	Y+2, r1	; 0x02
    19c4:	06 c1       	rjmp	.+524    	; 0x1bd2 <DIO_Init+0x220>
		Dio_Pin pin = init_pins[i].pin % 8;
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	fc 01       	movw	r30, r24
    19d0:	e8 59       	subi	r30, 0x98	; 152
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 81       	ld	r24, Z
    19d6:	87 70       	andi	r24, 0x07	; 7
    19d8:	89 83       	std	Y+1, r24	; 0x01
		switch ((init_pins[i].pin/8)) {
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	9b 81       	ldd	r25, Y+3	; 0x03
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	fc 01       	movw	r30, r24
    19e4:	e8 59       	subi	r30, 0x98	; 152
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	80 81       	ld	r24, Z
    19ea:	86 95       	lsr	r24
    19ec:	86 95       	lsr	r24
    19ee:	86 95       	lsr	r24
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	3d 83       	std	Y+5, r19	; 0x05
    19f6:	2c 83       	std	Y+4, r18	; 0x04
    19f8:	8c 81       	ldd	r24, Y+4	; 0x04
    19fa:	9d 81       	ldd	r25, Y+5	; 0x05
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	91 05       	cpc	r25, r1
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <DIO_Init+0x52>
    1a02:	4a c0       	rjmp	.+148    	; 0x1a98 <DIO_Init+0xe6>
    1a04:	2c 81       	ldd	r18, Y+4	; 0x04
    1a06:	3d 81       	ldd	r19, Y+5	; 0x05
    1a08:	22 30       	cpi	r18, 0x02	; 2
    1a0a:	31 05       	cpc	r19, r1
    1a0c:	2c f4       	brge	.+10     	; 0x1a18 <DIO_Init+0x66>
    1a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a10:	9d 81       	ldd	r25, Y+5	; 0x05
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	71 f0       	breq	.+28     	; 0x1a32 <DIO_Init+0x80>
    1a16:	d8 c0       	rjmp	.+432    	; 0x1bc8 <DIO_Init+0x216>
    1a18:	2c 81       	ldd	r18, Y+4	; 0x04
    1a1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a1c:	22 30       	cpi	r18, 0x02	; 2
    1a1e:	31 05       	cpc	r19, r1
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <DIO_Init+0x72>
    1a22:	6d c0       	rjmp	.+218    	; 0x1afe <DIO_Init+0x14c>
    1a24:	8c 81       	ldd	r24, Y+4	; 0x04
    1a26:	9d 81       	ldd	r25, Y+5	; 0x05
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <DIO_Init+0x7e>
    1a2e:	9a c0       	rjmp	.+308    	; 0x1b64 <DIO_Init+0x1b2>
    1a30:	cb c0       	rjmp	.+406    	; 0x1bc8 <DIO_Init+0x216>
		case PORT_A:
			if (init_pins[i].direction) {
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	9b 81       	ldd	r25, Y+3	; 0x03
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	e7 59       	subi	r30, 0x97	; 151
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 81       	ld	r24, Z
    1a42:	88 23       	and	r24, r24
    1a44:	a1 f0       	breq	.+40     	; 0x1a6e <DIO_Init+0xbc>
				SET_BIT(DDRA, pin);
    1a46:	aa e3       	ldi	r26, 0x3A	; 58
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	ea e3       	ldi	r30, 0x3A	; 58
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <DIO_Init+0xb2>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <DIO_Init+0xae>
    1a68:	84 2b       	or	r24, r20
    1a6a:	8c 93       	st	X, r24
    1a6c:	ad c0       	rjmp	.+346    	; 0x1bc8 <DIO_Init+0x216>
			} else {
				CLEAR_BIT(DDRA, pin);
    1a6e:	aa e3       	ldi	r26, 0x3A	; 58
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	ea e3       	ldi	r30, 0x3A	; 58
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	48 2f       	mov	r20, r24
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	02 2e       	mov	r0, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <DIO_Init+0xda>
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	0a 94       	dec	r0
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <DIO_Init+0xd6>
    1a90:	80 95       	com	r24
    1a92:	84 23       	and	r24, r20
    1a94:	8c 93       	st	X, r24
    1a96:	98 c0       	rjmp	.+304    	; 0x1bc8 <DIO_Init+0x216>
			}
			break;
		case PORT_B:
			if (init_pins[i].direction) {
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	e7 59       	subi	r30, 0x97	; 151
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 81       	ld	r24, Z
    1aa8:	88 23       	and	r24, r24
    1aaa:	a1 f0       	breq	.+40     	; 0x1ad4 <DIO_Init+0x122>
				SET_BIT(DDRB, pin);
    1aac:	a7 e3       	ldi	r26, 0x37	; 55
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e7 e3       	ldi	r30, 0x37	; 55
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	48 2f       	mov	r20, r24
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	02 2e       	mov	r0, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <DIO_Init+0x118>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	0a 94       	dec	r0
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <DIO_Init+0x114>
    1ace:	84 2b       	or	r24, r20
    1ad0:	8c 93       	st	X, r24
    1ad2:	7a c0       	rjmp	.+244    	; 0x1bc8 <DIO_Init+0x216>
			} else {
				CLEAR_BIT(DDRB, pin);
    1ad4:	a7 e3       	ldi	r26, 0x37	; 55
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e7 e3       	ldi	r30, 0x37	; 55
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	48 2f       	mov	r20, r24
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	02 2e       	mov	r0, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <DIO_Init+0x140>
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	0a 94       	dec	r0
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <DIO_Init+0x13c>
    1af6:	80 95       	com	r24
    1af8:	84 23       	and	r24, r20
    1afa:	8c 93       	st	X, r24
    1afc:	65 c0       	rjmp	.+202    	; 0x1bc8 <DIO_Init+0x216>
			}
			break;
		case PORT_C:
			if (init_pins[i].direction) {
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	9b 81       	ldd	r25, Y+3	; 0x03
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	fc 01       	movw	r30, r24
    1b08:	e7 59       	subi	r30, 0x97	; 151
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 23       	and	r24, r24
    1b10:	a1 f0       	breq	.+40     	; 0x1b3a <DIO_Init+0x188>
				SET_BIT(DDRC, pin);
    1b12:	a4 e3       	ldi	r26, 0x34	; 52
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e4 e3       	ldi	r30, 0x34	; 52
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	02 2e       	mov	r0, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <DIO_Init+0x17e>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	0a 94       	dec	r0
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <DIO_Init+0x17a>
    1b34:	84 2b       	or	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	47 c0       	rjmp	.+142    	; 0x1bc8 <DIO_Init+0x216>
			} else {
				CLEAR_BIT(DDRC, pin);
    1b3a:	a4 e3       	ldi	r26, 0x34	; 52
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e4 e3       	ldi	r30, 0x34	; 52
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <DIO_Init+0x1a6>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <DIO_Init+0x1a2>
    1b5c:	80 95       	com	r24
    1b5e:	84 23       	and	r24, r20
    1b60:	8c 93       	st	X, r24
    1b62:	32 c0       	rjmp	.+100    	; 0x1bc8 <DIO_Init+0x216>
			}
			break;
		case PORT_D:
			if (init_pins[i].direction) {
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	9b 81       	ldd	r25, Y+3	; 0x03
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	e7 59       	subi	r30, 0x97	; 151
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	80 81       	ld	r24, Z
    1b74:	88 23       	and	r24, r24
    1b76:	a1 f0       	breq	.+40     	; 0x1ba0 <DIO_Init+0x1ee>
				SET_BIT(DDRD, pin);
    1b78:	a1 e3       	ldi	r26, 0x31	; 49
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e1 e3       	ldi	r30, 0x31	; 49
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <DIO_Init+0x1e4>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <DIO_Init+0x1e0>
    1b9a:	84 2b       	or	r24, r20
    1b9c:	8c 93       	st	X, r24
    1b9e:	14 c0       	rjmp	.+40     	; 0x1bc8 <DIO_Init+0x216>
			} else {
				CLEAR_BIT(DDRD, pin);
    1ba0:	a1 e3       	ldi	r26, 0x31	; 49
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e1 e3       	ldi	r30, 0x31	; 49
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 2e       	mov	r0, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <DIO_Init+0x20c>
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	0a 94       	dec	r0
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <DIO_Init+0x208>
    1bc2:	80 95       	com	r24
    1bc4:	84 23       	and	r24, r20
    1bc6:	8c 93       	st	X, r24
	}
	return Low;
}

void DIO_Init(void) {
	for (int i = 0; i < (sizeof(init_pins) / sizeof(init_pins[0])); i++) {
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	9b 81       	ldd	r25, Y+3	; 0x03
    1bcc:	01 96       	adiw	r24, 0x01	; 1
    1bce:	9b 83       	std	Y+3, r25	; 0x03
    1bd0:	8a 83       	std	Y+2, r24	; 0x02
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd6:	82 30       	cpi	r24, 0x02	; 2
    1bd8:	91 05       	cpc	r25, r1
    1bda:	08 f4       	brcc	.+2      	; 0x1bde <DIO_Init+0x22c>
    1bdc:	f4 ce       	rjmp	.-536    	; 0x19c6 <DIO_Init+0x14>
			break;
		default:
			break;
		}
	}
}
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <adc_init>:
 *      Author: M.Eltokhy
 */

#include "ADC.h"

void adc_init(void) {
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
	//Enable ADC
#if ADC_Enable == ENABLE
	SET_BIT(ADCSRA, ADEN);
    1bf6:	a6 e2       	ldi	r26, 0x26	; 38
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e6 e2       	ldi	r30, 0x26	; 38
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 68       	ori	r24, 0x80	; 128
    1c02:	8c 93       	st	X, r24
	//set vref
	ADMUX |= (ADC_Source << 6);
    1c04:	a7 e2       	ldi	r26, 0x27	; 39
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e7 e2       	ldi	r30, 0x27	; 39
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 6c       	ori	r24, 0xC0	; 192
    1c10:	8c 93       	st	X, r24
	//set prescaler
	ADCSRA |= ADC_prescaler;
    1c12:	a6 e2       	ldi	r26, 0x26	; 38
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e6 e2       	ldi	r30, 0x26	; 38
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	87 60       	ori	r24, 0x07	; 7
    1c1e:	8c 93       	st	X, r24
#endif

}
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <adc_read>:

uint16 adc_read(uint8 ch) {
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	0f 92       	push	r0
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	89 83       	std	Y+1, r24	; 0x01
	//choose channel
	ADMUX = (ADMUX & 0xe0) | (ch & 0x1f);
    1c32:	a7 e2       	ldi	r26, 0x27	; 39
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e7 e2       	ldi	r30, 0x27	; 39
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	98 2f       	mov	r25, r24
    1c3e:	90 7e       	andi	r25, 0xE0	; 224
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	8f 71       	andi	r24, 0x1F	; 31
    1c44:	89 2b       	or	r24, r25
    1c46:	8c 93       	st	X, r24
	//start conversion
	SET_BIT(ADCSRA, ADSC);
    1c48:	a6 e2       	ldi	r26, 0x26	; 38
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e6 e2       	ldi	r30, 0x26	; 38
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	80 64       	ori	r24, 0x40	; 64
    1c54:	8c 93       	st	X, r24
	//wait for conversion
	while (!GET_BIT(ADCSRA, ADIF));
    1c56:	e6 e2       	ldi	r30, 0x26	; 38
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	88 2f       	mov	r24, r24
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	80 71       	andi	r24, 0x10	; 16
    1c62:	90 70       	andi	r25, 0x00	; 0
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	b9 f3       	breq	.-18     	; 0x1c56 <adc_read+0x30>
	SET_BIT(ADCSRA, ADIF);
    1c68:	a6 e2       	ldi	r26, 0x26	; 38
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e6 e2       	ldi	r30, 0x26	; 38
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	80 61       	ori	r24, 0x10	; 16
    1c74:	8c 93       	st	X, r24
	return ADC;
    1c76:	e4 e2       	ldi	r30, 0x24	; 36
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <seven_display_number>:
 *      Author: M.Eltokhy
 */

#include "seven_segment.h"

void seven_display_number(uint8 n) {
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	6e 97       	sbiw	r28, 0x1e	; 30
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 u = n % 10;
    1c9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c9e:	9a e0       	ldi	r25, 0x0A	; 10
    1ca0:	69 2f       	mov	r22, r25
    1ca2:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__udivmodqi4>
    1ca6:	89 2f       	mov	r24, r25
    1ca8:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_Write(PORT_B1, High);
    1caa:	89 e0       	ldi	r24, 0x09	; 9
    1cac:	61 e0       	ldi	r22, 0x01	; 1
    1cae:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_B2, Low);
    1cb2:	8a e0       	ldi	r24, 0x0A	; 10
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_A4,GET_BIT(u,0));
    1cba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cbc:	98 2f       	mov	r25, r24
    1cbe:	91 70       	andi	r25, 0x01	; 1
    1cc0:	84 e0       	ldi	r24, 0x04	; 4
    1cc2:	69 2f       	mov	r22, r25
    1cc4:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_A5,GET_BIT(u,1));
    1cc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cca:	98 2f       	mov	r25, r24
    1ccc:	92 70       	andi	r25, 0x02	; 2
    1cce:	85 e0       	ldi	r24, 0x05	; 5
    1cd0:	69 2f       	mov	r22, r25
    1cd2:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_A6,GET_BIT(u,2));
    1cd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cd8:	98 2f       	mov	r25, r24
    1cda:	94 70       	andi	r25, 0x04	; 4
    1cdc:	86 e0       	ldi	r24, 0x06	; 6
    1cde:	69 2f       	mov	r22, r25
    1ce0:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_A7,GET_BIT(u,3));
    1ce4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	98 70       	andi	r25, 0x08	; 8
    1cea:	87 e0       	ldi	r24, 0x07	; 7
    1cec:	69 2f       	mov	r22, r25
    1cee:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 e2       	ldi	r26, 0x20	; 32
    1cf8:	b1 e4       	ldi	r27, 0x41	; 65
    1cfa:	89 8f       	std	Y+25, r24	; 0x19
    1cfc:	9a 8f       	std	Y+26, r25	; 0x1a
    1cfe:	ab 8f       	std	Y+27, r26	; 0x1b
    1d00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	69 8d       	ldd	r22, Y+25	; 0x19
    1d04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4a e7       	ldi	r20, 0x7A	; 122
    1d10:	55 e4       	ldi	r21, 0x45	; 69
    1d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8d 8b       	std	Y+21, r24	; 0x15
    1d1c:	9e 8b       	std	Y+22, r25	; 0x16
    1d1e:	af 8b       	std	Y+23, r26	; 0x17
    1d20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d22:	6d 89       	ldd	r22, Y+21	; 0x15
    1d24:	7e 89       	ldd	r23, Y+22	; 0x16
    1d26:	8f 89       	ldd	r24, Y+23	; 0x17
    1d28:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <seven_display_number+0xbe>
		__ticks = 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9c 8b       	std	Y+20, r25	; 0x14
    1d40:	8b 8b       	std	Y+19, r24	; 0x13
    1d42:	3f c0       	rjmp	.+126    	; 0x1dc2 <seven_display_number+0x13c>
	else if (__tmp > 65535)
    1d44:	6d 89       	ldd	r22, Y+21	; 0x15
    1d46:	7e 89       	ldd	r23, Y+22	; 0x16
    1d48:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	57 e4       	ldi	r21, 0x47	; 71
    1d54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d58:	18 16       	cp	r1, r24
    1d5a:	4c f5       	brge	.+82     	; 0x1dae <seven_display_number+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9c 8b       	std	Y+20, r25	; 0x14
    1d82:	8b 8b       	std	Y+19, r24	; 0x13
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <seven_display_number+0x11e>
    1d86:	80 e9       	ldi	r24, 0x90	; 144
    1d88:	91 e0       	ldi	r25, 0x01	; 1
    1d8a:	9a 8b       	std	Y+18, r25	; 0x12
    1d8c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d8e:	89 89       	ldd	r24, Y+17	; 0x11
    1d90:	9a 89       	ldd	r25, Y+18	; 0x12
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <seven_display_number+0x10c>
    1d96:	9a 8b       	std	Y+18, r25	; 0x12
    1d98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9c 8b       	std	Y+20, r25	; 0x14
    1da2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	8b 89       	ldd	r24, Y+19	; 0x13
    1da6:	9c 89       	ldd	r25, Y+20	; 0x14
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <seven_display_number+0x100>
    1dac:	14 c0       	rjmp	.+40     	; 0x1dd6 <seven_display_number+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	6d 89       	ldd	r22, Y+21	; 0x15
    1db0:	7e 89       	ldd	r23, Y+22	; 0x16
    1db2:	8f 89       	ldd	r24, Y+23	; 0x17
    1db4:	98 8d       	ldd	r25, Y+24	; 0x18
    1db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9c 8b       	std	Y+20, r25	; 0x14
    1dc0:	8b 8b       	std	Y+19, r24	; 0x13
    1dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc6:	98 8b       	std	Y+16, r25	; 0x10
    1dc8:	8f 87       	std	Y+15, r24	; 0x0f
    1dca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dcc:	98 89       	ldd	r25, Y+16	; 0x10
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <seven_display_number+0x148>
    1dd2:	98 8b       	std	Y+16, r25	; 0x10
    1dd4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	u = n / 10;
    1dd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dd8:	9a e0       	ldi	r25, 0x0A	; 10
    1dda:	69 2f       	mov	r22, r25
    1ddc:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__udivmodqi4>
    1de0:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_Write(PORT_B1, Low);
    1de2:	89 e0       	ldi	r24, 0x09	; 9
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_B2, High);
    1dea:	8a e0       	ldi	r24, 0x0A	; 10
    1dec:	61 e0       	ldi	r22, 0x01	; 1
    1dee:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_A4,GET_BIT(u,0));
    1df2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df4:	98 2f       	mov	r25, r24
    1df6:	91 70       	andi	r25, 0x01	; 1
    1df8:	84 e0       	ldi	r24, 0x04	; 4
    1dfa:	69 2f       	mov	r22, r25
    1dfc:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_A5,GET_BIT(u,1));
    1e00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e02:	98 2f       	mov	r25, r24
    1e04:	92 70       	andi	r25, 0x02	; 2
    1e06:	85 e0       	ldi	r24, 0x05	; 5
    1e08:	69 2f       	mov	r22, r25
    1e0a:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_A6,GET_BIT(u,2));
    1e0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e10:	98 2f       	mov	r25, r24
    1e12:	94 70       	andi	r25, 0x04	; 4
    1e14:	86 e0       	ldi	r24, 0x06	; 6
    1e16:	69 2f       	mov	r22, r25
    1e18:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_A7,GET_BIT(u,3));
    1e1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e1e:	98 2f       	mov	r25, r24
    1e20:	98 70       	andi	r25, 0x08	; 8
    1e22:	87 e0       	ldi	r24, 0x07	; 7
    1e24:	69 2f       	mov	r22, r25
    1e26:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a0 e2       	ldi	r26, 0x20	; 32
    1e30:	b1 e4       	ldi	r27, 0x41	; 65
    1e32:	8b 87       	std	Y+11, r24	; 0x0b
    1e34:	9c 87       	std	Y+12, r25	; 0x0c
    1e36:	ad 87       	std	Y+13, r26	; 0x0d
    1e38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	4a e7       	ldi	r20, 0x7A	; 122
    1e48:	55 e4       	ldi	r21, 0x45	; 69
    1e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	8f 83       	std	Y+7, r24	; 0x07
    1e54:	98 87       	std	Y+8, r25	; 0x08
    1e56:	a9 87       	std	Y+9, r26	; 0x09
    1e58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5c:	78 85       	ldd	r23, Y+8	; 0x08
    1e5e:	89 85       	ldd	r24, Y+9	; 0x09
    1e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e8       	ldi	r20, 0x80	; 128
    1e68:	5f e3       	ldi	r21, 0x3F	; 63
    1e6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e6e:	88 23       	and	r24, r24
    1e70:	2c f4       	brge	.+10     	; 0x1e7c <seven_display_number+0x1f6>
		__ticks = 1;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9e 83       	std	Y+6, r25	; 0x06
    1e78:	8d 83       	std	Y+5, r24	; 0x05
    1e7a:	3f c0       	rjmp	.+126    	; 0x1efa <seven_display_number+0x274>
	else if (__tmp > 65535)
    1e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7e:	78 85       	ldd	r23, Y+8	; 0x08
    1e80:	89 85       	ldd	r24, Y+9	; 0x09
    1e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	3f ef       	ldi	r19, 0xFF	; 255
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	57 e4       	ldi	r21, 0x47	; 71
    1e8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e90:	18 16       	cp	r1, r24
    1e92:	4c f5       	brge	.+82     	; 0x1ee6 <seven_display_number+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e2       	ldi	r20, 0x20	; 32
    1ea2:	51 e4       	ldi	r21, 0x41	; 65
    1ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	9e 83       	std	Y+6, r25	; 0x06
    1eba:	8d 83       	std	Y+5, r24	; 0x05
    1ebc:	0f c0       	rjmp	.+30     	; 0x1edc <seven_display_number+0x256>
    1ebe:	80 e9       	ldi	r24, 0x90	; 144
    1ec0:	91 e0       	ldi	r25, 0x01	; 1
    1ec2:	9c 83       	std	Y+4, r25	; 0x04
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <seven_display_number+0x244>
    1ece:	9c 83       	std	Y+4, r25	; 0x04
    1ed0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1edc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ede:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	69 f7       	brne	.-38     	; 0x1ebe <seven_display_number+0x238>
    1ee4:	14 c0       	rjmp	.+40     	; 0x1f0e <seven_display_number+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee8:	78 85       	ldd	r23, Y+8	; 0x08
    1eea:	89 85       	ldd	r24, Y+9	; 0x09
    1eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
    1efa:	8d 81       	ldd	r24, Y+5	; 0x05
    1efc:	9e 81       	ldd	r25, Y+6	; 0x06
    1efe:	9a 83       	std	Y+2, r25	; 0x02
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <seven_display_number+0x280>
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1f0e:	6e 96       	adiw	r28, 0x1e	; 30
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	08 95       	ret

00001f20 <lcd_init>:
 */

#include "LCD.h"


void lcd_init(void) {
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	2e 97       	sbiw	r28, 0x0e	; 14
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
	DDRA|=0xf0;
    1f34:	aa e3       	ldi	r26, 0x3A	; 58
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	ea e3       	ldi	r30, 0x3A	; 58
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	80 6f       	ori	r24, 0xF0	; 240
    1f40:	8c 93       	st	X, r24
	DDRB|=0x0e;
    1f42:	a7 e3       	ldi	r26, 0x37	; 55
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e7 e3       	ldi	r30, 0x37	; 55
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	8e 60       	ori	r24, 0x0E	; 14
    1f4e:	8c 93       	st	X, r24
	DIO_Write(PORT_B2, Low);
    1f50:	8a e0       	ldi	r24, 0x0A	; 10
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	a0 ea       	ldi	r26, 0xA0	; 160
    1f5e:	b1 e4       	ldi	r27, 0x41	; 65
    1f60:	8b 87       	std	Y+11, r24	; 0x0b
    1f62:	9c 87       	std	Y+12, r25	; 0x0c
    1f64:	ad 87       	std	Y+13, r26	; 0x0d
    1f66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	4a e7       	ldi	r20, 0x7A	; 122
    1f76:	55 e4       	ldi	r21, 0x45	; 69
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	8f 83       	std	Y+7, r24	; 0x07
    1f82:	98 87       	std	Y+8, r25	; 0x08
    1f84:	a9 87       	std	Y+9, r26	; 0x09
    1f86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f88:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8a:	78 85       	ldd	r23, Y+8	; 0x08
    1f8c:	89 85       	ldd	r24, Y+9	; 0x09
    1f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f9c:	88 23       	and	r24, r24
    1f9e:	2c f4       	brge	.+10     	; 0x1faa <lcd_init+0x8a>
		__ticks = 1;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	9e 83       	std	Y+6, r25	; 0x06
    1fa6:	8d 83       	std	Y+5, r24	; 0x05
    1fa8:	3f c0       	rjmp	.+126    	; 0x2028 <lcd_init+0x108>
	else if (__tmp > 65535)
    1faa:	6f 81       	ldd	r22, Y+7	; 0x07
    1fac:	78 85       	ldd	r23, Y+8	; 0x08
    1fae:	89 85       	ldd	r24, Y+9	; 0x09
    1fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	3f ef       	ldi	r19, 0xFF	; 255
    1fb6:	4f e7       	ldi	r20, 0x7F	; 127
    1fb8:	57 e4       	ldi	r21, 0x47	; 71
    1fba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fbe:	18 16       	cp	r1, r24
    1fc0:	4c f5       	brge	.+82     	; 0x2014 <lcd_init+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e2       	ldi	r20, 0x20	; 32
    1fd0:	51 e4       	ldi	r21, 0x41	; 65
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	bc 01       	movw	r22, r24
    1fdc:	cd 01       	movw	r24, r26
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
    1fea:	0f c0       	rjmp	.+30     	; 0x200a <lcd_init+0xea>
    1fec:	80 e9       	ldi	r24, 0x90	; 144
    1fee:	91 e0       	ldi	r25, 0x01	; 1
    1ff0:	9c 83       	std	Y+4, r25	; 0x04
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <lcd_init+0xd8>
    1ffc:	9c 83       	std	Y+4, r25	; 0x04
    1ffe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
    2002:	9e 81       	ldd	r25, Y+6	; 0x06
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	69 f7       	brne	.-38     	; 0x1fec <lcd_init+0xcc>
    2012:	14 c0       	rjmp	.+40     	; 0x203c <lcd_init+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	9e 83       	std	Y+6, r25	; 0x06
    2026:	8d 83       	std	Y+5, r24	; 0x05
    2028:	8d 81       	ldd	r24, Y+5	; 0x05
    202a:	9e 81       	ldd	r25, Y+6	; 0x06
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <lcd_init+0x114>
    2038:	9a 83       	std	Y+2, r25	; 0x02
    203a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	lcd_cmd(0x01);
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	0e 94 3c 10 	call	0x2078	; 0x2078 <lcd_cmd>
	lcd_cmd(0x33);
    2042:	83 e3       	ldi	r24, 0x33	; 51
    2044:	0e 94 3c 10 	call	0x2078	; 0x2078 <lcd_cmd>
	lcd_cmd(0x32);
    2048:	82 e3       	ldi	r24, 0x32	; 50
    204a:	0e 94 3c 10 	call	0x2078	; 0x2078 <lcd_cmd>
	lcd_cmd(0x28);
    204e:	88 e2       	ldi	r24, 0x28	; 40
    2050:	0e 94 3c 10 	call	0x2078	; 0x2078 <lcd_cmd>
	lcd_cmd(0x0f);
    2054:	8f e0       	ldi	r24, 0x0F	; 15
    2056:	0e 94 3c 10 	call	0x2078	; 0x2078 <lcd_cmd>
	lcd_cmd(0x06);
    205a:	86 e0       	ldi	r24, 0x06	; 6
    205c:	0e 94 3c 10 	call	0x2078	; 0x2078 <lcd_cmd>
	lcd_cmd(0x01);
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	0e 94 3c 10 	call	0x2078	; 0x2078 <lcd_cmd>
//	lcd_cmd(0x80);
}
    2066:	2e 96       	adiw	r28, 0x0e	; 14
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <lcd_cmd>:

void lcd_cmd(uint8 cmd) {
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	c1 56       	subi	r28, 0x61	; 97
    2086:	d0 40       	sbci	r29, 0x00	; 0
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	fe 01       	movw	r30, r28
    2094:	ef 59       	subi	r30, 0x9F	; 159
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	80 83       	st	Z, r24
	DIO_Write(PORT_B2, Low);
    209a:	8a e0       	ldi	r24, 0x0A	; 10
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_B1, Low);
    20a2:	89 e0       	ldi	r24, 0x09	; 9
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	(GET_BIT(cmd, 4)) ? DIO_Write(PORT_A4, High) : DIO_Write(PORT_A4, Low);
    20aa:	fe 01       	movw	r30, r28
    20ac:	ef 59       	subi	r30, 0x9F	; 159
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	80 81       	ld	r24, Z
    20b2:	88 2f       	mov	r24, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	80 71       	andi	r24, 0x10	; 16
    20b8:	90 70       	andi	r25, 0x00	; 0
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	29 f0       	breq	.+10     	; 0x20c8 <lcd_cmd+0x50>
    20be:	84 e0       	ldi	r24, 0x04	; 4
    20c0:	61 e0       	ldi	r22, 0x01	; 1
    20c2:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <lcd_cmd+0x58>
    20c8:	84 e0       	ldi	r24, 0x04	; 4
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	(GET_BIT(cmd, 5)) ? DIO_Write(PORT_A5, High) : DIO_Write(PORT_A5, Low);
    20d0:	fe 01       	movw	r30, r28
    20d2:	ef 59       	subi	r30, 0x9F	; 159
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	80 81       	ld	r24, Z
    20d8:	88 2f       	mov	r24, r24
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	80 72       	andi	r24, 0x20	; 32
    20de:	90 70       	andi	r25, 0x00	; 0
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	29 f0       	breq	.+10     	; 0x20ee <lcd_cmd+0x76>
    20e4:	85 e0       	ldi	r24, 0x05	; 5
    20e6:	61 e0       	ldi	r22, 0x01	; 1
    20e8:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    20ec:	04 c0       	rjmp	.+8      	; 0x20f6 <lcd_cmd+0x7e>
    20ee:	85 e0       	ldi	r24, 0x05	; 5
    20f0:	60 e0       	ldi	r22, 0x00	; 0
    20f2:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	(GET_BIT(cmd, 6)) ? DIO_Write(PORT_A6, High) : DIO_Write(PORT_A6, Low);
    20f6:	fe 01       	movw	r30, r28
    20f8:	ef 59       	subi	r30, 0x9F	; 159
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	80 81       	ld	r24, Z
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	80 74       	andi	r24, 0x40	; 64
    2104:	90 70       	andi	r25, 0x00	; 0
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	29 f0       	breq	.+10     	; 0x2114 <lcd_cmd+0x9c>
    210a:	86 e0       	ldi	r24, 0x06	; 6
    210c:	61 e0       	ldi	r22, 0x01	; 1
    210e:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    2112:	04 c0       	rjmp	.+8      	; 0x211c <lcd_cmd+0xa4>
    2114:	86 e0       	ldi	r24, 0x06	; 6
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	(GET_BIT(cmd, 7)) ? DIO_Write(PORT_A7, High) : DIO_Write(PORT_A7, Low);
    211c:	fe 01       	movw	r30, r28
    211e:	ef 59       	subi	r30, 0x9F	; 159
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
    2124:	88 23       	and	r24, r24
    2126:	2c f4       	brge	.+10     	; 0x2132 <lcd_cmd+0xba>
    2128:	87 e0       	ldi	r24, 0x07	; 7
    212a:	61 e0       	ldi	r22, 0x01	; 1
    212c:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    2130:	04 c0       	rjmp	.+8      	; 0x213a <lcd_cmd+0xc2>
    2132:	87 e0       	ldi	r24, 0x07	; 7
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_B3, High);
    213a:	8b e0       	ldi	r24, 0x0B	; 11
    213c:	61 e0       	ldi	r22, 0x01	; 1
    213e:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    2142:	fe 01       	movw	r30, r28
    2144:	e3 5a       	subi	r30, 0xA3	; 163
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a0 e2       	ldi	r26, 0x20	; 32
    214e:	b1 e4       	ldi	r27, 0x41	; 65
    2150:	80 83       	st	Z, r24
    2152:	91 83       	std	Z+1, r25	; 0x01
    2154:	a2 83       	std	Z+2, r26	; 0x02
    2156:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2158:	8e 01       	movw	r16, r28
    215a:	07 5a       	subi	r16, 0xA7	; 167
    215c:	1f 4f       	sbci	r17, 0xFF	; 255
    215e:	fe 01       	movw	r30, r28
    2160:	e3 5a       	subi	r30, 0xA3	; 163
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	60 81       	ld	r22, Z
    2166:	71 81       	ldd	r23, Z+1	; 0x01
    2168:	82 81       	ldd	r24, Z+2	; 0x02
    216a:	93 81       	ldd	r25, Z+3	; 0x03
    216c:	2b ea       	ldi	r18, 0xAB	; 171
    216e:	3a ea       	ldi	r19, 0xAA	; 170
    2170:	4a ea       	ldi	r20, 0xAA	; 170
    2172:	50 e4       	ldi	r21, 0x40	; 64
    2174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	f8 01       	movw	r30, r16
    217e:	80 83       	st	Z, r24
    2180:	91 83       	std	Z+1, r25	; 0x01
    2182:	a2 83       	std	Z+2, r26	; 0x02
    2184:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2186:	fe 01       	movw	r30, r28
    2188:	e7 5a       	subi	r30, 0xA7	; 167
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	60 81       	ld	r22, Z
    218e:	71 81       	ldd	r23, Z+1	; 0x01
    2190:	82 81       	ldd	r24, Z+2	; 0x02
    2192:	93 81       	ldd	r25, Z+3	; 0x03
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e8       	ldi	r20, 0x80	; 128
    219a:	5f e3       	ldi	r21, 0x3F	; 63
    219c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a0:	88 23       	and	r24, r24
    21a2:	34 f4       	brge	.+12     	; 0x21b0 <lcd_cmd+0x138>
		__ticks = 1;
    21a4:	fe 01       	movw	r30, r28
    21a6:	e8 5a       	subi	r30, 0xA8	; 168
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	80 83       	st	Z, r24
    21ae:	e0 c0       	rjmp	.+448    	; 0x2370 <lcd_cmd+0x2f8>
	else if (__tmp > 255)
    21b0:	fe 01       	movw	r30, r28
    21b2:	e7 5a       	subi	r30, 0xA7	; 167
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	60 81       	ld	r22, Z
    21b8:	71 81       	ldd	r23, Z+1	; 0x01
    21ba:	82 81       	ldd	r24, Z+2	; 0x02
    21bc:	93 81       	ldd	r25, Z+3	; 0x03
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	4f e7       	ldi	r20, 0x7F	; 127
    21c4:	53 e4       	ldi	r21, 0x43	; 67
    21c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ca:	18 16       	cp	r1, r24
    21cc:	0c f0       	brlt	.+2      	; 0x21d0 <lcd_cmd+0x158>
    21ce:	c0 c0       	rjmp	.+384    	; 0x2350 <lcd_cmd+0x2d8>
	{
		_delay_ms(__us / 1000.0);
    21d0:	fe 01       	movw	r30, r28
    21d2:	e3 5a       	subi	r30, 0xA3	; 163
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	60 81       	ld	r22, Z
    21d8:	71 81       	ldd	r23, Z+1	; 0x01
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	93 81       	ldd	r25, Z+3	; 0x03
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	4a e7       	ldi	r20, 0x7A	; 122
    21e4:	54 e4       	ldi	r21, 0x44	; 68
    21e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	fe 01       	movw	r30, r28
    21f0:	ec 5a       	subi	r30, 0xAC	; 172
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	80 83       	st	Z, r24
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	a2 83       	std	Z+2, r26	; 0x02
    21fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fc:	8e 01       	movw	r16, r28
    21fe:	00 5b       	subi	r16, 0xB0	; 176
    2200:	1f 4f       	sbci	r17, 0xFF	; 255
    2202:	fe 01       	movw	r30, r28
    2204:	ec 5a       	subi	r30, 0xAC	; 172
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	60 81       	ld	r22, Z
    220a:	71 81       	ldd	r23, Z+1	; 0x01
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	93 81       	ldd	r25, Z+3	; 0x03
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	4a e7       	ldi	r20, 0x7A	; 122
    2216:	55 e4       	ldi	r21, 0x45	; 69
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	f8 01       	movw	r30, r16
    2222:	80 83       	st	Z, r24
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	a2 83       	std	Z+2, r26	; 0x02
    2228:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    222a:	fe 01       	movw	r30, r28
    222c:	e0 5b       	subi	r30, 0xB0	; 176
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	60 81       	ld	r22, Z
    2232:	71 81       	ldd	r23, Z+1	; 0x01
    2234:	82 81       	ldd	r24, Z+2	; 0x02
    2236:	93 81       	ldd	r25, Z+3	; 0x03
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e8       	ldi	r20, 0x80	; 128
    223e:	5f e3       	ldi	r21, 0x3F	; 63
    2240:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2244:	88 23       	and	r24, r24
    2246:	44 f4       	brge	.+16     	; 0x2258 <lcd_cmd+0x1e0>
		__ticks = 1;
    2248:	fe 01       	movw	r30, r28
    224a:	e2 5b       	subi	r30, 0xB2	; 178
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	80 83       	st	Z, r24
    2256:	64 c0       	rjmp	.+200    	; 0x2320 <lcd_cmd+0x2a8>
	else if (__tmp > 65535)
    2258:	fe 01       	movw	r30, r28
    225a:	e0 5b       	subi	r30, 0xB0	; 176
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	3f ef       	ldi	r19, 0xFF	; 255
    226a:	4f e7       	ldi	r20, 0x7F	; 127
    226c:	57 e4       	ldi	r21, 0x47	; 71
    226e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2272:	18 16       	cp	r1, r24
    2274:	0c f0       	brlt	.+2      	; 0x2278 <lcd_cmd+0x200>
    2276:	43 c0       	rjmp	.+134    	; 0x22fe <lcd_cmd+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2278:	fe 01       	movw	r30, r28
    227a:	ec 5a       	subi	r30, 0xAC	; 172
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	8e 01       	movw	r16, r28
    2298:	02 5b       	subi	r16, 0xB2	; 178
    229a:	1f 4f       	sbci	r17, 0xFF	; 255
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	f8 01       	movw	r30, r16
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	80 83       	st	Z, r24
    22ae:	1f c0       	rjmp	.+62     	; 0x22ee <lcd_cmd+0x276>
    22b0:	fe 01       	movw	r30, r28
    22b2:	e4 5b       	subi	r30, 0xB4	; 180
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 e9       	ldi	r24, 0x90	; 144
    22b8:	91 e0       	ldi	r25, 0x01	; 1
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	80 83       	st	Z, r24
    22be:	fe 01       	movw	r30, r28
    22c0:	e4 5b       	subi	r30, 0xB4	; 180
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	80 81       	ld	r24, Z
    22c6:	91 81       	ldd	r25, Z+1	; 0x01
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <lcd_cmd+0x250>
    22cc:	fe 01       	movw	r30, r28
    22ce:	e4 5b       	subi	r30, 0xB4	; 180
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	91 83       	std	Z+1, r25	; 0x01
    22d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d6:	de 01       	movw	r26, r28
    22d8:	a2 5b       	subi	r26, 0xB2	; 178
    22da:	bf 4f       	sbci	r27, 0xFF	; 255
    22dc:	fe 01       	movw	r30, r28
    22de:	e2 5b       	subi	r30, 0xB2	; 178
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	11 96       	adiw	r26, 0x01	; 1
    22ea:	9c 93       	st	X, r25
    22ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ee:	fe 01       	movw	r30, r28
    22f0:	e2 5b       	subi	r30, 0xB2	; 178
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	d1 f6       	brne	.-76     	; 0x22b0 <lcd_cmd+0x238>
    22fc:	4b c0       	rjmp	.+150    	; 0x2394 <lcd_cmd+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fe:	8e 01       	movw	r16, r28
    2300:	02 5b       	subi	r16, 0xB2	; 178
    2302:	1f 4f       	sbci	r17, 0xFF	; 255
    2304:	fe 01       	movw	r30, r28
    2306:	e0 5b       	subi	r30, 0xB0	; 176
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	60 81       	ld	r22, Z
    230c:	71 81       	ldd	r23, Z+1	; 0x01
    230e:	82 81       	ldd	r24, Z+2	; 0x02
    2310:	93 81       	ldd	r25, Z+3	; 0x03
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	f8 01       	movw	r30, r16
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	de 01       	movw	r26, r28
    2322:	a6 5b       	subi	r26, 0xB6	; 182
    2324:	bf 4f       	sbci	r27, 0xFF	; 255
    2326:	fe 01       	movw	r30, r28
    2328:	e2 5b       	subi	r30, 0xB2	; 178
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	11 96       	adiw	r26, 0x01	; 1
    2332:	9c 93       	st	X, r25
    2334:	8e 93       	st	-X, r24
    2336:	fe 01       	movw	r30, r28
    2338:	e6 5b       	subi	r30, 0xB6	; 182
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	80 81       	ld	r24, Z
    233e:	91 81       	ldd	r25, Z+1	; 0x01
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <lcd_cmd+0x2c8>
    2344:	fe 01       	movw	r30, r28
    2346:	e6 5b       	subi	r30, 0xB6	; 182
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
    234e:	22 c0       	rjmp	.+68     	; 0x2394 <lcd_cmd+0x31c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2350:	8e 01       	movw	r16, r28
    2352:	08 5a       	subi	r16, 0xA8	; 168
    2354:	1f 4f       	sbci	r17, 0xFF	; 255
    2356:	fe 01       	movw	r30, r28
    2358:	e7 5a       	subi	r30, 0xA7	; 167
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	60 81       	ld	r22, Z
    235e:	71 81       	ldd	r23, Z+1	; 0x01
    2360:	82 81       	ldd	r24, Z+2	; 0x02
    2362:	93 81       	ldd	r25, Z+3	; 0x03
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	f8 01       	movw	r30, r16
    236e:	80 83       	st	Z, r24
    2370:	de 01       	movw	r26, r28
    2372:	a7 5b       	subi	r26, 0xB7	; 183
    2374:	bf 4f       	sbci	r27, 0xFF	; 255
    2376:	fe 01       	movw	r30, r28
    2378:	e8 5a       	subi	r30, 0xA8	; 168
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 81       	ld	r24, Z
    237e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2380:	fe 01       	movw	r30, r28
    2382:	e7 5b       	subi	r30, 0xB7	; 183
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 81       	ld	r24, Z
    2388:	8a 95       	dec	r24
    238a:	f1 f7       	brne	.-4      	; 0x2388 <lcd_cmd+0x310>
    238c:	fe 01       	movw	r30, r28
    238e:	e7 5b       	subi	r30, 0xB7	; 183
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 83       	st	Z, r24
	_delay_us(10);
	DIO_Write(PORT_B3, Low);
    2394:	8b e0       	ldi	r24, 0x0B	; 11
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    239c:	fe 01       	movw	r30, r28
    239e:	eb 5b       	subi	r30, 0xBB	; 187
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	a8 e4       	ldi	r26, 0x48	; 72
    23a8:	b3 e4       	ldi	r27, 0x43	; 67
    23aa:	80 83       	st	Z, r24
    23ac:	91 83       	std	Z+1, r25	; 0x01
    23ae:	a2 83       	std	Z+2, r26	; 0x02
    23b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23b2:	8e 01       	movw	r16, r28
    23b4:	0f 5b       	subi	r16, 0xBF	; 191
    23b6:	1f 4f       	sbci	r17, 0xFF	; 255
    23b8:	fe 01       	movw	r30, r28
    23ba:	eb 5b       	subi	r30, 0xBB	; 187
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	60 81       	ld	r22, Z
    23c0:	71 81       	ldd	r23, Z+1	; 0x01
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	93 81       	ldd	r25, Z+3	; 0x03
    23c6:	2b ea       	ldi	r18, 0xAB	; 171
    23c8:	3a ea       	ldi	r19, 0xAA	; 170
    23ca:	4a ea       	ldi	r20, 0xAA	; 170
    23cc:	50 e4       	ldi	r21, 0x40	; 64
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	f8 01       	movw	r30, r16
    23d8:	80 83       	st	Z, r24
    23da:	91 83       	std	Z+1, r25	; 0x01
    23dc:	a2 83       	std	Z+2, r26	; 0x02
    23de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23e0:	fe 01       	movw	r30, r28
    23e2:	ef 5b       	subi	r30, 0xBF	; 191
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	60 81       	ld	r22, Z
    23e8:	71 81       	ldd	r23, Z+1	; 0x01
    23ea:	82 81       	ldd	r24, Z+2	; 0x02
    23ec:	93 81       	ldd	r25, Z+3	; 0x03
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e8       	ldi	r20, 0x80	; 128
    23f4:	5f e3       	ldi	r21, 0x3F	; 63
    23f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23fa:	88 23       	and	r24, r24
    23fc:	34 f4       	brge	.+12     	; 0x240a <lcd_cmd+0x392>
		__ticks = 1;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	fe 01       	movw	r30, r28
    2402:	e0 5c       	subi	r30, 0xC0	; 192
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	80 83       	st	Z, r24
    2408:	9d c0       	rjmp	.+314    	; 0x2544 <lcd_cmd+0x4cc>
	else if (__tmp > 255)
    240a:	fe 01       	movw	r30, r28
    240c:	ef 5b       	subi	r30, 0xBF	; 191
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4f e7       	ldi	r20, 0x7F	; 127
    241e:	53 e4       	ldi	r21, 0x43	; 67
    2420:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2424:	18 16       	cp	r1, r24
    2426:	0c f0       	brlt	.+2      	; 0x242a <lcd_cmd+0x3b2>
    2428:	7e c0       	rjmp	.+252    	; 0x2526 <lcd_cmd+0x4ae>
	{
		_delay_ms(__us / 1000.0);
    242a:	fe 01       	movw	r30, r28
    242c:	eb 5b       	subi	r30, 0xBB	; 187
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	60 81       	ld	r22, Z
    2432:	71 81       	ldd	r23, Z+1	; 0x01
    2434:	82 81       	ldd	r24, Z+2	; 0x02
    2436:	93 81       	ldd	r25, Z+3	; 0x03
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	4a e7       	ldi	r20, 0x7A	; 122
    243e:	54 e4       	ldi	r21, 0x44	; 68
    2440:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	8c af       	std	Y+60, r24	; 0x3c
    244a:	9d af       	std	Y+61, r25	; 0x3d
    244c:	ae af       	std	Y+62, r26	; 0x3e
    244e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2450:	6c ad       	ldd	r22, Y+60	; 0x3c
    2452:	7d ad       	ldd	r23, Y+61	; 0x3d
    2454:	8e ad       	ldd	r24, Y+62	; 0x3e
    2456:	9f ad       	ldd	r25, Y+63	; 0x3f
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	4a e7       	ldi	r20, 0x7A	; 122
    245e:	55 e4       	ldi	r21, 0x45	; 69
    2460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	88 af       	std	Y+56, r24	; 0x38
    246a:	99 af       	std	Y+57, r25	; 0x39
    246c:	aa af       	std	Y+58, r26	; 0x3a
    246e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2470:	68 ad       	ldd	r22, Y+56	; 0x38
    2472:	79 ad       	ldd	r23, Y+57	; 0x39
    2474:	8a ad       	ldd	r24, Y+58	; 0x3a
    2476:	9b ad       	ldd	r25, Y+59	; 0x3b
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e8       	ldi	r20, 0x80	; 128
    247e:	5f e3       	ldi	r21, 0x3F	; 63
    2480:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2484:	88 23       	and	r24, r24
    2486:	2c f4       	brge	.+10     	; 0x2492 <lcd_cmd+0x41a>
		__ticks = 1;
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	9f ab       	std	Y+55, r25	; 0x37
    248e:	8e ab       	std	Y+54, r24	; 0x36
    2490:	3f c0       	rjmp	.+126    	; 0x2510 <lcd_cmd+0x498>
	else if (__tmp > 65535)
    2492:	68 ad       	ldd	r22, Y+56	; 0x38
    2494:	79 ad       	ldd	r23, Y+57	; 0x39
    2496:	8a ad       	ldd	r24, Y+58	; 0x3a
    2498:	9b ad       	ldd	r25, Y+59	; 0x3b
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	3f ef       	ldi	r19, 0xFF	; 255
    249e:	4f e7       	ldi	r20, 0x7F	; 127
    24a0:	57 e4       	ldi	r21, 0x47	; 71
    24a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a6:	18 16       	cp	r1, r24
    24a8:	4c f5       	brge	.+82     	; 0x24fc <lcd_cmd+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24aa:	6c ad       	ldd	r22, Y+60	; 0x3c
    24ac:	7d ad       	ldd	r23, Y+61	; 0x3d
    24ae:	8e ad       	ldd	r24, Y+62	; 0x3e
    24b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e2       	ldi	r20, 0x20	; 32
    24b8:	51 e4       	ldi	r21, 0x41	; 65
    24ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	bc 01       	movw	r22, r24
    24c4:	cd 01       	movw	r24, r26
    24c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	9f ab       	std	Y+55, r25	; 0x37
    24d0:	8e ab       	std	Y+54, r24	; 0x36
    24d2:	0f c0       	rjmp	.+30     	; 0x24f2 <lcd_cmd+0x47a>
    24d4:	80 e9       	ldi	r24, 0x90	; 144
    24d6:	91 e0       	ldi	r25, 0x01	; 1
    24d8:	9d ab       	std	Y+53, r25	; 0x35
    24da:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24dc:	8c a9       	ldd	r24, Y+52	; 0x34
    24de:	9d a9       	ldd	r25, Y+53	; 0x35
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <lcd_cmd+0x468>
    24e4:	9d ab       	std	Y+53, r25	; 0x35
    24e6:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e8:	8e a9       	ldd	r24, Y+54	; 0x36
    24ea:	9f a9       	ldd	r25, Y+55	; 0x37
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	9f ab       	std	Y+55, r25	; 0x37
    24f0:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f2:	8e a9       	ldd	r24, Y+54	; 0x36
    24f4:	9f a9       	ldd	r25, Y+55	; 0x37
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	69 f7       	brne	.-38     	; 0x24d4 <lcd_cmd+0x45c>
    24fa:	2d c0       	rjmp	.+90     	; 0x2556 <lcd_cmd+0x4de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fc:	68 ad       	ldd	r22, Y+56	; 0x38
    24fe:	79 ad       	ldd	r23, Y+57	; 0x39
    2500:	8a ad       	ldd	r24, Y+58	; 0x3a
    2502:	9b ad       	ldd	r25, Y+59	; 0x3b
    2504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	9f ab       	std	Y+55, r25	; 0x37
    250e:	8e ab       	std	Y+54, r24	; 0x36
    2510:	8e a9       	ldd	r24, Y+54	; 0x36
    2512:	9f a9       	ldd	r25, Y+55	; 0x37
    2514:	9b ab       	std	Y+51, r25	; 0x33
    2516:	8a ab       	std	Y+50, r24	; 0x32
    2518:	8a a9       	ldd	r24, Y+50	; 0x32
    251a:	9b a9       	ldd	r25, Y+51	; 0x33
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <lcd_cmd+0x4a4>
    2520:	9b ab       	std	Y+51, r25	; 0x33
    2522:	8a ab       	std	Y+50, r24	; 0x32
    2524:	18 c0       	rjmp	.+48     	; 0x2556 <lcd_cmd+0x4de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2526:	fe 01       	movw	r30, r28
    2528:	ef 5b       	subi	r30, 0xBF	; 191
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	60 81       	ld	r22, Z
    252e:	71 81       	ldd	r23, Z+1	; 0x01
    2530:	82 81       	ldd	r24, Z+2	; 0x02
    2532:	93 81       	ldd	r25, Z+3	; 0x03
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	fe 01       	movw	r30, r28
    253e:	e0 5c       	subi	r30, 0xC0	; 192
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	80 83       	st	Z, r24
    2544:	fe 01       	movw	r30, r28
    2546:	e0 5c       	subi	r30, 0xC0	; 192
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    254e:	89 a9       	ldd	r24, Y+49	; 0x31
    2550:	8a 95       	dec	r24
    2552:	f1 f7       	brne	.-4      	; 0x2550 <lcd_cmd+0x4d8>
    2554:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);
	(GET_BIT(cmd, 0)) ? DIO_Write(PORT_A4, High) : DIO_Write(PORT_A4, Low);
    2556:	fe 01       	movw	r30, r28
    2558:	ef 59       	subi	r30, 0x9F	; 159
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	88 2f       	mov	r24, r24
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	81 70       	andi	r24, 0x01	; 1
    2564:	90 70       	andi	r25, 0x00	; 0
    2566:	88 23       	and	r24, r24
    2568:	29 f0       	breq	.+10     	; 0x2574 <lcd_cmd+0x4fc>
    256a:	84 e0       	ldi	r24, 0x04	; 4
    256c:	61 e0       	ldi	r22, 0x01	; 1
    256e:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    2572:	04 c0       	rjmp	.+8      	; 0x257c <lcd_cmd+0x504>
    2574:	84 e0       	ldi	r24, 0x04	; 4
    2576:	60 e0       	ldi	r22, 0x00	; 0
    2578:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	(GET_BIT(cmd, 1)) ? DIO_Write(PORT_A5, High) : DIO_Write(PORT_A5, Low);
    257c:	fe 01       	movw	r30, r28
    257e:	ef 59       	subi	r30, 0x9F	; 159
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 81       	ld	r24, Z
    2584:	88 2f       	mov	r24, r24
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	82 70       	andi	r24, 0x02	; 2
    258a:	90 70       	andi	r25, 0x00	; 0
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	29 f0       	breq	.+10     	; 0x259a <lcd_cmd+0x522>
    2590:	85 e0       	ldi	r24, 0x05	; 5
    2592:	61 e0       	ldi	r22, 0x01	; 1
    2594:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    2598:	04 c0       	rjmp	.+8      	; 0x25a2 <lcd_cmd+0x52a>
    259a:	85 e0       	ldi	r24, 0x05	; 5
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	(GET_BIT(cmd, 2)) ? DIO_Write(PORT_A6, High) : DIO_Write(PORT_A6, Low);
    25a2:	fe 01       	movw	r30, r28
    25a4:	ef 59       	subi	r30, 0x9F	; 159
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	80 81       	ld	r24, Z
    25aa:	88 2f       	mov	r24, r24
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	84 70       	andi	r24, 0x04	; 4
    25b0:	90 70       	andi	r25, 0x00	; 0
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	29 f0       	breq	.+10     	; 0x25c0 <lcd_cmd+0x548>
    25b6:	86 e0       	ldi	r24, 0x06	; 6
    25b8:	61 e0       	ldi	r22, 0x01	; 1
    25ba:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    25be:	04 c0       	rjmp	.+8      	; 0x25c8 <lcd_cmd+0x550>
    25c0:	86 e0       	ldi	r24, 0x06	; 6
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	(GET_BIT(cmd, 3)) ? DIO_Write(PORT_A7, High) : DIO_Write(PORT_A7, Low);
    25c8:	fe 01       	movw	r30, r28
    25ca:	ef 59       	subi	r30, 0x9F	; 159
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	80 81       	ld	r24, Z
    25d0:	88 2f       	mov	r24, r24
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	88 70       	andi	r24, 0x08	; 8
    25d6:	90 70       	andi	r25, 0x00	; 0
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	29 f0       	breq	.+10     	; 0x25e6 <lcd_cmd+0x56e>
    25dc:	87 e0       	ldi	r24, 0x07	; 7
    25de:	61 e0       	ldi	r22, 0x01	; 1
    25e0:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    25e4:	04 c0       	rjmp	.+8      	; 0x25ee <lcd_cmd+0x576>
    25e6:	87 e0       	ldi	r24, 0x07	; 7
    25e8:	60 e0       	ldi	r22, 0x00	; 0
    25ea:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_B3, High);
    25ee:	8b e0       	ldi	r24, 0x0B	; 11
    25f0:	61 e0       	ldi	r22, 0x01	; 1
    25f2:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	a0 e2       	ldi	r26, 0x20	; 32
    25fc:	b1 e4       	ldi	r27, 0x41	; 65
    25fe:	8d a7       	std	Y+45, r24	; 0x2d
    2600:	9e a7       	std	Y+46, r25	; 0x2e
    2602:	af a7       	std	Y+47, r26	; 0x2f
    2604:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2606:	6d a5       	ldd	r22, Y+45	; 0x2d
    2608:	7e a5       	ldd	r23, Y+46	; 0x2e
    260a:	8f a5       	ldd	r24, Y+47	; 0x2f
    260c:	98 a9       	ldd	r25, Y+48	; 0x30
    260e:	2b ea       	ldi	r18, 0xAB	; 171
    2610:	3a ea       	ldi	r19, 0xAA	; 170
    2612:	4a ea       	ldi	r20, 0xAA	; 170
    2614:	50 e4       	ldi	r21, 0x40	; 64
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	89 a7       	std	Y+41, r24	; 0x29
    2620:	9a a7       	std	Y+42, r25	; 0x2a
    2622:	ab a7       	std	Y+43, r26	; 0x2b
    2624:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2626:	69 a5       	ldd	r22, Y+41	; 0x29
    2628:	7a a5       	ldd	r23, Y+42	; 0x2a
    262a:	8b a5       	ldd	r24, Y+43	; 0x2b
    262c:	9c a5       	ldd	r25, Y+44	; 0x2c
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e8       	ldi	r20, 0x80	; 128
    2634:	5f e3       	ldi	r21, 0x3F	; 63
    2636:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    263a:	88 23       	and	r24, r24
    263c:	1c f4       	brge	.+6      	; 0x2644 <lcd_cmd+0x5cc>
		__ticks = 1;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	88 a7       	std	Y+40, r24	; 0x28
    2642:	91 c0       	rjmp	.+290    	; 0x2766 <lcd_cmd+0x6ee>
	else if (__tmp > 255)
    2644:	69 a5       	ldd	r22, Y+41	; 0x29
    2646:	7a a5       	ldd	r23, Y+42	; 0x2a
    2648:	8b a5       	ldd	r24, Y+43	; 0x2b
    264a:	9c a5       	ldd	r25, Y+44	; 0x2c
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	4f e7       	ldi	r20, 0x7F	; 127
    2652:	53 e4       	ldi	r21, 0x43	; 67
    2654:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2658:	18 16       	cp	r1, r24
    265a:	0c f0       	brlt	.+2      	; 0x265e <lcd_cmd+0x5e6>
    265c:	7b c0       	rjmp	.+246    	; 0x2754 <lcd_cmd+0x6dc>
	{
		_delay_ms(__us / 1000.0);
    265e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2660:	7e a5       	ldd	r23, Y+46	; 0x2e
    2662:	8f a5       	ldd	r24, Y+47	; 0x2f
    2664:	98 a9       	ldd	r25, Y+48	; 0x30
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a e7       	ldi	r20, 0x7A	; 122
    266c:	54 e4       	ldi	r21, 0x44	; 68
    266e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8c a3       	std	Y+36, r24	; 0x24
    2678:	9d a3       	std	Y+37, r25	; 0x25
    267a:	ae a3       	std	Y+38, r26	; 0x26
    267c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267e:	6c a1       	ldd	r22, Y+36	; 0x24
    2680:	7d a1       	ldd	r23, Y+37	; 0x25
    2682:	8e a1       	ldd	r24, Y+38	; 0x26
    2684:	9f a1       	ldd	r25, Y+39	; 0x27
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a e7       	ldi	r20, 0x7A	; 122
    268c:	55 e4       	ldi	r21, 0x45	; 69
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	88 a3       	std	Y+32, r24	; 0x20
    2698:	99 a3       	std	Y+33, r25	; 0x21
    269a:	aa a3       	std	Y+34, r26	; 0x22
    269c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    269e:	68 a1       	ldd	r22, Y+32	; 0x20
    26a0:	79 a1       	ldd	r23, Y+33	; 0x21
    26a2:	8a a1       	ldd	r24, Y+34	; 0x22
    26a4:	9b a1       	ldd	r25, Y+35	; 0x23
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	5f e3       	ldi	r21, 0x3F	; 63
    26ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <lcd_cmd+0x648>
		__ticks = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9f 8f       	std	Y+31, r25	; 0x1f
    26bc:	8e 8f       	std	Y+30, r24	; 0x1e
    26be:	3f c0       	rjmp	.+126    	; 0x273e <lcd_cmd+0x6c6>
	else if (__tmp > 65535)
    26c0:	68 a1       	ldd	r22, Y+32	; 0x20
    26c2:	79 a1       	ldd	r23, Y+33	; 0x21
    26c4:	8a a1       	ldd	r24, Y+34	; 0x22
    26c6:	9b a1       	ldd	r25, Y+35	; 0x23
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	3f ef       	ldi	r19, 0xFF	; 255
    26cc:	4f e7       	ldi	r20, 0x7F	; 127
    26ce:	57 e4       	ldi	r21, 0x47	; 71
    26d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26d4:	18 16       	cp	r1, r24
    26d6:	4c f5       	brge	.+82     	; 0x272a <lcd_cmd+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d8:	6c a1       	ldd	r22, Y+36	; 0x24
    26da:	7d a1       	ldd	r23, Y+37	; 0x25
    26dc:	8e a1       	ldd	r24, Y+38	; 0x26
    26de:	9f a1       	ldd	r25, Y+39	; 0x27
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9f 8f       	std	Y+31, r25	; 0x1f
    26fe:	8e 8f       	std	Y+30, r24	; 0x1e
    2700:	0f c0       	rjmp	.+30     	; 0x2720 <lcd_cmd+0x6a8>
    2702:	80 e9       	ldi	r24, 0x90	; 144
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	9d 8f       	std	Y+29, r25	; 0x1d
    2708:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    270a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    270c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <lcd_cmd+0x696>
    2712:	9d 8f       	std	Y+29, r25	; 0x1d
    2714:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2718:	9f 8d       	ldd	r25, Y+31	; 0x1f
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	9f 8f       	std	Y+31, r25	; 0x1f
    271e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2722:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	69 f7       	brne	.-38     	; 0x2702 <lcd_cmd+0x68a>
    2728:	24 c0       	rjmp	.+72     	; 0x2772 <lcd_cmd+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272a:	68 a1       	ldd	r22, Y+32	; 0x20
    272c:	79 a1       	ldd	r23, Y+33	; 0x21
    272e:	8a a1       	ldd	r24, Y+34	; 0x22
    2730:	9b a1       	ldd	r25, Y+35	; 0x23
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9f 8f       	std	Y+31, r25	; 0x1f
    273c:	8e 8f       	std	Y+30, r24	; 0x1e
    273e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2740:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2742:	9b 8f       	std	Y+27, r25	; 0x1b
    2744:	8a 8f       	std	Y+26, r24	; 0x1a
    2746:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2748:	9b 8d       	ldd	r25, Y+27	; 0x1b
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <lcd_cmd+0x6d2>
    274e:	9b 8f       	std	Y+27, r25	; 0x1b
    2750:	8a 8f       	std	Y+26, r24	; 0x1a
    2752:	0f c0       	rjmp	.+30     	; 0x2772 <lcd_cmd+0x6fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2754:	69 a5       	ldd	r22, Y+41	; 0x29
    2756:	7a a5       	ldd	r23, Y+42	; 0x2a
    2758:	8b a5       	ldd	r24, Y+43	; 0x2b
    275a:	9c a5       	ldd	r25, Y+44	; 0x2c
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	88 a7       	std	Y+40, r24	; 0x28
    2766:	88 a5       	ldd	r24, Y+40	; 0x28
    2768:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    276a:	89 8d       	ldd	r24, Y+25	; 0x19
    276c:	8a 95       	dec	r24
    276e:	f1 f7       	brne	.-4      	; 0x276c <lcd_cmd+0x6f4>
    2770:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_Write(PORT_B3, Low);
    2772:	8b e0       	ldi	r24, 0x0B	; 11
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a8 e4       	ldi	r26, 0x48	; 72
    2780:	b3 e4       	ldi	r27, 0x43	; 67
    2782:	8d 8b       	std	Y+21, r24	; 0x15
    2784:	9e 8b       	std	Y+22, r25	; 0x16
    2786:	af 8b       	std	Y+23, r26	; 0x17
    2788:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    278a:	6d 89       	ldd	r22, Y+21	; 0x15
    278c:	7e 89       	ldd	r23, Y+22	; 0x16
    278e:	8f 89       	ldd	r24, Y+23	; 0x17
    2790:	98 8d       	ldd	r25, Y+24	; 0x18
    2792:	2b ea       	ldi	r18, 0xAB	; 171
    2794:	3a ea       	ldi	r19, 0xAA	; 170
    2796:	4a ea       	ldi	r20, 0xAA	; 170
    2798:	50 e4       	ldi	r21, 0x40	; 64
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	89 8b       	std	Y+17, r24	; 0x11
    27a4:	9a 8b       	std	Y+18, r25	; 0x12
    27a6:	ab 8b       	std	Y+19, r26	; 0x13
    27a8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    27aa:	69 89       	ldd	r22, Y+17	; 0x11
    27ac:	7a 89       	ldd	r23, Y+18	; 0x12
    27ae:	8b 89       	ldd	r24, Y+19	; 0x13
    27b0:	9c 89       	ldd	r25, Y+20	; 0x14
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e8       	ldi	r20, 0x80	; 128
    27b8:	5f e3       	ldi	r21, 0x3F	; 63
    27ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27be:	88 23       	and	r24, r24
    27c0:	1c f4       	brge	.+6      	; 0x27c8 <lcd_cmd+0x750>
		__ticks = 1;
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	88 8b       	std	Y+16, r24	; 0x10
    27c6:	91 c0       	rjmp	.+290    	; 0x28ea <lcd_cmd+0x872>
	else if (__tmp > 255)
    27c8:	69 89       	ldd	r22, Y+17	; 0x11
    27ca:	7a 89       	ldd	r23, Y+18	; 0x12
    27cc:	8b 89       	ldd	r24, Y+19	; 0x13
    27ce:	9c 89       	ldd	r25, Y+20	; 0x14
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	4f e7       	ldi	r20, 0x7F	; 127
    27d6:	53 e4       	ldi	r21, 0x43	; 67
    27d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27dc:	18 16       	cp	r1, r24
    27de:	0c f0       	brlt	.+2      	; 0x27e2 <lcd_cmd+0x76a>
    27e0:	7b c0       	rjmp	.+246    	; 0x28d8 <lcd_cmd+0x860>
	{
		_delay_ms(__us / 1000.0);
    27e2:	6d 89       	ldd	r22, Y+21	; 0x15
    27e4:	7e 89       	ldd	r23, Y+22	; 0x16
    27e6:	8f 89       	ldd	r24, Y+23	; 0x17
    27e8:	98 8d       	ldd	r25, Y+24	; 0x18
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	4a e7       	ldi	r20, 0x7A	; 122
    27f0:	54 e4       	ldi	r21, 0x44	; 68
    27f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	8c 87       	std	Y+12, r24	; 0x0c
    27fc:	9d 87       	std	Y+13, r25	; 0x0d
    27fe:	ae 87       	std	Y+14, r26	; 0x0e
    2800:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2802:	6c 85       	ldd	r22, Y+12	; 0x0c
    2804:	7d 85       	ldd	r23, Y+13	; 0x0d
    2806:	8e 85       	ldd	r24, Y+14	; 0x0e
    2808:	9f 85       	ldd	r25, Y+15	; 0x0f
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	4a e7       	ldi	r20, 0x7A	; 122
    2810:	55 e4       	ldi	r21, 0x45	; 69
    2812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	88 87       	std	Y+8, r24	; 0x08
    281c:	99 87       	std	Y+9, r25	; 0x09
    281e:	aa 87       	std	Y+10, r26	; 0x0a
    2820:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2822:	68 85       	ldd	r22, Y+8	; 0x08
    2824:	79 85       	ldd	r23, Y+9	; 0x09
    2826:	8a 85       	ldd	r24, Y+10	; 0x0a
    2828:	9b 85       	ldd	r25, Y+11	; 0x0b
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	2c f4       	brge	.+10     	; 0x2844 <lcd_cmd+0x7cc>
		__ticks = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9f 83       	std	Y+7, r25	; 0x07
    2840:	8e 83       	std	Y+6, r24	; 0x06
    2842:	3f c0       	rjmp	.+126    	; 0x28c2 <lcd_cmd+0x84a>
	else if (__tmp > 65535)
    2844:	68 85       	ldd	r22, Y+8	; 0x08
    2846:	79 85       	ldd	r23, Y+9	; 0x09
    2848:	8a 85       	ldd	r24, Y+10	; 0x0a
    284a:	9b 85       	ldd	r25, Y+11	; 0x0b
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	3f ef       	ldi	r19, 0xFF	; 255
    2850:	4f e7       	ldi	r20, 0x7F	; 127
    2852:	57 e4       	ldi	r21, 0x47	; 71
    2854:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2858:	18 16       	cp	r1, r24
    285a:	4c f5       	brge	.+82     	; 0x28ae <lcd_cmd+0x836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	6c 85       	ldd	r22, Y+12	; 0x0c
    285e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2860:	8e 85       	ldd	r24, Y+14	; 0x0e
    2862:	9f 85       	ldd	r25, Y+15	; 0x0f
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e2       	ldi	r20, 0x20	; 32
    286a:	51 e4       	ldi	r21, 0x41	; 65
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9f 83       	std	Y+7, r25	; 0x07
    2882:	8e 83       	std	Y+6, r24	; 0x06
    2884:	0f c0       	rjmp	.+30     	; 0x28a4 <lcd_cmd+0x82c>
    2886:	80 e9       	ldi	r24, 0x90	; 144
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	9d 83       	std	Y+5, r25	; 0x05
    288c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    288e:	8c 81       	ldd	r24, Y+4	; 0x04
    2890:	9d 81       	ldd	r25, Y+5	; 0x05
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <lcd_cmd+0x81a>
    2896:	9d 83       	std	Y+5, r25	; 0x05
    2898:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289a:	8e 81       	ldd	r24, Y+6	; 0x06
    289c:	9f 81       	ldd	r25, Y+7	; 0x07
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	9f 83       	std	Y+7, r25	; 0x07
    28a2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a4:	8e 81       	ldd	r24, Y+6	; 0x06
    28a6:	9f 81       	ldd	r25, Y+7	; 0x07
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	69 f7       	brne	.-38     	; 0x2886 <lcd_cmd+0x80e>
    28ac:	24 c0       	rjmp	.+72     	; 0x28f6 <lcd_cmd+0x87e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ae:	68 85       	ldd	r22, Y+8	; 0x08
    28b0:	79 85       	ldd	r23, Y+9	; 0x09
    28b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9f 83       	std	Y+7, r25	; 0x07
    28c0:	8e 83       	std	Y+6, r24	; 0x06
    28c2:	8e 81       	ldd	r24, Y+6	; 0x06
    28c4:	9f 81       	ldd	r25, Y+7	; 0x07
    28c6:	9b 83       	std	Y+3, r25	; 0x03
    28c8:	8a 83       	std	Y+2, r24	; 0x02
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	9b 81       	ldd	r25, Y+3	; 0x03
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <lcd_cmd+0x856>
    28d2:	9b 83       	std	Y+3, r25	; 0x03
    28d4:	8a 83       	std	Y+2, r24	; 0x02
    28d6:	0f c0       	rjmp	.+30     	; 0x28f6 <lcd_cmd+0x87e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28d8:	69 89       	ldd	r22, Y+17	; 0x11
    28da:	7a 89       	ldd	r23, Y+18	; 0x12
    28dc:	8b 89       	ldd	r24, Y+19	; 0x13
    28de:	9c 89       	ldd	r25, Y+20	; 0x14
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	88 8b       	std	Y+16, r24	; 0x10
    28ea:	88 89       	ldd	r24, Y+16	; 0x10
    28ec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	8a 95       	dec	r24
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <lcd_cmd+0x878>
    28f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    28f6:	cf 59       	subi	r28, 0x9F	; 159
    28f8:	df 4f       	sbci	r29, 0xFF	; 255
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	1f 91       	pop	r17
    290a:	0f 91       	pop	r16
    290c:	08 95       	ret

0000290e <lcd_data>:

void lcd_data(uint8 data) {
    290e:	0f 93       	push	r16
    2910:	1f 93       	push	r17
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	c1 56       	subi	r28, 0x61	; 97
    291c:	d0 40       	sbci	r29, 0x00	; 0
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	fe 01       	movw	r30, r28
    292a:	ef 59       	subi	r30, 0x9F	; 159
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	80 83       	st	Z, r24
	DIO_Write(PORT_B2, Low);
    2930:	8a e0       	ldi	r24, 0x0A	; 10
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_B1, High);
    2938:	89 e0       	ldi	r24, 0x09	; 9
    293a:	61 e0       	ldi	r22, 0x01	; 1
    293c:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	(GET_BIT(data, 0)) ? DIO_Write(PORT_A4, High) : DIO_Write(PORT_A4, Low);
    2940:	fe 01       	movw	r30, r28
    2942:	ef 59       	subi	r30, 0x9F	; 159
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	80 81       	ld	r24, Z
    2948:	88 2f       	mov	r24, r24
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	81 70       	andi	r24, 0x01	; 1
    294e:	90 70       	andi	r25, 0x00	; 0
    2950:	88 23       	and	r24, r24
    2952:	29 f0       	breq	.+10     	; 0x295e <lcd_data+0x50>
    2954:	84 e0       	ldi	r24, 0x04	; 4
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    295c:	04 c0       	rjmp	.+8      	; 0x2966 <lcd_data+0x58>
    295e:	84 e0       	ldi	r24, 0x04	; 4
    2960:	60 e0       	ldi	r22, 0x00	; 0
    2962:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	(GET_BIT(data, 1)) ? DIO_Write(PORT_A5, High) : DIO_Write(PORT_A5, Low);
    2966:	fe 01       	movw	r30, r28
    2968:	ef 59       	subi	r30, 0x9F	; 159
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 81       	ld	r24, Z
    296e:	88 2f       	mov	r24, r24
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	82 70       	andi	r24, 0x02	; 2
    2974:	90 70       	andi	r25, 0x00	; 0
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	29 f0       	breq	.+10     	; 0x2984 <lcd_data+0x76>
    297a:	85 e0       	ldi	r24, 0x05	; 5
    297c:	61 e0       	ldi	r22, 0x01	; 1
    297e:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    2982:	04 c0       	rjmp	.+8      	; 0x298c <lcd_data+0x7e>
    2984:	85 e0       	ldi	r24, 0x05	; 5
    2986:	60 e0       	ldi	r22, 0x00	; 0
    2988:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	(GET_BIT(data, 2)) ? DIO_Write(PORT_A6, High) : DIO_Write(PORT_A6, Low);
    298c:	fe 01       	movw	r30, r28
    298e:	ef 59       	subi	r30, 0x9F	; 159
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	80 81       	ld	r24, Z
    2994:	88 2f       	mov	r24, r24
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	84 70       	andi	r24, 0x04	; 4
    299a:	90 70       	andi	r25, 0x00	; 0
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	29 f0       	breq	.+10     	; 0x29aa <lcd_data+0x9c>
    29a0:	86 e0       	ldi	r24, 0x06	; 6
    29a2:	61 e0       	ldi	r22, 0x01	; 1
    29a4:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    29a8:	04 c0       	rjmp	.+8      	; 0x29b2 <lcd_data+0xa4>
    29aa:	86 e0       	ldi	r24, 0x06	; 6
    29ac:	60 e0       	ldi	r22, 0x00	; 0
    29ae:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	(GET_BIT(data, 3)) ? DIO_Write(PORT_A7, High) : DIO_Write(PORT_A7, Low);
    29b2:	fe 01       	movw	r30, r28
    29b4:	ef 59       	subi	r30, 0x9F	; 159
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	80 81       	ld	r24, Z
    29ba:	88 2f       	mov	r24, r24
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	88 70       	andi	r24, 0x08	; 8
    29c0:	90 70       	andi	r25, 0x00	; 0
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	29 f0       	breq	.+10     	; 0x29d0 <lcd_data+0xc2>
    29c6:	87 e0       	ldi	r24, 0x07	; 7
    29c8:	61 e0       	ldi	r22, 0x01	; 1
    29ca:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    29ce:	04 c0       	rjmp	.+8      	; 0x29d8 <lcd_data+0xca>
    29d0:	87 e0       	ldi	r24, 0x07	; 7
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_B3, High);
    29d8:	8b e0       	ldi	r24, 0x0B	; 11
    29da:	61 e0       	ldi	r22, 0x01	; 1
    29dc:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    29e0:	fe 01       	movw	r30, r28
    29e2:	e3 5a       	subi	r30, 0xA3	; 163
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	a0 e2       	ldi	r26, 0x20	; 32
    29ec:	b1 e4       	ldi	r27, 0x41	; 65
    29ee:	80 83       	st	Z, r24
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	a2 83       	std	Z+2, r26	; 0x02
    29f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29f6:	8e 01       	movw	r16, r28
    29f8:	07 5a       	subi	r16, 0xA7	; 167
    29fa:	1f 4f       	sbci	r17, 0xFF	; 255
    29fc:	fe 01       	movw	r30, r28
    29fe:	e3 5a       	subi	r30, 0xA3	; 163
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	60 81       	ld	r22, Z
    2a04:	71 81       	ldd	r23, Z+1	; 0x01
    2a06:	82 81       	ldd	r24, Z+2	; 0x02
    2a08:	93 81       	ldd	r25, Z+3	; 0x03
    2a0a:	2b ea       	ldi	r18, 0xAB	; 171
    2a0c:	3a ea       	ldi	r19, 0xAA	; 170
    2a0e:	4a ea       	ldi	r20, 0xAA	; 170
    2a10:	50 e4       	ldi	r21, 0x40	; 64
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	f8 01       	movw	r30, r16
    2a1c:	80 83       	st	Z, r24
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	a2 83       	std	Z+2, r26	; 0x02
    2a22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a24:	fe 01       	movw	r30, r28
    2a26:	e7 5a       	subi	r30, 0xA7	; 167
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	60 81       	ld	r22, Z
    2a2c:	71 81       	ldd	r23, Z+1	; 0x01
    2a2e:	82 81       	ldd	r24, Z+2	; 0x02
    2a30:	93 81       	ldd	r25, Z+3	; 0x03
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e8       	ldi	r20, 0x80	; 128
    2a38:	5f e3       	ldi	r21, 0x3F	; 63
    2a3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a3e:	88 23       	and	r24, r24
    2a40:	34 f4       	brge	.+12     	; 0x2a4e <lcd_data+0x140>
		__ticks = 1;
    2a42:	fe 01       	movw	r30, r28
    2a44:	e8 5a       	subi	r30, 0xA8	; 168
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	80 83       	st	Z, r24
    2a4c:	e0 c0       	rjmp	.+448    	; 0x2c0e <lcd_data+0x300>
	else if (__tmp > 255)
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e7 5a       	subi	r30, 0xA7	; 167
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	4f e7       	ldi	r20, 0x7F	; 127
    2a62:	53 e4       	ldi	r21, 0x43	; 67
    2a64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a68:	18 16       	cp	r1, r24
    2a6a:	0c f0       	brlt	.+2      	; 0x2a6e <lcd_data+0x160>
    2a6c:	c0 c0       	rjmp	.+384    	; 0x2bee <lcd_data+0x2e0>
	{
		_delay_ms(__us / 1000.0);
    2a6e:	fe 01       	movw	r30, r28
    2a70:	e3 5a       	subi	r30, 0xA3	; 163
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	60 81       	ld	r22, Z
    2a76:	71 81       	ldd	r23, Z+1	; 0x01
    2a78:	82 81       	ldd	r24, Z+2	; 0x02
    2a7a:	93 81       	ldd	r25, Z+3	; 0x03
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	4a e7       	ldi	r20, 0x7A	; 122
    2a82:	54 e4       	ldi	r21, 0x44	; 68
    2a84:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	ec 5a       	subi	r30, 0xAC	; 172
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 83       	st	Z, r24
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	a2 83       	std	Z+2, r26	; 0x02
    2a98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9a:	8e 01       	movw	r16, r28
    2a9c:	00 5b       	subi	r16, 0xB0	; 176
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	ec 5a       	subi	r30, 0xAC	; 172
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a e7       	ldi	r20, 0x7A	; 122
    2ab4:	55 e4       	ldi	r21, 0x45	; 69
    2ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	f8 01       	movw	r30, r16
    2ac0:	80 83       	st	Z, r24
    2ac2:	91 83       	std	Z+1, r25	; 0x01
    2ac4:	a2 83       	std	Z+2, r26	; 0x02
    2ac6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e0 5b       	subi	r30, 0xB0	; 176
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	60 81       	ld	r22, Z
    2ad0:	71 81       	ldd	r23, Z+1	; 0x01
    2ad2:	82 81       	ldd	r24, Z+2	; 0x02
    2ad4:	93 81       	ldd	r25, Z+3	; 0x03
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	44 f4       	brge	.+16     	; 0x2af6 <lcd_data+0x1e8>
		__ticks = 1;
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	e2 5b       	subi	r30, 0xB2	; 178
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	80 83       	st	Z, r24
    2af4:	64 c0       	rjmp	.+200    	; 0x2bbe <lcd_data+0x2b0>
	else if (__tmp > 65535)
    2af6:	fe 01       	movw	r30, r28
    2af8:	e0 5b       	subi	r30, 0xB0	; 176
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	3f ef       	ldi	r19, 0xFF	; 255
    2b08:	4f e7       	ldi	r20, 0x7F	; 127
    2b0a:	57 e4       	ldi	r21, 0x47	; 71
    2b0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b10:	18 16       	cp	r1, r24
    2b12:	0c f0       	brlt	.+2      	; 0x2b16 <lcd_data+0x208>
    2b14:	43 c0       	rjmp	.+134    	; 0x2b9c <lcd_data+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b16:	fe 01       	movw	r30, r28
    2b18:	ec 5a       	subi	r30, 0xAC	; 172
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	60 81       	ld	r22, Z
    2b1e:	71 81       	ldd	r23, Z+1	; 0x01
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	93 81       	ldd	r25, Z+3	; 0x03
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e2       	ldi	r20, 0x20	; 32
    2b2a:	51 e4       	ldi	r21, 0x41	; 65
    2b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	8e 01       	movw	r16, r28
    2b36:	02 5b       	subi	r16, 0xB2	; 178
    2b38:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3a:	bc 01       	movw	r22, r24
    2b3c:	cd 01       	movw	r24, r26
    2b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	f8 01       	movw	r30, r16
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
    2b4c:	1f c0       	rjmp	.+62     	; 0x2b8c <lcd_data+0x27e>
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e4 5b       	subi	r30, 0xB4	; 180
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 e9       	ldi	r24, 0x90	; 144
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	91 83       	std	Z+1, r25	; 0x01
    2b5a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e4 5b       	subi	r30, 0xB4	; 180
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 81       	ld	r24, Z
    2b64:	91 81       	ldd	r25, Z+1	; 0x01
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <lcd_data+0x258>
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e4 5b       	subi	r30, 0xB4	; 180
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b74:	de 01       	movw	r26, r28
    2b76:	a2 5b       	subi	r26, 0xB2	; 178
    2b78:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e2 5b       	subi	r30, 0xB2	; 178
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	11 96       	adiw	r26, 0x01	; 1
    2b88:	9c 93       	st	X, r25
    2b8a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	e2 5b       	subi	r30, 0xB2	; 178
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 81       	ld	r24, Z
    2b94:	91 81       	ldd	r25, Z+1	; 0x01
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	d1 f6       	brne	.-76     	; 0x2b4e <lcd_data+0x240>
    2b9a:	4b c0       	rjmp	.+150    	; 0x2c32 <lcd_data+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9c:	8e 01       	movw	r16, r28
    2b9e:	02 5b       	subi	r16, 0xB2	; 178
    2ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e0 5b       	subi	r30, 0xB0	; 176
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	f8 01       	movw	r30, r16
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	80 83       	st	Z, r24
    2bbe:	de 01       	movw	r26, r28
    2bc0:	a6 5b       	subi	r26, 0xB6	; 182
    2bc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	e2 5b       	subi	r30, 0xB2	; 178
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	11 96       	adiw	r26, 0x01	; 1
    2bd0:	9c 93       	st	X, r25
    2bd2:	8e 93       	st	-X, r24
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e6 5b       	subi	r30, 0xB6	; 182
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <lcd_data+0x2d0>
    2be2:	fe 01       	movw	r30, r28
    2be4:	e6 5b       	subi	r30, 0xB6	; 182
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24
    2bec:	22 c0       	rjmp	.+68     	; 0x2c32 <lcd_data+0x324>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bee:	8e 01       	movw	r16, r28
    2bf0:	08 5a       	subi	r16, 0xA8	; 168
    2bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e7 5a       	subi	r30, 0xA7	; 167
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	60 81       	ld	r22, Z
    2bfc:	71 81       	ldd	r23, Z+1	; 0x01
    2bfe:	82 81       	ldd	r24, Z+2	; 0x02
    2c00:	93 81       	ldd	r25, Z+3	; 0x03
    2c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	80 83       	st	Z, r24
    2c0e:	de 01       	movw	r26, r28
    2c10:	a7 5b       	subi	r26, 0xB7	; 183
    2c12:	bf 4f       	sbci	r27, 0xFF	; 255
    2c14:	fe 01       	movw	r30, r28
    2c16:	e8 5a       	subi	r30, 0xA8	; 168
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	80 81       	ld	r24, Z
    2c1c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c1e:	fe 01       	movw	r30, r28
    2c20:	e7 5b       	subi	r30, 0xB7	; 183
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	80 81       	ld	r24, Z
    2c26:	8a 95       	dec	r24
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <lcd_data+0x318>
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e7 5b       	subi	r30, 0xB7	; 183
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 83       	st	Z, r24
	_delay_us(10);
	DIO_Write(PORT_B3, Low);
    2c32:	8b e0       	ldi	r24, 0x0B	; 11
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	eb 5b       	subi	r30, 0xBB	; 187
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	a8 e4       	ldi	r26, 0x48	; 72
    2c46:	b3 e4       	ldi	r27, 0x43	; 67
    2c48:	80 83       	st	Z, r24
    2c4a:	91 83       	std	Z+1, r25	; 0x01
    2c4c:	a2 83       	std	Z+2, r26	; 0x02
    2c4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c50:	8e 01       	movw	r16, r28
    2c52:	0f 5b       	subi	r16, 0xBF	; 191
    2c54:	1f 4f       	sbci	r17, 0xFF	; 255
    2c56:	fe 01       	movw	r30, r28
    2c58:	eb 5b       	subi	r30, 0xBB	; 187
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	60 81       	ld	r22, Z
    2c5e:	71 81       	ldd	r23, Z+1	; 0x01
    2c60:	82 81       	ldd	r24, Z+2	; 0x02
    2c62:	93 81       	ldd	r25, Z+3	; 0x03
    2c64:	2b ea       	ldi	r18, 0xAB	; 171
    2c66:	3a ea       	ldi	r19, 0xAA	; 170
    2c68:	4a ea       	ldi	r20, 0xAA	; 170
    2c6a:	50 e4       	ldi	r21, 0x40	; 64
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	f8 01       	movw	r30, r16
    2c76:	80 83       	st	Z, r24
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	a2 83       	std	Z+2, r26	; 0x02
    2c7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c7e:	fe 01       	movw	r30, r28
    2c80:	ef 5b       	subi	r30, 0xBF	; 191
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	60 81       	ld	r22, Z
    2c86:	71 81       	ldd	r23, Z+1	; 0x01
    2c88:	82 81       	ldd	r24, Z+2	; 0x02
    2c8a:	93 81       	ldd	r25, Z+3	; 0x03
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e8       	ldi	r20, 0x80	; 128
    2c92:	5f e3       	ldi	r21, 0x3F	; 63
    2c94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c98:	88 23       	and	r24, r24
    2c9a:	34 f4       	brge	.+12     	; 0x2ca8 <lcd_data+0x39a>
		__ticks = 1;
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e0 5c       	subi	r30, 0xC0	; 192
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	80 83       	st	Z, r24
    2ca6:	9d c0       	rjmp	.+314    	; 0x2de2 <lcd_data+0x4d4>
	else if (__tmp > 255)
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ef 5b       	subi	r30, 0xBF	; 191
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	60 81       	ld	r22, Z
    2cb0:	71 81       	ldd	r23, Z+1	; 0x01
    2cb2:	82 81       	ldd	r24, Z+2	; 0x02
    2cb4:	93 81       	ldd	r25, Z+3	; 0x03
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	4f e7       	ldi	r20, 0x7F	; 127
    2cbc:	53 e4       	ldi	r21, 0x43	; 67
    2cbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc2:	18 16       	cp	r1, r24
    2cc4:	0c f0       	brlt	.+2      	; 0x2cc8 <lcd_data+0x3ba>
    2cc6:	7e c0       	rjmp	.+252    	; 0x2dc4 <lcd_data+0x4b6>
	{
		_delay_ms(__us / 1000.0);
    2cc8:	fe 01       	movw	r30, r28
    2cca:	eb 5b       	subi	r30, 0xBB	; 187
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	60 81       	ld	r22, Z
    2cd0:	71 81       	ldd	r23, Z+1	; 0x01
    2cd2:	82 81       	ldd	r24, Z+2	; 0x02
    2cd4:	93 81       	ldd	r25, Z+3	; 0x03
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	4a e7       	ldi	r20, 0x7A	; 122
    2cdc:	54 e4       	ldi	r21, 0x44	; 68
    2cde:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	8c af       	std	Y+60, r24	; 0x3c
    2ce8:	9d af       	std	Y+61, r25	; 0x3d
    2cea:	ae af       	std	Y+62, r26	; 0x3e
    2cec:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cee:	6c ad       	ldd	r22, Y+60	; 0x3c
    2cf0:	7d ad       	ldd	r23, Y+61	; 0x3d
    2cf2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cf4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	4a e7       	ldi	r20, 0x7A	; 122
    2cfc:	55 e4       	ldi	r21, 0x45	; 69
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	88 af       	std	Y+56, r24	; 0x38
    2d08:	99 af       	std	Y+57, r25	; 0x39
    2d0a:	aa af       	std	Y+58, r26	; 0x3a
    2d0c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2d0e:	68 ad       	ldd	r22, Y+56	; 0x38
    2d10:	79 ad       	ldd	r23, Y+57	; 0x39
    2d12:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d14:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e8       	ldi	r20, 0x80	; 128
    2d1c:	5f e3       	ldi	r21, 0x3F	; 63
    2d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d22:	88 23       	and	r24, r24
    2d24:	2c f4       	brge	.+10     	; 0x2d30 <lcd_data+0x422>
		__ticks = 1;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9f ab       	std	Y+55, r25	; 0x37
    2d2c:	8e ab       	std	Y+54, r24	; 0x36
    2d2e:	3f c0       	rjmp	.+126    	; 0x2dae <lcd_data+0x4a0>
	else if (__tmp > 65535)
    2d30:	68 ad       	ldd	r22, Y+56	; 0x38
    2d32:	79 ad       	ldd	r23, Y+57	; 0x39
    2d34:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d36:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	3f ef       	ldi	r19, 0xFF	; 255
    2d3c:	4f e7       	ldi	r20, 0x7F	; 127
    2d3e:	57 e4       	ldi	r21, 0x47	; 71
    2d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d44:	18 16       	cp	r1, r24
    2d46:	4c f5       	brge	.+82     	; 0x2d9a <lcd_data+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d48:	6c ad       	ldd	r22, Y+60	; 0x3c
    2d4a:	7d ad       	ldd	r23, Y+61	; 0x3d
    2d4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e2       	ldi	r20, 0x20	; 32
    2d56:	51 e4       	ldi	r21, 0x41	; 65
    2d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	bc 01       	movw	r22, r24
    2d62:	cd 01       	movw	r24, r26
    2d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	9f ab       	std	Y+55, r25	; 0x37
    2d6e:	8e ab       	std	Y+54, r24	; 0x36
    2d70:	0f c0       	rjmp	.+30     	; 0x2d90 <lcd_data+0x482>
    2d72:	80 e9       	ldi	r24, 0x90	; 144
    2d74:	91 e0       	ldi	r25, 0x01	; 1
    2d76:	9d ab       	std	Y+53, r25	; 0x35
    2d78:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d7a:	8c a9       	ldd	r24, Y+52	; 0x34
    2d7c:	9d a9       	ldd	r25, Y+53	; 0x35
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	f1 f7       	brne	.-4      	; 0x2d7e <lcd_data+0x470>
    2d82:	9d ab       	std	Y+53, r25	; 0x35
    2d84:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d86:	8e a9       	ldd	r24, Y+54	; 0x36
    2d88:	9f a9       	ldd	r25, Y+55	; 0x37
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	9f ab       	std	Y+55, r25	; 0x37
    2d8e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d90:	8e a9       	ldd	r24, Y+54	; 0x36
    2d92:	9f a9       	ldd	r25, Y+55	; 0x37
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	69 f7       	brne	.-38     	; 0x2d72 <lcd_data+0x464>
    2d98:	2d c0       	rjmp	.+90     	; 0x2df4 <lcd_data+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9a:	68 ad       	ldd	r22, Y+56	; 0x38
    2d9c:	79 ad       	ldd	r23, Y+57	; 0x39
    2d9e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2da0:	9b ad       	ldd	r25, Y+59	; 0x3b
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9f ab       	std	Y+55, r25	; 0x37
    2dac:	8e ab       	std	Y+54, r24	; 0x36
    2dae:	8e a9       	ldd	r24, Y+54	; 0x36
    2db0:	9f a9       	ldd	r25, Y+55	; 0x37
    2db2:	9b ab       	std	Y+51, r25	; 0x33
    2db4:	8a ab       	std	Y+50, r24	; 0x32
    2db6:	8a a9       	ldd	r24, Y+50	; 0x32
    2db8:	9b a9       	ldd	r25, Y+51	; 0x33
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <lcd_data+0x4ac>
    2dbe:	9b ab       	std	Y+51, r25	; 0x33
    2dc0:	8a ab       	std	Y+50, r24	; 0x32
    2dc2:	18 c0       	rjmp	.+48     	; 0x2df4 <lcd_data+0x4e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	ef 5b       	subi	r30, 0xBF	; 191
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e0 5c       	subi	r30, 0xC0	; 192
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 83       	st	Z, r24
    2de2:	fe 01       	movw	r30, r28
    2de4:	e0 5c       	subi	r30, 0xC0	; 192
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	80 81       	ld	r24, Z
    2dea:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dec:	89 a9       	ldd	r24, Y+49	; 0x31
    2dee:	8a 95       	dec	r24
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <lcd_data+0x4e0>
    2df2:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);
	(GET_BIT(data, 4)) ? DIO_Write(PORT_A4, High) : DIO_Write(PORT_A4, Low);
    2df4:	fe 01       	movw	r30, r28
    2df6:	ef 59       	subi	r30, 0x9F	; 159
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	80 81       	ld	r24, Z
    2dfc:	88 2f       	mov	r24, r24
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	80 71       	andi	r24, 0x10	; 16
    2e02:	90 70       	andi	r25, 0x00	; 0
    2e04:	00 97       	sbiw	r24, 0x00	; 0
    2e06:	29 f0       	breq	.+10     	; 0x2e12 <lcd_data+0x504>
    2e08:	84 e0       	ldi	r24, 0x04	; 4
    2e0a:	61 e0       	ldi	r22, 0x01	; 1
    2e0c:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    2e10:	04 c0       	rjmp	.+8      	; 0x2e1a <lcd_data+0x50c>
    2e12:	84 e0       	ldi	r24, 0x04	; 4
    2e14:	60 e0       	ldi	r22, 0x00	; 0
    2e16:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	(GET_BIT(data, 5)) ? DIO_Write(PORT_A5, High) : DIO_Write(PORT_A5, Low);
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	ef 59       	subi	r30, 0x9F	; 159
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	80 81       	ld	r24, Z
    2e22:	88 2f       	mov	r24, r24
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	80 72       	andi	r24, 0x20	; 32
    2e28:	90 70       	andi	r25, 0x00	; 0
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	29 f0       	breq	.+10     	; 0x2e38 <lcd_data+0x52a>
    2e2e:	85 e0       	ldi	r24, 0x05	; 5
    2e30:	61 e0       	ldi	r22, 0x01	; 1
    2e32:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    2e36:	04 c0       	rjmp	.+8      	; 0x2e40 <lcd_data+0x532>
    2e38:	85 e0       	ldi	r24, 0x05	; 5
    2e3a:	60 e0       	ldi	r22, 0x00	; 0
    2e3c:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	(GET_BIT(data, 6)) ? DIO_Write(PORT_A6, High) : DIO_Write(PORT_A6, Low);
    2e40:	fe 01       	movw	r30, r28
    2e42:	ef 59       	subi	r30, 0x9F	; 159
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	80 81       	ld	r24, Z
    2e48:	88 2f       	mov	r24, r24
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	80 74       	andi	r24, 0x40	; 64
    2e4e:	90 70       	andi	r25, 0x00	; 0
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	29 f0       	breq	.+10     	; 0x2e5e <lcd_data+0x550>
    2e54:	86 e0       	ldi	r24, 0x06	; 6
    2e56:	61 e0       	ldi	r22, 0x01	; 1
    2e58:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    2e5c:	04 c0       	rjmp	.+8      	; 0x2e66 <lcd_data+0x558>
    2e5e:	86 e0       	ldi	r24, 0x06	; 6
    2e60:	60 e0       	ldi	r22, 0x00	; 0
    2e62:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	(GET_BIT(data, 7)) ? DIO_Write(PORT_A7, High) : DIO_Write(PORT_A7, Low);
    2e66:	fe 01       	movw	r30, r28
    2e68:	ef 59       	subi	r30, 0x9F	; 159
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	80 81       	ld	r24, Z
    2e6e:	88 23       	and	r24, r24
    2e70:	2c f4       	brge	.+10     	; 0x2e7c <lcd_data+0x56e>
    2e72:	87 e0       	ldi	r24, 0x07	; 7
    2e74:	61 e0       	ldi	r22, 0x01	; 1
    2e76:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    2e7a:	04 c0       	rjmp	.+8      	; 0x2e84 <lcd_data+0x576>
    2e7c:	87 e0       	ldi	r24, 0x07	; 7
    2e7e:	60 e0       	ldi	r22, 0x00	; 0
    2e80:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
	DIO_Write(PORT_B3, High);
    2e84:	8b e0       	ldi	r24, 0x0B	; 11
    2e86:	61 e0       	ldi	r22, 0x01	; 1
    2e88:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	a0 e2       	ldi	r26, 0x20	; 32
    2e92:	b1 e4       	ldi	r27, 0x41	; 65
    2e94:	8d a7       	std	Y+45, r24	; 0x2d
    2e96:	9e a7       	std	Y+46, r25	; 0x2e
    2e98:	af a7       	std	Y+47, r26	; 0x2f
    2e9a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e9c:	6d a5       	ldd	r22, Y+45	; 0x2d
    2e9e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ea0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ea2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ea4:	2b ea       	ldi	r18, 0xAB	; 171
    2ea6:	3a ea       	ldi	r19, 0xAA	; 170
    2ea8:	4a ea       	ldi	r20, 0xAA	; 170
    2eaa:	50 e4       	ldi	r21, 0x40	; 64
    2eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	89 a7       	std	Y+41, r24	; 0x29
    2eb6:	9a a7       	std	Y+42, r25	; 0x2a
    2eb8:	ab a7       	std	Y+43, r26	; 0x2b
    2eba:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2ebc:	69 a5       	ldd	r22, Y+41	; 0x29
    2ebe:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ec0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ec2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	40 e8       	ldi	r20, 0x80	; 128
    2eca:	5f e3       	ldi	r21, 0x3F	; 63
    2ecc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ed0:	88 23       	and	r24, r24
    2ed2:	1c f4       	brge	.+6      	; 0x2eda <lcd_data+0x5cc>
		__ticks = 1;
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	88 a7       	std	Y+40, r24	; 0x28
    2ed8:	91 c0       	rjmp	.+290    	; 0x2ffc <lcd_data+0x6ee>
	else if (__tmp > 255)
    2eda:	69 a5       	ldd	r22, Y+41	; 0x29
    2edc:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ede:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ee0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	4f e7       	ldi	r20, 0x7F	; 127
    2ee8:	53 e4       	ldi	r21, 0x43	; 67
    2eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eee:	18 16       	cp	r1, r24
    2ef0:	0c f0       	brlt	.+2      	; 0x2ef4 <lcd_data+0x5e6>
    2ef2:	7b c0       	rjmp	.+246    	; 0x2fea <lcd_data+0x6dc>
	{
		_delay_ms(__us / 1000.0);
    2ef4:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ef6:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ef8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2efa:	98 a9       	ldd	r25, Y+48	; 0x30
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a e7       	ldi	r20, 0x7A	; 122
    2f02:	54 e4       	ldi	r21, 0x44	; 68
    2f04:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8c a3       	std	Y+36, r24	; 0x24
    2f0e:	9d a3       	std	Y+37, r25	; 0x25
    2f10:	ae a3       	std	Y+38, r26	; 0x26
    2f12:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f14:	6c a1       	ldd	r22, Y+36	; 0x24
    2f16:	7d a1       	ldd	r23, Y+37	; 0x25
    2f18:	8e a1       	ldd	r24, Y+38	; 0x26
    2f1a:	9f a1       	ldd	r25, Y+39	; 0x27
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	4a e7       	ldi	r20, 0x7A	; 122
    2f22:	55 e4       	ldi	r21, 0x45	; 69
    2f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	88 a3       	std	Y+32, r24	; 0x20
    2f2e:	99 a3       	std	Y+33, r25	; 0x21
    2f30:	aa a3       	std	Y+34, r26	; 0x22
    2f32:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2f34:	68 a1       	ldd	r22, Y+32	; 0x20
    2f36:	79 a1       	ldd	r23, Y+33	; 0x21
    2f38:	8a a1       	ldd	r24, Y+34	; 0x22
    2f3a:	9b a1       	ldd	r25, Y+35	; 0x23
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	40 e8       	ldi	r20, 0x80	; 128
    2f42:	5f e3       	ldi	r21, 0x3F	; 63
    2f44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f48:	88 23       	and	r24, r24
    2f4a:	2c f4       	brge	.+10     	; 0x2f56 <lcd_data+0x648>
		__ticks = 1;
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	9f 8f       	std	Y+31, r25	; 0x1f
    2f52:	8e 8f       	std	Y+30, r24	; 0x1e
    2f54:	3f c0       	rjmp	.+126    	; 0x2fd4 <lcd_data+0x6c6>
	else if (__tmp > 65535)
    2f56:	68 a1       	ldd	r22, Y+32	; 0x20
    2f58:	79 a1       	ldd	r23, Y+33	; 0x21
    2f5a:	8a a1       	ldd	r24, Y+34	; 0x22
    2f5c:	9b a1       	ldd	r25, Y+35	; 0x23
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	3f ef       	ldi	r19, 0xFF	; 255
    2f62:	4f e7       	ldi	r20, 0x7F	; 127
    2f64:	57 e4       	ldi	r21, 0x47	; 71
    2f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f6a:	18 16       	cp	r1, r24
    2f6c:	4c f5       	brge	.+82     	; 0x2fc0 <lcd_data+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6e:	6c a1       	ldd	r22, Y+36	; 0x24
    2f70:	7d a1       	ldd	r23, Y+37	; 0x25
    2f72:	8e a1       	ldd	r24, Y+38	; 0x26
    2f74:	9f a1       	ldd	r25, Y+39	; 0x27
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e2       	ldi	r20, 0x20	; 32
    2f7c:	51 e4       	ldi	r21, 0x41	; 65
    2f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	bc 01       	movw	r22, r24
    2f88:	cd 01       	movw	r24, r26
    2f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	9f 8f       	std	Y+31, r25	; 0x1f
    2f94:	8e 8f       	std	Y+30, r24	; 0x1e
    2f96:	0f c0       	rjmp	.+30     	; 0x2fb6 <lcd_data+0x6a8>
    2f98:	80 e9       	ldi	r24, 0x90	; 144
    2f9a:	91 e0       	ldi	r25, 0x01	; 1
    2f9c:	9d 8f       	std	Y+29, r25	; 0x1d
    2f9e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fa0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2fa2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	f1 f7       	brne	.-4      	; 0x2fa4 <lcd_data+0x696>
    2fa8:	9d 8f       	std	Y+29, r25	; 0x1d
    2faa:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	9f 8f       	std	Y+31, r25	; 0x1f
    2fb4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fb8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fba:	00 97       	sbiw	r24, 0x00	; 0
    2fbc:	69 f7       	brne	.-38     	; 0x2f98 <lcd_data+0x68a>
    2fbe:	24 c0       	rjmp	.+72     	; 0x3008 <lcd_data+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc0:	68 a1       	ldd	r22, Y+32	; 0x20
    2fc2:	79 a1       	ldd	r23, Y+33	; 0x21
    2fc4:	8a a1       	ldd	r24, Y+34	; 0x22
    2fc6:	9b a1       	ldd	r25, Y+35	; 0x23
    2fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	9f 8f       	std	Y+31, r25	; 0x1f
    2fd2:	8e 8f       	std	Y+30, r24	; 0x1e
    2fd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fd6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fd8:	9b 8f       	std	Y+27, r25	; 0x1b
    2fda:	8a 8f       	std	Y+26, r24	; 0x1a
    2fdc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2fde:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <lcd_data+0x6d2>
    2fe4:	9b 8f       	std	Y+27, r25	; 0x1b
    2fe6:	8a 8f       	std	Y+26, r24	; 0x1a
    2fe8:	0f c0       	rjmp	.+30     	; 0x3008 <lcd_data+0x6fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fea:	69 a5       	ldd	r22, Y+41	; 0x29
    2fec:	7a a5       	ldd	r23, Y+42	; 0x2a
    2fee:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ff0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	88 a7       	std	Y+40, r24	; 0x28
    2ffc:	88 a5       	ldd	r24, Y+40	; 0x28
    2ffe:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3000:	89 8d       	ldd	r24, Y+25	; 0x19
    3002:	8a 95       	dec	r24
    3004:	f1 f7       	brne	.-4      	; 0x3002 <lcd_data+0x6f4>
    3006:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_Write(PORT_B3, Low);
    3008:	8b e0       	ldi	r24, 0x0B	; 11
    300a:	60 e0       	ldi	r22, 0x00	; 0
    300c:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	a8 e4       	ldi	r26, 0x48	; 72
    3016:	b3 e4       	ldi	r27, 0x43	; 67
    3018:	8d 8b       	std	Y+21, r24	; 0x15
    301a:	9e 8b       	std	Y+22, r25	; 0x16
    301c:	af 8b       	std	Y+23, r26	; 0x17
    301e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3020:	6d 89       	ldd	r22, Y+21	; 0x15
    3022:	7e 89       	ldd	r23, Y+22	; 0x16
    3024:	8f 89       	ldd	r24, Y+23	; 0x17
    3026:	98 8d       	ldd	r25, Y+24	; 0x18
    3028:	2b ea       	ldi	r18, 0xAB	; 171
    302a:	3a ea       	ldi	r19, 0xAA	; 170
    302c:	4a ea       	ldi	r20, 0xAA	; 170
    302e:	50 e4       	ldi	r21, 0x40	; 64
    3030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	89 8b       	std	Y+17, r24	; 0x11
    303a:	9a 8b       	std	Y+18, r25	; 0x12
    303c:	ab 8b       	std	Y+19, r26	; 0x13
    303e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3040:	69 89       	ldd	r22, Y+17	; 0x11
    3042:	7a 89       	ldd	r23, Y+18	; 0x12
    3044:	8b 89       	ldd	r24, Y+19	; 0x13
    3046:	9c 89       	ldd	r25, Y+20	; 0x14
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	40 e8       	ldi	r20, 0x80	; 128
    304e:	5f e3       	ldi	r21, 0x3F	; 63
    3050:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3054:	88 23       	and	r24, r24
    3056:	1c f4       	brge	.+6      	; 0x305e <lcd_data+0x750>
		__ticks = 1;
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	88 8b       	std	Y+16, r24	; 0x10
    305c:	91 c0       	rjmp	.+290    	; 0x3180 <lcd_data+0x872>
	else if (__tmp > 255)
    305e:	69 89       	ldd	r22, Y+17	; 0x11
    3060:	7a 89       	ldd	r23, Y+18	; 0x12
    3062:	8b 89       	ldd	r24, Y+19	; 0x13
    3064:	9c 89       	ldd	r25, Y+20	; 0x14
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	4f e7       	ldi	r20, 0x7F	; 127
    306c:	53 e4       	ldi	r21, 0x43	; 67
    306e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3072:	18 16       	cp	r1, r24
    3074:	0c f0       	brlt	.+2      	; 0x3078 <lcd_data+0x76a>
    3076:	7b c0       	rjmp	.+246    	; 0x316e <lcd_data+0x860>
	{
		_delay_ms(__us / 1000.0);
    3078:	6d 89       	ldd	r22, Y+21	; 0x15
    307a:	7e 89       	ldd	r23, Y+22	; 0x16
    307c:	8f 89       	ldd	r24, Y+23	; 0x17
    307e:	98 8d       	ldd	r25, Y+24	; 0x18
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	4a e7       	ldi	r20, 0x7A	; 122
    3086:	54 e4       	ldi	r21, 0x44	; 68
    3088:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	8c 87       	std	Y+12, r24	; 0x0c
    3092:	9d 87       	std	Y+13, r25	; 0x0d
    3094:	ae 87       	std	Y+14, r26	; 0x0e
    3096:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3098:	6c 85       	ldd	r22, Y+12	; 0x0c
    309a:	7d 85       	ldd	r23, Y+13	; 0x0d
    309c:	8e 85       	ldd	r24, Y+14	; 0x0e
    309e:	9f 85       	ldd	r25, Y+15	; 0x0f
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	4a e7       	ldi	r20, 0x7A	; 122
    30a6:	55 e4       	ldi	r21, 0x45	; 69
    30a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	88 87       	std	Y+8, r24	; 0x08
    30b2:	99 87       	std	Y+9, r25	; 0x09
    30b4:	aa 87       	std	Y+10, r26	; 0x0a
    30b6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    30b8:	68 85       	ldd	r22, Y+8	; 0x08
    30ba:	79 85       	ldd	r23, Y+9	; 0x09
    30bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    30be:	9b 85       	ldd	r25, Y+11	; 0x0b
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e8       	ldi	r20, 0x80	; 128
    30c6:	5f e3       	ldi	r21, 0x3F	; 63
    30c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30cc:	88 23       	and	r24, r24
    30ce:	2c f4       	brge	.+10     	; 0x30da <lcd_data+0x7cc>
		__ticks = 1;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	9f 83       	std	Y+7, r25	; 0x07
    30d6:	8e 83       	std	Y+6, r24	; 0x06
    30d8:	3f c0       	rjmp	.+126    	; 0x3158 <lcd_data+0x84a>
	else if (__tmp > 65535)
    30da:	68 85       	ldd	r22, Y+8	; 0x08
    30dc:	79 85       	ldd	r23, Y+9	; 0x09
    30de:	8a 85       	ldd	r24, Y+10	; 0x0a
    30e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	3f ef       	ldi	r19, 0xFF	; 255
    30e6:	4f e7       	ldi	r20, 0x7F	; 127
    30e8:	57 e4       	ldi	r21, 0x47	; 71
    30ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ee:	18 16       	cp	r1, r24
    30f0:	4c f5       	brge	.+82     	; 0x3144 <lcd_data+0x836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    30f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    30f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    30f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e2       	ldi	r20, 0x20	; 32
    3100:	51 e4       	ldi	r21, 0x41	; 65
    3102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	bc 01       	movw	r22, r24
    310c:	cd 01       	movw	r24, r26
    310e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	9f 83       	std	Y+7, r25	; 0x07
    3118:	8e 83       	std	Y+6, r24	; 0x06
    311a:	0f c0       	rjmp	.+30     	; 0x313a <lcd_data+0x82c>
    311c:	80 e9       	ldi	r24, 0x90	; 144
    311e:	91 e0       	ldi	r25, 0x01	; 1
    3120:	9d 83       	std	Y+5, r25	; 0x05
    3122:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3124:	8c 81       	ldd	r24, Y+4	; 0x04
    3126:	9d 81       	ldd	r25, Y+5	; 0x05
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <lcd_data+0x81a>
    312c:	9d 83       	std	Y+5, r25	; 0x05
    312e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3130:	8e 81       	ldd	r24, Y+6	; 0x06
    3132:	9f 81       	ldd	r25, Y+7	; 0x07
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	9f 83       	std	Y+7, r25	; 0x07
    3138:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313a:	8e 81       	ldd	r24, Y+6	; 0x06
    313c:	9f 81       	ldd	r25, Y+7	; 0x07
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	69 f7       	brne	.-38     	; 0x311c <lcd_data+0x80e>
    3142:	24 c0       	rjmp	.+72     	; 0x318c <lcd_data+0x87e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3144:	68 85       	ldd	r22, Y+8	; 0x08
    3146:	79 85       	ldd	r23, Y+9	; 0x09
    3148:	8a 85       	ldd	r24, Y+10	; 0x0a
    314a:	9b 85       	ldd	r25, Y+11	; 0x0b
    314c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	9f 83       	std	Y+7, r25	; 0x07
    3156:	8e 83       	std	Y+6, r24	; 0x06
    3158:	8e 81       	ldd	r24, Y+6	; 0x06
    315a:	9f 81       	ldd	r25, Y+7	; 0x07
    315c:	9b 83       	std	Y+3, r25	; 0x03
    315e:	8a 83       	std	Y+2, r24	; 0x02
    3160:	8a 81       	ldd	r24, Y+2	; 0x02
    3162:	9b 81       	ldd	r25, Y+3	; 0x03
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <lcd_data+0x856>
    3168:	9b 83       	std	Y+3, r25	; 0x03
    316a:	8a 83       	std	Y+2, r24	; 0x02
    316c:	0f c0       	rjmp	.+30     	; 0x318c <lcd_data+0x87e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    316e:	69 89       	ldd	r22, Y+17	; 0x11
    3170:	7a 89       	ldd	r23, Y+18	; 0x12
    3172:	8b 89       	ldd	r24, Y+19	; 0x13
    3174:	9c 89       	ldd	r25, Y+20	; 0x14
    3176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	88 8b       	std	Y+16, r24	; 0x10
    3180:	88 89       	ldd	r24, Y+16	; 0x10
    3182:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	8a 95       	dec	r24
    3188:	f1 f7       	brne	.-4      	; 0x3186 <lcd_data+0x878>
    318a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    318c:	cf 59       	subi	r28, 0x9F	; 159
    318e:	df 4f       	sbci	r29, 0xFF	; 255
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	f8 94       	cli
    3194:	de bf       	out	0x3e, r29	; 62
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	cd bf       	out	0x3d, r28	; 61
    319a:	cf 91       	pop	r28
    319c:	df 91       	pop	r29
    319e:	1f 91       	pop	r17
    31a0:	0f 91       	pop	r16
    31a2:	08 95       	ret

000031a4 <lcd_string>:

void lcd_string(uint8 *str) {
    31a4:	df 93       	push	r29
    31a6:	cf 93       	push	r28
    31a8:	00 d0       	rcall	.+0      	; 0x31aa <lcd_string+0x6>
    31aa:	0f 92       	push	r0
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	9b 83       	std	Y+3, r25	; 0x03
    31b2:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i = 0; str[i]; i++) {
    31b4:	19 82       	std	Y+1, r1	; 0x01
    31b6:	14 c0       	rjmp	.+40     	; 0x31e0 <lcd_string+0x3c>
		if (i == 16) {
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	80 31       	cpi	r24, 0x10	; 16
    31bc:	19 f4       	brne	.+6      	; 0x31c4 <lcd_string+0x20>
			lcd_cmd(0xc0);
    31be:	80 ec       	ldi	r24, 0xC0	; 192
    31c0:	0e 94 3c 10 	call	0x2078	; 0x2078 <lcd_cmd>
		}
		lcd_data(str[i]);
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	28 2f       	mov	r18, r24
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	8a 81       	ldd	r24, Y+2	; 0x02
    31cc:	9b 81       	ldd	r25, Y+3	; 0x03
    31ce:	fc 01       	movw	r30, r24
    31d0:	e2 0f       	add	r30, r18
    31d2:	f3 1f       	adc	r31, r19
    31d4:	80 81       	ld	r24, Z
    31d6:	0e 94 87 14 	call	0x290e	; 0x290e <lcd_data>
	DIO_Write(PORT_B3, Low);
	_delay_us(200);
}

void lcd_string(uint8 *str) {
	for (uint8 i = 0; str[i]; i++) {
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	8f 5f       	subi	r24, 0xFF	; 255
    31de:	89 83       	std	Y+1, r24	; 0x01
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	28 2f       	mov	r18, r24
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ea:	fc 01       	movw	r30, r24
    31ec:	e2 0f       	add	r30, r18
    31ee:	f3 1f       	adc	r31, r19
    31f0:	80 81       	ld	r24, Z
    31f2:	88 23       	and	r24, r24
    31f4:	09 f7       	brne	.-62     	; 0x31b8 <lcd_string+0x14>
		if (i == 16) {
			lcd_cmd(0xc0);
		}
		lcd_data(str[i]);
	}
}
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	08 95       	ret

00003202 <lcd_sent_num>:

void lcd_sent_num(uint32 num) {
    3202:	df 93       	push	r29
    3204:	cf 93       	push	r28
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62
    320a:	2e 97       	sbiw	r28, 0x0e	; 14
    320c:	0f b6       	in	r0, 0x3f	; 63
    320e:	f8 94       	cli
    3210:	de bf       	out	0x3e, r29	; 62
    3212:	0f be       	out	0x3f, r0	; 63
    3214:	cd bf       	out	0x3d, r28	; 61
    3216:	6b 87       	std	Y+11, r22	; 0x0b
    3218:	7c 87       	std	Y+12, r23	; 0x0c
    321a:	8d 87       	std	Y+13, r24	; 0x0d
    321c:	9e 87       	std	Y+14, r25	; 0x0e
	uint8 n[10];
	itoa(num, n, 10);
    321e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3220:	9c 85       	ldd	r25, Y+12	; 0x0c
    3222:	9e 01       	movw	r18, r28
    3224:	2f 5f       	subi	r18, 0xFF	; 255
    3226:	3f 4f       	sbci	r19, 0xFF	; 255
    3228:	b9 01       	movw	r22, r18
    322a:	4a e0       	ldi	r20, 0x0A	; 10
    322c:	50 e0       	ldi	r21, 0x00	; 0
    322e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <itoa>
	lcd_string(n);
    3232:	ce 01       	movw	r24, r28
    3234:	01 96       	adiw	r24, 0x01	; 1
    3236:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <lcd_string>
}
    323a:	2e 96       	adiw	r28, 0x0e	; 14
    323c:	0f b6       	in	r0, 0x3f	; 63
    323e:	f8 94       	cli
    3240:	de bf       	out	0x3e, r29	; 62
    3242:	0f be       	out	0x3f, r0	; 63
    3244:	cd bf       	out	0x3d, r28	; 61
    3246:	cf 91       	pop	r28
    3248:	df 91       	pop	r29
    324a:	08 95       	ret

0000324c <lcd_proteus_init>:

void lcd_proteus_init(void) {
    324c:	df 93       	push	r29
    324e:	cf 93       	push	r28
    3250:	cd b7       	in	r28, 0x3d	; 61
    3252:	de b7       	in	r29, 0x3e	; 62
    3254:	2e 97       	sbiw	r28, 0x0e	; 14
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61
	DDRD=0xff;
    3260:	e1 e3       	ldi	r30, 0x31	; 49
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	8f ef       	ldi	r24, 0xFF	; 255
    3266:	80 83       	st	Z, r24
	CLEAR_BIT(PORTD,2);
    3268:	a2 e3       	ldi	r26, 0x32	; 50
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	e2 e3       	ldi	r30, 0x32	; 50
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	8b 7f       	andi	r24, 0xFB	; 251
    3274:	8c 93       	st	X, r24
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	a0 ea       	ldi	r26, 0xA0	; 160
    327c:	b1 e4       	ldi	r27, 0x41	; 65
    327e:	8b 87       	std	Y+11, r24	; 0x0b
    3280:	9c 87       	std	Y+12, r25	; 0x0c
    3282:	ad 87       	std	Y+13, r26	; 0x0d
    3284:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3286:	6b 85       	ldd	r22, Y+11	; 0x0b
    3288:	7c 85       	ldd	r23, Y+12	; 0x0c
    328a:	8d 85       	ldd	r24, Y+13	; 0x0d
    328c:	9e 85       	ldd	r25, Y+14	; 0x0e
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	4a e7       	ldi	r20, 0x7A	; 122
    3294:	55 e4       	ldi	r21, 0x45	; 69
    3296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	8f 83       	std	Y+7, r24	; 0x07
    32a0:	98 87       	std	Y+8, r25	; 0x08
    32a2:	a9 87       	std	Y+9, r26	; 0x09
    32a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32a6:	6f 81       	ldd	r22, Y+7	; 0x07
    32a8:	78 85       	ldd	r23, Y+8	; 0x08
    32aa:	89 85       	ldd	r24, Y+9	; 0x09
    32ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	40 e8       	ldi	r20, 0x80	; 128
    32b4:	5f e3       	ldi	r21, 0x3F	; 63
    32b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ba:	88 23       	and	r24, r24
    32bc:	2c f4       	brge	.+10     	; 0x32c8 <lcd_proteus_init+0x7c>
		__ticks = 1;
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	9e 83       	std	Y+6, r25	; 0x06
    32c4:	8d 83       	std	Y+5, r24	; 0x05
    32c6:	3f c0       	rjmp	.+126    	; 0x3346 <lcd_proteus_init+0xfa>
	else if (__tmp > 65535)
    32c8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ca:	78 85       	ldd	r23, Y+8	; 0x08
    32cc:	89 85       	ldd	r24, Y+9	; 0x09
    32ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	3f ef       	ldi	r19, 0xFF	; 255
    32d4:	4f e7       	ldi	r20, 0x7F	; 127
    32d6:	57 e4       	ldi	r21, 0x47	; 71
    32d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32dc:	18 16       	cp	r1, r24
    32de:	4c f5       	brge	.+82     	; 0x3332 <lcd_proteus_init+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	40 e2       	ldi	r20, 0x20	; 32
    32ee:	51 e4       	ldi	r21, 0x41	; 65
    32f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	bc 01       	movw	r22, r24
    32fa:	cd 01       	movw	r24, r26
    32fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	9e 83       	std	Y+6, r25	; 0x06
    3306:	8d 83       	std	Y+5, r24	; 0x05
    3308:	0f c0       	rjmp	.+30     	; 0x3328 <lcd_proteus_init+0xdc>
    330a:	80 e9       	ldi	r24, 0x90	; 144
    330c:	91 e0       	ldi	r25, 0x01	; 1
    330e:	9c 83       	std	Y+4, r25	; 0x04
    3310:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3312:	8b 81       	ldd	r24, Y+3	; 0x03
    3314:	9c 81       	ldd	r25, Y+4	; 0x04
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <lcd_proteus_init+0xca>
    331a:	9c 83       	std	Y+4, r25	; 0x04
    331c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331e:	8d 81       	ldd	r24, Y+5	; 0x05
    3320:	9e 81       	ldd	r25, Y+6	; 0x06
    3322:	01 97       	sbiw	r24, 0x01	; 1
    3324:	9e 83       	std	Y+6, r25	; 0x06
    3326:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3328:	8d 81       	ldd	r24, Y+5	; 0x05
    332a:	9e 81       	ldd	r25, Y+6	; 0x06
    332c:	00 97       	sbiw	r24, 0x00	; 0
    332e:	69 f7       	brne	.-38     	; 0x330a <lcd_proteus_init+0xbe>
    3330:	14 c0       	rjmp	.+40     	; 0x335a <lcd_proteus_init+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3332:	6f 81       	ldd	r22, Y+7	; 0x07
    3334:	78 85       	ldd	r23, Y+8	; 0x08
    3336:	89 85       	ldd	r24, Y+9	; 0x09
    3338:	9a 85       	ldd	r25, Y+10	; 0x0a
    333a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	9e 83       	std	Y+6, r25	; 0x06
    3344:	8d 83       	std	Y+5, r24	; 0x05
    3346:	8d 81       	ldd	r24, Y+5	; 0x05
    3348:	9e 81       	ldd	r25, Y+6	; 0x06
    334a:	9a 83       	std	Y+2, r25	; 0x02
    334c:	89 83       	std	Y+1, r24	; 0x01
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	9a 81       	ldd	r25, Y+2	; 0x02
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	f1 f7       	brne	.-4      	; 0x3352 <lcd_proteus_init+0x106>
    3356:	9a 83       	std	Y+2, r25	; 0x02
    3358:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	lcd_proteus_cmd(0x01);
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	0e 94 cb 19 	call	0x3396	; 0x3396 <lcd_proteus_cmd>
	lcd_proteus_cmd(0x33);
    3360:	83 e3       	ldi	r24, 0x33	; 51
    3362:	0e 94 cb 19 	call	0x3396	; 0x3396 <lcd_proteus_cmd>
	lcd_proteus_cmd(0x32);
    3366:	82 e3       	ldi	r24, 0x32	; 50
    3368:	0e 94 cb 19 	call	0x3396	; 0x3396 <lcd_proteus_cmd>
	lcd_proteus_cmd(0x28);
    336c:	88 e2       	ldi	r24, 0x28	; 40
    336e:	0e 94 cb 19 	call	0x3396	; 0x3396 <lcd_proteus_cmd>
	lcd_proteus_cmd(0x0f);
    3372:	8f e0       	ldi	r24, 0x0F	; 15
    3374:	0e 94 cb 19 	call	0x3396	; 0x3396 <lcd_proteus_cmd>
	lcd_proteus_cmd(0x06);
    3378:	86 e0       	ldi	r24, 0x06	; 6
    337a:	0e 94 cb 19 	call	0x3396	; 0x3396 <lcd_proteus_cmd>
	lcd_proteus_cmd(0x01);
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	0e 94 cb 19 	call	0x3396	; 0x3396 <lcd_proteus_cmd>
//	lcd_proteus_cmd(0x80);
}
    3384:	2e 96       	adiw	r28, 0x0e	; 14
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	f8 94       	cli
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	0f be       	out	0x3f, r0	; 63
    338e:	cd bf       	out	0x3d, r28	; 61
    3390:	cf 91       	pop	r28
    3392:	df 91       	pop	r29
    3394:	08 95       	ret

00003396 <lcd_proteus_cmd>:

void lcd_proteus_cmd(uint8 cmd) {
    3396:	0f 93       	push	r16
    3398:	1f 93       	push	r17
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	c1 56       	subi	r28, 0x61	; 97
    33a4:	d0 40       	sbci	r29, 0x00	; 0
    33a6:	0f b6       	in	r0, 0x3f	; 63
    33a8:	f8 94       	cli
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	cd bf       	out	0x3d, r28	; 61
    33b0:	fe 01       	movw	r30, r28
    33b2:	ef 59       	subi	r30, 0x9F	; 159
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	80 83       	st	Z, r24
	CLEAR_BIT(PORTD,2);
    33b8:	a2 e3       	ldi	r26, 0x32	; 50
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	e2 e3       	ldi	r30, 0x32	; 50
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	80 81       	ld	r24, Z
    33c2:	8b 7f       	andi	r24, 0xFB	; 251
    33c4:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD,1);
    33c6:	a2 e3       	ldi	r26, 0x32	; 50
    33c8:	b0 e0       	ldi	r27, 0x00	; 0
    33ca:	e2 e3       	ldi	r30, 0x32	; 50
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	80 81       	ld	r24, Z
    33d0:	8d 7f       	andi	r24, 0xFD	; 253
    33d2:	8c 93       	st	X, r24
	if(GET_BIT(cmd, 4)) { SET_BIT(PORTD,4) ;}else{ CLEAR_BIT(PORTD,4);}
    33d4:	fe 01       	movw	r30, r28
    33d6:	ef 59       	subi	r30, 0x9F	; 159
    33d8:	ff 4f       	sbci	r31, 0xFF	; 255
    33da:	80 81       	ld	r24, Z
    33dc:	88 2f       	mov	r24, r24
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	80 71       	andi	r24, 0x10	; 16
    33e2:	90 70       	andi	r25, 0x00	; 0
    33e4:	00 97       	sbiw	r24, 0x00	; 0
    33e6:	41 f0       	breq	.+16     	; 0x33f8 <lcd_proteus_cmd+0x62>
    33e8:	a2 e3       	ldi	r26, 0x32	; 50
    33ea:	b0 e0       	ldi	r27, 0x00	; 0
    33ec:	e2 e3       	ldi	r30, 0x32	; 50
    33ee:	f0 e0       	ldi	r31, 0x00	; 0
    33f0:	80 81       	ld	r24, Z
    33f2:	80 61       	ori	r24, 0x10	; 16
    33f4:	8c 93       	st	X, r24
    33f6:	07 c0       	rjmp	.+14     	; 0x3406 <lcd_proteus_cmd+0x70>
    33f8:	a2 e3       	ldi	r26, 0x32	; 50
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	e2 e3       	ldi	r30, 0x32	; 50
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	80 81       	ld	r24, Z
    3402:	8f 7e       	andi	r24, 0xEF	; 239
    3404:	8c 93       	st	X, r24
	if(GET_BIT(cmd, 5)) { SET_BIT(PORTD,5) ;}else{ CLEAR_BIT(PORTD,5);}
    3406:	fe 01       	movw	r30, r28
    3408:	ef 59       	subi	r30, 0x9F	; 159
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	80 81       	ld	r24, Z
    340e:	88 2f       	mov	r24, r24
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	80 72       	andi	r24, 0x20	; 32
    3414:	90 70       	andi	r25, 0x00	; 0
    3416:	00 97       	sbiw	r24, 0x00	; 0
    3418:	41 f0       	breq	.+16     	; 0x342a <lcd_proteus_cmd+0x94>
    341a:	a2 e3       	ldi	r26, 0x32	; 50
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	e2 e3       	ldi	r30, 0x32	; 50
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	80 62       	ori	r24, 0x20	; 32
    3426:	8c 93       	st	X, r24
    3428:	07 c0       	rjmp	.+14     	; 0x3438 <lcd_proteus_cmd+0xa2>
    342a:	a2 e3       	ldi	r26, 0x32	; 50
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	e2 e3       	ldi	r30, 0x32	; 50
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	80 81       	ld	r24, Z
    3434:	8f 7d       	andi	r24, 0xDF	; 223
    3436:	8c 93       	st	X, r24
	if(GET_BIT(cmd, 6)) { SET_BIT(PORTD,6) ;}else{ CLEAR_BIT(PORTD,6);}
    3438:	fe 01       	movw	r30, r28
    343a:	ef 59       	subi	r30, 0x9F	; 159
    343c:	ff 4f       	sbci	r31, 0xFF	; 255
    343e:	80 81       	ld	r24, Z
    3440:	88 2f       	mov	r24, r24
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	80 74       	andi	r24, 0x40	; 64
    3446:	90 70       	andi	r25, 0x00	; 0
    3448:	00 97       	sbiw	r24, 0x00	; 0
    344a:	41 f0       	breq	.+16     	; 0x345c <lcd_proteus_cmd+0xc6>
    344c:	a2 e3       	ldi	r26, 0x32	; 50
    344e:	b0 e0       	ldi	r27, 0x00	; 0
    3450:	e2 e3       	ldi	r30, 0x32	; 50
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	80 81       	ld	r24, Z
    3456:	80 64       	ori	r24, 0x40	; 64
    3458:	8c 93       	st	X, r24
    345a:	07 c0       	rjmp	.+14     	; 0x346a <lcd_proteus_cmd+0xd4>
    345c:	a2 e3       	ldi	r26, 0x32	; 50
    345e:	b0 e0       	ldi	r27, 0x00	; 0
    3460:	e2 e3       	ldi	r30, 0x32	; 50
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	80 81       	ld	r24, Z
    3466:	8f 7b       	andi	r24, 0xBF	; 191
    3468:	8c 93       	st	X, r24
	if(GET_BIT(cmd, 7)) { SET_BIT(PORTD,7) ;}else{ CLEAR_BIT(PORTD,7);}
    346a:	fe 01       	movw	r30, r28
    346c:	ef 59       	subi	r30, 0x9F	; 159
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	80 81       	ld	r24, Z
    3472:	88 23       	and	r24, r24
    3474:	44 f4       	brge	.+16     	; 0x3486 <lcd_proteus_cmd+0xf0>
    3476:	a2 e3       	ldi	r26, 0x32	; 50
    3478:	b0 e0       	ldi	r27, 0x00	; 0
    347a:	e2 e3       	ldi	r30, 0x32	; 50
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 81       	ld	r24, Z
    3480:	80 68       	ori	r24, 0x80	; 128
    3482:	8c 93       	st	X, r24
    3484:	07 c0       	rjmp	.+14     	; 0x3494 <lcd_proteus_cmd+0xfe>
    3486:	a2 e3       	ldi	r26, 0x32	; 50
    3488:	b0 e0       	ldi	r27, 0x00	; 0
    348a:	e2 e3       	ldi	r30, 0x32	; 50
    348c:	f0 e0       	ldi	r31, 0x00	; 0
    348e:	80 81       	ld	r24, Z
    3490:	8f 77       	andi	r24, 0x7F	; 127
    3492:	8c 93       	st	X, r24
	SET_BIT(PORTD,3);
    3494:	a2 e3       	ldi	r26, 0x32	; 50
    3496:	b0 e0       	ldi	r27, 0x00	; 0
    3498:	e2 e3       	ldi	r30, 0x32	; 50
    349a:	f0 e0       	ldi	r31, 0x00	; 0
    349c:	80 81       	ld	r24, Z
    349e:	88 60       	ori	r24, 0x08	; 8
    34a0:	8c 93       	st	X, r24
    34a2:	fe 01       	movw	r30, r28
    34a4:	e3 5a       	subi	r30, 0xA3	; 163
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	a0 e2       	ldi	r26, 0x20	; 32
    34ae:	b1 e4       	ldi	r27, 0x41	; 65
    34b0:	80 83       	st	Z, r24
    34b2:	91 83       	std	Z+1, r25	; 0x01
    34b4:	a2 83       	std	Z+2, r26	; 0x02
    34b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    34b8:	8e 01       	movw	r16, r28
    34ba:	07 5a       	subi	r16, 0xA7	; 167
    34bc:	1f 4f       	sbci	r17, 0xFF	; 255
    34be:	fe 01       	movw	r30, r28
    34c0:	e3 5a       	subi	r30, 0xA3	; 163
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	60 81       	ld	r22, Z
    34c6:	71 81       	ldd	r23, Z+1	; 0x01
    34c8:	82 81       	ldd	r24, Z+2	; 0x02
    34ca:	93 81       	ldd	r25, Z+3	; 0x03
    34cc:	2b ea       	ldi	r18, 0xAB	; 171
    34ce:	3a ea       	ldi	r19, 0xAA	; 170
    34d0:	4a ea       	ldi	r20, 0xAA	; 170
    34d2:	50 e4       	ldi	r21, 0x40	; 64
    34d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	f8 01       	movw	r30, r16
    34de:	80 83       	st	Z, r24
    34e0:	91 83       	std	Z+1, r25	; 0x01
    34e2:	a2 83       	std	Z+2, r26	; 0x02
    34e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34e6:	fe 01       	movw	r30, r28
    34e8:	e7 5a       	subi	r30, 0xA7	; 167
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	60 81       	ld	r22, Z
    34ee:	71 81       	ldd	r23, Z+1	; 0x01
    34f0:	82 81       	ldd	r24, Z+2	; 0x02
    34f2:	93 81       	ldd	r25, Z+3	; 0x03
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e8       	ldi	r20, 0x80	; 128
    34fa:	5f e3       	ldi	r21, 0x3F	; 63
    34fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3500:	88 23       	and	r24, r24
    3502:	34 f4       	brge	.+12     	; 0x3510 <lcd_proteus_cmd+0x17a>
		__ticks = 1;
    3504:	fe 01       	movw	r30, r28
    3506:	e8 5a       	subi	r30, 0xA8	; 168
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	80 83       	st	Z, r24
    350e:	e0 c0       	rjmp	.+448    	; 0x36d0 <lcd_proteus_cmd+0x33a>
	else if (__tmp > 255)
    3510:	fe 01       	movw	r30, r28
    3512:	e7 5a       	subi	r30, 0xA7	; 167
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	60 81       	ld	r22, Z
    3518:	71 81       	ldd	r23, Z+1	; 0x01
    351a:	82 81       	ldd	r24, Z+2	; 0x02
    351c:	93 81       	ldd	r25, Z+3	; 0x03
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	4f e7       	ldi	r20, 0x7F	; 127
    3524:	53 e4       	ldi	r21, 0x43	; 67
    3526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    352a:	18 16       	cp	r1, r24
    352c:	0c f0       	brlt	.+2      	; 0x3530 <lcd_proteus_cmd+0x19a>
    352e:	c0 c0       	rjmp	.+384    	; 0x36b0 <lcd_proteus_cmd+0x31a>
	{
		_delay_ms(__us / 1000.0);
    3530:	fe 01       	movw	r30, r28
    3532:	e3 5a       	subi	r30, 0xA3	; 163
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	60 81       	ld	r22, Z
    3538:	71 81       	ldd	r23, Z+1	; 0x01
    353a:	82 81       	ldd	r24, Z+2	; 0x02
    353c:	93 81       	ldd	r25, Z+3	; 0x03
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	4a e7       	ldi	r20, 0x7A	; 122
    3544:	54 e4       	ldi	r21, 0x44	; 68
    3546:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	fe 01       	movw	r30, r28
    3550:	ec 5a       	subi	r30, 0xAC	; 172
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	80 83       	st	Z, r24
    3556:	91 83       	std	Z+1, r25	; 0x01
    3558:	a2 83       	std	Z+2, r26	; 0x02
    355a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    355c:	8e 01       	movw	r16, r28
    355e:	00 5b       	subi	r16, 0xB0	; 176
    3560:	1f 4f       	sbci	r17, 0xFF	; 255
    3562:	fe 01       	movw	r30, r28
    3564:	ec 5a       	subi	r30, 0xAC	; 172
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	60 81       	ld	r22, Z
    356a:	71 81       	ldd	r23, Z+1	; 0x01
    356c:	82 81       	ldd	r24, Z+2	; 0x02
    356e:	93 81       	ldd	r25, Z+3	; 0x03
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	4a e7       	ldi	r20, 0x7A	; 122
    3576:	55 e4       	ldi	r21, 0x45	; 69
    3578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	f8 01       	movw	r30, r16
    3582:	80 83       	st	Z, r24
    3584:	91 83       	std	Z+1, r25	; 0x01
    3586:	a2 83       	std	Z+2, r26	; 0x02
    3588:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    358a:	fe 01       	movw	r30, r28
    358c:	e0 5b       	subi	r30, 0xB0	; 176
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	60 81       	ld	r22, Z
    3592:	71 81       	ldd	r23, Z+1	; 0x01
    3594:	82 81       	ldd	r24, Z+2	; 0x02
    3596:	93 81       	ldd	r25, Z+3	; 0x03
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	40 e8       	ldi	r20, 0x80	; 128
    359e:	5f e3       	ldi	r21, 0x3F	; 63
    35a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35a4:	88 23       	and	r24, r24
    35a6:	44 f4       	brge	.+16     	; 0x35b8 <lcd_proteus_cmd+0x222>
		__ticks = 1;
    35a8:	fe 01       	movw	r30, r28
    35aa:	e2 5b       	subi	r30, 0xB2	; 178
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	91 83       	std	Z+1, r25	; 0x01
    35b4:	80 83       	st	Z, r24
    35b6:	64 c0       	rjmp	.+200    	; 0x3680 <lcd_proteus_cmd+0x2ea>
	else if (__tmp > 65535)
    35b8:	fe 01       	movw	r30, r28
    35ba:	e0 5b       	subi	r30, 0xB0	; 176
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	60 81       	ld	r22, Z
    35c0:	71 81       	ldd	r23, Z+1	; 0x01
    35c2:	82 81       	ldd	r24, Z+2	; 0x02
    35c4:	93 81       	ldd	r25, Z+3	; 0x03
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	3f ef       	ldi	r19, 0xFF	; 255
    35ca:	4f e7       	ldi	r20, 0x7F	; 127
    35cc:	57 e4       	ldi	r21, 0x47	; 71
    35ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35d2:	18 16       	cp	r1, r24
    35d4:	0c f0       	brlt	.+2      	; 0x35d8 <lcd_proteus_cmd+0x242>
    35d6:	43 c0       	rjmp	.+134    	; 0x365e <lcd_proteus_cmd+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d8:	fe 01       	movw	r30, r28
    35da:	ec 5a       	subi	r30, 0xAC	; 172
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	60 81       	ld	r22, Z
    35e0:	71 81       	ldd	r23, Z+1	; 0x01
    35e2:	82 81       	ldd	r24, Z+2	; 0x02
    35e4:	93 81       	ldd	r25, Z+3	; 0x03
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	40 e2       	ldi	r20, 0x20	; 32
    35ec:	51 e4       	ldi	r21, 0x41	; 65
    35ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	8e 01       	movw	r16, r28
    35f8:	02 5b       	subi	r16, 0xB2	; 178
    35fa:	1f 4f       	sbci	r17, 0xFF	; 255
    35fc:	bc 01       	movw	r22, r24
    35fe:	cd 01       	movw	r24, r26
    3600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	f8 01       	movw	r30, r16
    360a:	91 83       	std	Z+1, r25	; 0x01
    360c:	80 83       	st	Z, r24
    360e:	1f c0       	rjmp	.+62     	; 0x364e <lcd_proteus_cmd+0x2b8>
    3610:	fe 01       	movw	r30, r28
    3612:	e4 5b       	subi	r30, 0xB4	; 180
    3614:	ff 4f       	sbci	r31, 0xFF	; 255
    3616:	80 e9       	ldi	r24, 0x90	; 144
    3618:	91 e0       	ldi	r25, 0x01	; 1
    361a:	91 83       	std	Z+1, r25	; 0x01
    361c:	80 83       	st	Z, r24
    361e:	fe 01       	movw	r30, r28
    3620:	e4 5b       	subi	r30, 0xB4	; 180
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	80 81       	ld	r24, Z
    3626:	91 81       	ldd	r25, Z+1	; 0x01
    3628:	01 97       	sbiw	r24, 0x01	; 1
    362a:	f1 f7       	brne	.-4      	; 0x3628 <lcd_proteus_cmd+0x292>
    362c:	fe 01       	movw	r30, r28
    362e:	e4 5b       	subi	r30, 0xB4	; 180
    3630:	ff 4f       	sbci	r31, 0xFF	; 255
    3632:	91 83       	std	Z+1, r25	; 0x01
    3634:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3636:	de 01       	movw	r26, r28
    3638:	a2 5b       	subi	r26, 0xB2	; 178
    363a:	bf 4f       	sbci	r27, 0xFF	; 255
    363c:	fe 01       	movw	r30, r28
    363e:	e2 5b       	subi	r30, 0xB2	; 178
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	80 81       	ld	r24, Z
    3644:	91 81       	ldd	r25, Z+1	; 0x01
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	11 96       	adiw	r26, 0x01	; 1
    364a:	9c 93       	st	X, r25
    364c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    364e:	fe 01       	movw	r30, r28
    3650:	e2 5b       	subi	r30, 0xB2	; 178
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	80 81       	ld	r24, Z
    3656:	91 81       	ldd	r25, Z+1	; 0x01
    3658:	00 97       	sbiw	r24, 0x00	; 0
    365a:	d1 f6       	brne	.-76     	; 0x3610 <lcd_proteus_cmd+0x27a>
    365c:	4b c0       	rjmp	.+150    	; 0x36f4 <lcd_proteus_cmd+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    365e:	8e 01       	movw	r16, r28
    3660:	02 5b       	subi	r16, 0xB2	; 178
    3662:	1f 4f       	sbci	r17, 0xFF	; 255
    3664:	fe 01       	movw	r30, r28
    3666:	e0 5b       	subi	r30, 0xB0	; 176
    3668:	ff 4f       	sbci	r31, 0xFF	; 255
    366a:	60 81       	ld	r22, Z
    366c:	71 81       	ldd	r23, Z+1	; 0x01
    366e:	82 81       	ldd	r24, Z+2	; 0x02
    3670:	93 81       	ldd	r25, Z+3	; 0x03
    3672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	f8 01       	movw	r30, r16
    367c:	91 83       	std	Z+1, r25	; 0x01
    367e:	80 83       	st	Z, r24
    3680:	de 01       	movw	r26, r28
    3682:	a6 5b       	subi	r26, 0xB6	; 182
    3684:	bf 4f       	sbci	r27, 0xFF	; 255
    3686:	fe 01       	movw	r30, r28
    3688:	e2 5b       	subi	r30, 0xB2	; 178
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	80 81       	ld	r24, Z
    368e:	91 81       	ldd	r25, Z+1	; 0x01
    3690:	11 96       	adiw	r26, 0x01	; 1
    3692:	9c 93       	st	X, r25
    3694:	8e 93       	st	-X, r24
    3696:	fe 01       	movw	r30, r28
    3698:	e6 5b       	subi	r30, 0xB6	; 182
    369a:	ff 4f       	sbci	r31, 0xFF	; 255
    369c:	80 81       	ld	r24, Z
    369e:	91 81       	ldd	r25, Z+1	; 0x01
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	f1 f7       	brne	.-4      	; 0x36a0 <lcd_proteus_cmd+0x30a>
    36a4:	fe 01       	movw	r30, r28
    36a6:	e6 5b       	subi	r30, 0xB6	; 182
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	91 83       	std	Z+1, r25	; 0x01
    36ac:	80 83       	st	Z, r24
    36ae:	22 c0       	rjmp	.+68     	; 0x36f4 <lcd_proteus_cmd+0x35e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    36b0:	8e 01       	movw	r16, r28
    36b2:	08 5a       	subi	r16, 0xA8	; 168
    36b4:	1f 4f       	sbci	r17, 0xFF	; 255
    36b6:	fe 01       	movw	r30, r28
    36b8:	e7 5a       	subi	r30, 0xA7	; 167
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	60 81       	ld	r22, Z
    36be:	71 81       	ldd	r23, Z+1	; 0x01
    36c0:	82 81       	ldd	r24, Z+2	; 0x02
    36c2:	93 81       	ldd	r25, Z+3	; 0x03
    36c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c8:	dc 01       	movw	r26, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	f8 01       	movw	r30, r16
    36ce:	80 83       	st	Z, r24
    36d0:	de 01       	movw	r26, r28
    36d2:	a7 5b       	subi	r26, 0xB7	; 183
    36d4:	bf 4f       	sbci	r27, 0xFF	; 255
    36d6:	fe 01       	movw	r30, r28
    36d8:	e8 5a       	subi	r30, 0xA8	; 168
    36da:	ff 4f       	sbci	r31, 0xFF	; 255
    36dc:	80 81       	ld	r24, Z
    36de:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    36e0:	fe 01       	movw	r30, r28
    36e2:	e7 5b       	subi	r30, 0xB7	; 183
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	80 81       	ld	r24, Z
    36e8:	8a 95       	dec	r24
    36ea:	f1 f7       	brne	.-4      	; 0x36e8 <lcd_proteus_cmd+0x352>
    36ec:	fe 01       	movw	r30, r28
    36ee:	e7 5b       	subi	r30, 0xB7	; 183
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	80 83       	st	Z, r24
	_delay_us(10);
	CLEAR_BIT(PORTD,3);
    36f4:	a2 e3       	ldi	r26, 0x32	; 50
    36f6:	b0 e0       	ldi	r27, 0x00	; 0
    36f8:	e2 e3       	ldi	r30, 0x32	; 50
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	87 7f       	andi	r24, 0xF7	; 247
    3700:	8c 93       	st	X, r24
    3702:	fe 01       	movw	r30, r28
    3704:	eb 5b       	subi	r30, 0xBB	; 187
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	a8 e4       	ldi	r26, 0x48	; 72
    370e:	b3 e4       	ldi	r27, 0x43	; 67
    3710:	80 83       	st	Z, r24
    3712:	91 83       	std	Z+1, r25	; 0x01
    3714:	a2 83       	std	Z+2, r26	; 0x02
    3716:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3718:	8e 01       	movw	r16, r28
    371a:	0f 5b       	subi	r16, 0xBF	; 191
    371c:	1f 4f       	sbci	r17, 0xFF	; 255
    371e:	fe 01       	movw	r30, r28
    3720:	eb 5b       	subi	r30, 0xBB	; 187
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	60 81       	ld	r22, Z
    3726:	71 81       	ldd	r23, Z+1	; 0x01
    3728:	82 81       	ldd	r24, Z+2	; 0x02
    372a:	93 81       	ldd	r25, Z+3	; 0x03
    372c:	2b ea       	ldi	r18, 0xAB	; 171
    372e:	3a ea       	ldi	r19, 0xAA	; 170
    3730:	4a ea       	ldi	r20, 0xAA	; 170
    3732:	50 e4       	ldi	r21, 0x40	; 64
    3734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	f8 01       	movw	r30, r16
    373e:	80 83       	st	Z, r24
    3740:	91 83       	std	Z+1, r25	; 0x01
    3742:	a2 83       	std	Z+2, r26	; 0x02
    3744:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3746:	fe 01       	movw	r30, r28
    3748:	ef 5b       	subi	r30, 0xBF	; 191
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	60 81       	ld	r22, Z
    374e:	71 81       	ldd	r23, Z+1	; 0x01
    3750:	82 81       	ldd	r24, Z+2	; 0x02
    3752:	93 81       	ldd	r25, Z+3	; 0x03
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	40 e8       	ldi	r20, 0x80	; 128
    375a:	5f e3       	ldi	r21, 0x3F	; 63
    375c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3760:	88 23       	and	r24, r24
    3762:	34 f4       	brge	.+12     	; 0x3770 <lcd_proteus_cmd+0x3da>
		__ticks = 1;
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	fe 01       	movw	r30, r28
    3768:	e0 5c       	subi	r30, 0xC0	; 192
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	80 83       	st	Z, r24
    376e:	9d c0       	rjmp	.+314    	; 0x38aa <lcd_proteus_cmd+0x514>
	else if (__tmp > 255)
    3770:	fe 01       	movw	r30, r28
    3772:	ef 5b       	subi	r30, 0xBF	; 191
    3774:	ff 4f       	sbci	r31, 0xFF	; 255
    3776:	60 81       	ld	r22, Z
    3778:	71 81       	ldd	r23, Z+1	; 0x01
    377a:	82 81       	ldd	r24, Z+2	; 0x02
    377c:	93 81       	ldd	r25, Z+3	; 0x03
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	4f e7       	ldi	r20, 0x7F	; 127
    3784:	53 e4       	ldi	r21, 0x43	; 67
    3786:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    378a:	18 16       	cp	r1, r24
    378c:	0c f0       	brlt	.+2      	; 0x3790 <lcd_proteus_cmd+0x3fa>
    378e:	7e c0       	rjmp	.+252    	; 0x388c <lcd_proteus_cmd+0x4f6>
	{
		_delay_ms(__us / 1000.0);
    3790:	fe 01       	movw	r30, r28
    3792:	eb 5b       	subi	r30, 0xBB	; 187
    3794:	ff 4f       	sbci	r31, 0xFF	; 255
    3796:	60 81       	ld	r22, Z
    3798:	71 81       	ldd	r23, Z+1	; 0x01
    379a:	82 81       	ldd	r24, Z+2	; 0x02
    379c:	93 81       	ldd	r25, Z+3	; 0x03
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	4a e7       	ldi	r20, 0x7A	; 122
    37a4:	54 e4       	ldi	r21, 0x44	; 68
    37a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	8c af       	std	Y+60, r24	; 0x3c
    37b0:	9d af       	std	Y+61, r25	; 0x3d
    37b2:	ae af       	std	Y+62, r26	; 0x3e
    37b4:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37b6:	6c ad       	ldd	r22, Y+60	; 0x3c
    37b8:	7d ad       	ldd	r23, Y+61	; 0x3d
    37ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    37bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	4a e7       	ldi	r20, 0x7A	; 122
    37c4:	55 e4       	ldi	r21, 0x45	; 69
    37c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	88 af       	std	Y+56, r24	; 0x38
    37d0:	99 af       	std	Y+57, r25	; 0x39
    37d2:	aa af       	std	Y+58, r26	; 0x3a
    37d4:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    37d6:	68 ad       	ldd	r22, Y+56	; 0x38
    37d8:	79 ad       	ldd	r23, Y+57	; 0x39
    37da:	8a ad       	ldd	r24, Y+58	; 0x3a
    37dc:	9b ad       	ldd	r25, Y+59	; 0x3b
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	40 e8       	ldi	r20, 0x80	; 128
    37e4:	5f e3       	ldi	r21, 0x3F	; 63
    37e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ea:	88 23       	and	r24, r24
    37ec:	2c f4       	brge	.+10     	; 0x37f8 <lcd_proteus_cmd+0x462>
		__ticks = 1;
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	9f ab       	std	Y+55, r25	; 0x37
    37f4:	8e ab       	std	Y+54, r24	; 0x36
    37f6:	3f c0       	rjmp	.+126    	; 0x3876 <lcd_proteus_cmd+0x4e0>
	else if (__tmp > 65535)
    37f8:	68 ad       	ldd	r22, Y+56	; 0x38
    37fa:	79 ad       	ldd	r23, Y+57	; 0x39
    37fc:	8a ad       	ldd	r24, Y+58	; 0x3a
    37fe:	9b ad       	ldd	r25, Y+59	; 0x3b
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	3f ef       	ldi	r19, 0xFF	; 255
    3804:	4f e7       	ldi	r20, 0x7F	; 127
    3806:	57 e4       	ldi	r21, 0x47	; 71
    3808:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    380c:	18 16       	cp	r1, r24
    380e:	4c f5       	brge	.+82     	; 0x3862 <lcd_proteus_cmd+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3810:	6c ad       	ldd	r22, Y+60	; 0x3c
    3812:	7d ad       	ldd	r23, Y+61	; 0x3d
    3814:	8e ad       	ldd	r24, Y+62	; 0x3e
    3816:	9f ad       	ldd	r25, Y+63	; 0x3f
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e2       	ldi	r20, 0x20	; 32
    381e:	51 e4       	ldi	r21, 0x41	; 65
    3820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	bc 01       	movw	r22, r24
    382a:	cd 01       	movw	r24, r26
    382c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	9f ab       	std	Y+55, r25	; 0x37
    3836:	8e ab       	std	Y+54, r24	; 0x36
    3838:	0f c0       	rjmp	.+30     	; 0x3858 <lcd_proteus_cmd+0x4c2>
    383a:	80 e9       	ldi	r24, 0x90	; 144
    383c:	91 e0       	ldi	r25, 0x01	; 1
    383e:	9d ab       	std	Y+53, r25	; 0x35
    3840:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3842:	8c a9       	ldd	r24, Y+52	; 0x34
    3844:	9d a9       	ldd	r25, Y+53	; 0x35
    3846:	01 97       	sbiw	r24, 0x01	; 1
    3848:	f1 f7       	brne	.-4      	; 0x3846 <lcd_proteus_cmd+0x4b0>
    384a:	9d ab       	std	Y+53, r25	; 0x35
    384c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    384e:	8e a9       	ldd	r24, Y+54	; 0x36
    3850:	9f a9       	ldd	r25, Y+55	; 0x37
    3852:	01 97       	sbiw	r24, 0x01	; 1
    3854:	9f ab       	std	Y+55, r25	; 0x37
    3856:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3858:	8e a9       	ldd	r24, Y+54	; 0x36
    385a:	9f a9       	ldd	r25, Y+55	; 0x37
    385c:	00 97       	sbiw	r24, 0x00	; 0
    385e:	69 f7       	brne	.-38     	; 0x383a <lcd_proteus_cmd+0x4a4>
    3860:	2d c0       	rjmp	.+90     	; 0x38bc <lcd_proteus_cmd+0x526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3862:	68 ad       	ldd	r22, Y+56	; 0x38
    3864:	79 ad       	ldd	r23, Y+57	; 0x39
    3866:	8a ad       	ldd	r24, Y+58	; 0x3a
    3868:	9b ad       	ldd	r25, Y+59	; 0x3b
    386a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	9f ab       	std	Y+55, r25	; 0x37
    3874:	8e ab       	std	Y+54, r24	; 0x36
    3876:	8e a9       	ldd	r24, Y+54	; 0x36
    3878:	9f a9       	ldd	r25, Y+55	; 0x37
    387a:	9b ab       	std	Y+51, r25	; 0x33
    387c:	8a ab       	std	Y+50, r24	; 0x32
    387e:	8a a9       	ldd	r24, Y+50	; 0x32
    3880:	9b a9       	ldd	r25, Y+51	; 0x33
    3882:	01 97       	sbiw	r24, 0x01	; 1
    3884:	f1 f7       	brne	.-4      	; 0x3882 <lcd_proteus_cmd+0x4ec>
    3886:	9b ab       	std	Y+51, r25	; 0x33
    3888:	8a ab       	std	Y+50, r24	; 0x32
    388a:	18 c0       	rjmp	.+48     	; 0x38bc <lcd_proteus_cmd+0x526>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    388c:	fe 01       	movw	r30, r28
    388e:	ef 5b       	subi	r30, 0xBF	; 191
    3890:	ff 4f       	sbci	r31, 0xFF	; 255
    3892:	60 81       	ld	r22, Z
    3894:	71 81       	ldd	r23, Z+1	; 0x01
    3896:	82 81       	ldd	r24, Z+2	; 0x02
    3898:	93 81       	ldd	r25, Z+3	; 0x03
    389a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389e:	dc 01       	movw	r26, r24
    38a0:	cb 01       	movw	r24, r22
    38a2:	fe 01       	movw	r30, r28
    38a4:	e0 5c       	subi	r30, 0xC0	; 192
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	80 83       	st	Z, r24
    38aa:	fe 01       	movw	r30, r28
    38ac:	e0 5c       	subi	r30, 0xC0	; 192
    38ae:	ff 4f       	sbci	r31, 0xFF	; 255
    38b0:	80 81       	ld	r24, Z
    38b2:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    38b4:	89 a9       	ldd	r24, Y+49	; 0x31
    38b6:	8a 95       	dec	r24
    38b8:	f1 f7       	brne	.-4      	; 0x38b6 <lcd_proteus_cmd+0x520>
    38ba:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);
	if(GET_BIT(cmd, 0)) { SET_BIT(PORTD,4); }else{ CLEAR_BIT(PORTD,4);}
    38bc:	fe 01       	movw	r30, r28
    38be:	ef 59       	subi	r30, 0x9F	; 159
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	80 81       	ld	r24, Z
    38c4:	88 2f       	mov	r24, r24
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	81 70       	andi	r24, 0x01	; 1
    38ca:	90 70       	andi	r25, 0x00	; 0
    38cc:	88 23       	and	r24, r24
    38ce:	41 f0       	breq	.+16     	; 0x38e0 <lcd_proteus_cmd+0x54a>
    38d0:	a2 e3       	ldi	r26, 0x32	; 50
    38d2:	b0 e0       	ldi	r27, 0x00	; 0
    38d4:	e2 e3       	ldi	r30, 0x32	; 50
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	80 81       	ld	r24, Z
    38da:	80 61       	ori	r24, 0x10	; 16
    38dc:	8c 93       	st	X, r24
    38de:	07 c0       	rjmp	.+14     	; 0x38ee <lcd_proteus_cmd+0x558>
    38e0:	a2 e3       	ldi	r26, 0x32	; 50
    38e2:	b0 e0       	ldi	r27, 0x00	; 0
    38e4:	e2 e3       	ldi	r30, 0x32	; 50
    38e6:	f0 e0       	ldi	r31, 0x00	; 0
    38e8:	80 81       	ld	r24, Z
    38ea:	8f 7e       	andi	r24, 0xEF	; 239
    38ec:	8c 93       	st	X, r24
	if(GET_BIT(cmd, 1)) { SET_BIT(PORTD,5) ;}else{ CLEAR_BIT(PORTD,5);}
    38ee:	fe 01       	movw	r30, r28
    38f0:	ef 59       	subi	r30, 0x9F	; 159
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	80 81       	ld	r24, Z
    38f6:	88 2f       	mov	r24, r24
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	82 70       	andi	r24, 0x02	; 2
    38fc:	90 70       	andi	r25, 0x00	; 0
    38fe:	00 97       	sbiw	r24, 0x00	; 0
    3900:	41 f0       	breq	.+16     	; 0x3912 <lcd_proteus_cmd+0x57c>
    3902:	a2 e3       	ldi	r26, 0x32	; 50
    3904:	b0 e0       	ldi	r27, 0x00	; 0
    3906:	e2 e3       	ldi	r30, 0x32	; 50
    3908:	f0 e0       	ldi	r31, 0x00	; 0
    390a:	80 81       	ld	r24, Z
    390c:	80 62       	ori	r24, 0x20	; 32
    390e:	8c 93       	st	X, r24
    3910:	07 c0       	rjmp	.+14     	; 0x3920 <lcd_proteus_cmd+0x58a>
    3912:	a2 e3       	ldi	r26, 0x32	; 50
    3914:	b0 e0       	ldi	r27, 0x00	; 0
    3916:	e2 e3       	ldi	r30, 0x32	; 50
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	80 81       	ld	r24, Z
    391c:	8f 7d       	andi	r24, 0xDF	; 223
    391e:	8c 93       	st	X, r24
	if(GET_BIT(cmd, 2)) { SET_BIT(PORTD,6) ;}else{ CLEAR_BIT(PORTD,6);}
    3920:	fe 01       	movw	r30, r28
    3922:	ef 59       	subi	r30, 0x9F	; 159
    3924:	ff 4f       	sbci	r31, 0xFF	; 255
    3926:	80 81       	ld	r24, Z
    3928:	88 2f       	mov	r24, r24
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	84 70       	andi	r24, 0x04	; 4
    392e:	90 70       	andi	r25, 0x00	; 0
    3930:	00 97       	sbiw	r24, 0x00	; 0
    3932:	41 f0       	breq	.+16     	; 0x3944 <lcd_proteus_cmd+0x5ae>
    3934:	a2 e3       	ldi	r26, 0x32	; 50
    3936:	b0 e0       	ldi	r27, 0x00	; 0
    3938:	e2 e3       	ldi	r30, 0x32	; 50
    393a:	f0 e0       	ldi	r31, 0x00	; 0
    393c:	80 81       	ld	r24, Z
    393e:	80 64       	ori	r24, 0x40	; 64
    3940:	8c 93       	st	X, r24
    3942:	07 c0       	rjmp	.+14     	; 0x3952 <lcd_proteus_cmd+0x5bc>
    3944:	a2 e3       	ldi	r26, 0x32	; 50
    3946:	b0 e0       	ldi	r27, 0x00	; 0
    3948:	e2 e3       	ldi	r30, 0x32	; 50
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	80 81       	ld	r24, Z
    394e:	8f 7b       	andi	r24, 0xBF	; 191
    3950:	8c 93       	st	X, r24
	if(GET_BIT(cmd, 3)) { SET_BIT(PORTD,7) ;}else{ CLEAR_BIT(PORTD,7);}
    3952:	fe 01       	movw	r30, r28
    3954:	ef 59       	subi	r30, 0x9F	; 159
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	80 81       	ld	r24, Z
    395a:	88 2f       	mov	r24, r24
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	88 70       	andi	r24, 0x08	; 8
    3960:	90 70       	andi	r25, 0x00	; 0
    3962:	00 97       	sbiw	r24, 0x00	; 0
    3964:	41 f0       	breq	.+16     	; 0x3976 <lcd_proteus_cmd+0x5e0>
    3966:	a2 e3       	ldi	r26, 0x32	; 50
    3968:	b0 e0       	ldi	r27, 0x00	; 0
    396a:	e2 e3       	ldi	r30, 0x32	; 50
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	80 81       	ld	r24, Z
    3970:	80 68       	ori	r24, 0x80	; 128
    3972:	8c 93       	st	X, r24
    3974:	07 c0       	rjmp	.+14     	; 0x3984 <lcd_proteus_cmd+0x5ee>
    3976:	a2 e3       	ldi	r26, 0x32	; 50
    3978:	b0 e0       	ldi	r27, 0x00	; 0
    397a:	e2 e3       	ldi	r30, 0x32	; 50
    397c:	f0 e0       	ldi	r31, 0x00	; 0
    397e:	80 81       	ld	r24, Z
    3980:	8f 77       	andi	r24, 0x7F	; 127
    3982:	8c 93       	st	X, r24
	SET_BIT(PORTD,3);
    3984:	a2 e3       	ldi	r26, 0x32	; 50
    3986:	b0 e0       	ldi	r27, 0x00	; 0
    3988:	e2 e3       	ldi	r30, 0x32	; 50
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	80 81       	ld	r24, Z
    398e:	88 60       	ori	r24, 0x08	; 8
    3990:	8c 93       	st	X, r24
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	a0 e2       	ldi	r26, 0x20	; 32
    3998:	b1 e4       	ldi	r27, 0x41	; 65
    399a:	8d a7       	std	Y+45, r24	; 0x2d
    399c:	9e a7       	std	Y+46, r25	; 0x2e
    399e:	af a7       	std	Y+47, r26	; 0x2f
    39a0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    39a2:	6d a5       	ldd	r22, Y+45	; 0x2d
    39a4:	7e a5       	ldd	r23, Y+46	; 0x2e
    39a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    39a8:	98 a9       	ldd	r25, Y+48	; 0x30
    39aa:	2b ea       	ldi	r18, 0xAB	; 171
    39ac:	3a ea       	ldi	r19, 0xAA	; 170
    39ae:	4a ea       	ldi	r20, 0xAA	; 170
    39b0:	50 e4       	ldi	r21, 0x40	; 64
    39b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	89 a7       	std	Y+41, r24	; 0x29
    39bc:	9a a7       	std	Y+42, r25	; 0x2a
    39be:	ab a7       	std	Y+43, r26	; 0x2b
    39c0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    39c2:	69 a5       	ldd	r22, Y+41	; 0x29
    39c4:	7a a5       	ldd	r23, Y+42	; 0x2a
    39c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    39c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	40 e8       	ldi	r20, 0x80	; 128
    39d0:	5f e3       	ldi	r21, 0x3F	; 63
    39d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39d6:	88 23       	and	r24, r24
    39d8:	1c f4       	brge	.+6      	; 0x39e0 <lcd_proteus_cmd+0x64a>
		__ticks = 1;
    39da:	81 e0       	ldi	r24, 0x01	; 1
    39dc:	88 a7       	std	Y+40, r24	; 0x28
    39de:	91 c0       	rjmp	.+290    	; 0x3b02 <lcd_proteus_cmd+0x76c>
	else if (__tmp > 255)
    39e0:	69 a5       	ldd	r22, Y+41	; 0x29
    39e2:	7a a5       	ldd	r23, Y+42	; 0x2a
    39e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    39e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	4f e7       	ldi	r20, 0x7F	; 127
    39ee:	53 e4       	ldi	r21, 0x43	; 67
    39f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39f4:	18 16       	cp	r1, r24
    39f6:	0c f0       	brlt	.+2      	; 0x39fa <lcd_proteus_cmd+0x664>
    39f8:	7b c0       	rjmp	.+246    	; 0x3af0 <lcd_proteus_cmd+0x75a>
	{
		_delay_ms(__us / 1000.0);
    39fa:	6d a5       	ldd	r22, Y+45	; 0x2d
    39fc:	7e a5       	ldd	r23, Y+46	; 0x2e
    39fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a00:	98 a9       	ldd	r25, Y+48	; 0x30
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	4a e7       	ldi	r20, 0x7A	; 122
    3a08:	54 e4       	ldi	r21, 0x44	; 68
    3a0a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	8c a3       	std	Y+36, r24	; 0x24
    3a14:	9d a3       	std	Y+37, r25	; 0x25
    3a16:	ae a3       	std	Y+38, r26	; 0x26
    3a18:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a1a:	6c a1       	ldd	r22, Y+36	; 0x24
    3a1c:	7d a1       	ldd	r23, Y+37	; 0x25
    3a1e:	8e a1       	ldd	r24, Y+38	; 0x26
    3a20:	9f a1       	ldd	r25, Y+39	; 0x27
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	4a e7       	ldi	r20, 0x7A	; 122
    3a28:	55 e4       	ldi	r21, 0x45	; 69
    3a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2e:	dc 01       	movw	r26, r24
    3a30:	cb 01       	movw	r24, r22
    3a32:	88 a3       	std	Y+32, r24	; 0x20
    3a34:	99 a3       	std	Y+33, r25	; 0x21
    3a36:	aa a3       	std	Y+34, r26	; 0x22
    3a38:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3a3a:	68 a1       	ldd	r22, Y+32	; 0x20
    3a3c:	79 a1       	ldd	r23, Y+33	; 0x21
    3a3e:	8a a1       	ldd	r24, Y+34	; 0x22
    3a40:	9b a1       	ldd	r25, Y+35	; 0x23
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	40 e8       	ldi	r20, 0x80	; 128
    3a48:	5f e3       	ldi	r21, 0x3F	; 63
    3a4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a4e:	88 23       	and	r24, r24
    3a50:	2c f4       	brge	.+10     	; 0x3a5c <lcd_proteus_cmd+0x6c6>
		__ticks = 1;
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	9f 8f       	std	Y+31, r25	; 0x1f
    3a58:	8e 8f       	std	Y+30, r24	; 0x1e
    3a5a:	3f c0       	rjmp	.+126    	; 0x3ada <lcd_proteus_cmd+0x744>
	else if (__tmp > 65535)
    3a5c:	68 a1       	ldd	r22, Y+32	; 0x20
    3a5e:	79 a1       	ldd	r23, Y+33	; 0x21
    3a60:	8a a1       	ldd	r24, Y+34	; 0x22
    3a62:	9b a1       	ldd	r25, Y+35	; 0x23
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	3f ef       	ldi	r19, 0xFF	; 255
    3a68:	4f e7       	ldi	r20, 0x7F	; 127
    3a6a:	57 e4       	ldi	r21, 0x47	; 71
    3a6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a70:	18 16       	cp	r1, r24
    3a72:	4c f5       	brge	.+82     	; 0x3ac6 <lcd_proteus_cmd+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a74:	6c a1       	ldd	r22, Y+36	; 0x24
    3a76:	7d a1       	ldd	r23, Y+37	; 0x25
    3a78:	8e a1       	ldd	r24, Y+38	; 0x26
    3a7a:	9f a1       	ldd	r25, Y+39	; 0x27
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	40 e2       	ldi	r20, 0x20	; 32
    3a82:	51 e4       	ldi	r21, 0x41	; 65
    3a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	bc 01       	movw	r22, r24
    3a8e:	cd 01       	movw	r24, r26
    3a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	9f 8f       	std	Y+31, r25	; 0x1f
    3a9a:	8e 8f       	std	Y+30, r24	; 0x1e
    3a9c:	0f c0       	rjmp	.+30     	; 0x3abc <lcd_proteus_cmd+0x726>
    3a9e:	80 e9       	ldi	r24, 0x90	; 144
    3aa0:	91 e0       	ldi	r25, 0x01	; 1
    3aa2:	9d 8f       	std	Y+29, r25	; 0x1d
    3aa4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3aa6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3aa8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3aaa:	01 97       	sbiw	r24, 0x01	; 1
    3aac:	f1 f7       	brne	.-4      	; 0x3aaa <lcd_proteus_cmd+0x714>
    3aae:	9d 8f       	std	Y+29, r25	; 0x1d
    3ab0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ab4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	9f 8f       	std	Y+31, r25	; 0x1f
    3aba:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3abc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3abe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ac0:	00 97       	sbiw	r24, 0x00	; 0
    3ac2:	69 f7       	brne	.-38     	; 0x3a9e <lcd_proteus_cmd+0x708>
    3ac4:	24 c0       	rjmp	.+72     	; 0x3b0e <lcd_proteus_cmd+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac6:	68 a1       	ldd	r22, Y+32	; 0x20
    3ac8:	79 a1       	ldd	r23, Y+33	; 0x21
    3aca:	8a a1       	ldd	r24, Y+34	; 0x22
    3acc:	9b a1       	ldd	r25, Y+35	; 0x23
    3ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	9f 8f       	std	Y+31, r25	; 0x1f
    3ad8:	8e 8f       	std	Y+30, r24	; 0x1e
    3ada:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3adc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ade:	9b 8f       	std	Y+27, r25	; 0x1b
    3ae0:	8a 8f       	std	Y+26, r24	; 0x1a
    3ae2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3ae4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3ae6:	01 97       	sbiw	r24, 0x01	; 1
    3ae8:	f1 f7       	brne	.-4      	; 0x3ae6 <lcd_proteus_cmd+0x750>
    3aea:	9b 8f       	std	Y+27, r25	; 0x1b
    3aec:	8a 8f       	std	Y+26, r24	; 0x1a
    3aee:	0f c0       	rjmp	.+30     	; 0x3b0e <lcd_proteus_cmd+0x778>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3af0:	69 a5       	ldd	r22, Y+41	; 0x29
    3af2:	7a a5       	ldd	r23, Y+42	; 0x2a
    3af4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3af6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	88 a7       	std	Y+40, r24	; 0x28
    3b02:	88 a5       	ldd	r24, Y+40	; 0x28
    3b04:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b06:	89 8d       	ldd	r24, Y+25	; 0x19
    3b08:	8a 95       	dec	r24
    3b0a:	f1 f7       	brne	.-4      	; 0x3b08 <lcd_proteus_cmd+0x772>
    3b0c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	CLEAR_BIT(PORTD,3);
    3b0e:	a2 e3       	ldi	r26, 0x32	; 50
    3b10:	b0 e0       	ldi	r27, 0x00	; 0
    3b12:	e2 e3       	ldi	r30, 0x32	; 50
    3b14:	f0 e0       	ldi	r31, 0x00	; 0
    3b16:	80 81       	ld	r24, Z
    3b18:	87 7f       	andi	r24, 0xF7	; 247
    3b1a:	8c 93       	st	X, r24
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	a8 e4       	ldi	r26, 0x48	; 72
    3b22:	b3 e4       	ldi	r27, 0x43	; 67
    3b24:	8d 8b       	std	Y+21, r24	; 0x15
    3b26:	9e 8b       	std	Y+22, r25	; 0x16
    3b28:	af 8b       	std	Y+23, r26	; 0x17
    3b2a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    3b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    3b30:	8f 89       	ldd	r24, Y+23	; 0x17
    3b32:	98 8d       	ldd	r25, Y+24	; 0x18
    3b34:	2b ea       	ldi	r18, 0xAB	; 171
    3b36:	3a ea       	ldi	r19, 0xAA	; 170
    3b38:	4a ea       	ldi	r20, 0xAA	; 170
    3b3a:	50 e4       	ldi	r21, 0x40	; 64
    3b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	89 8b       	std	Y+17, r24	; 0x11
    3b46:	9a 8b       	std	Y+18, r25	; 0x12
    3b48:	ab 8b       	std	Y+19, r26	; 0x13
    3b4a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3b4c:	69 89       	ldd	r22, Y+17	; 0x11
    3b4e:	7a 89       	ldd	r23, Y+18	; 0x12
    3b50:	8b 89       	ldd	r24, Y+19	; 0x13
    3b52:	9c 89       	ldd	r25, Y+20	; 0x14
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	40 e8       	ldi	r20, 0x80	; 128
    3b5a:	5f e3       	ldi	r21, 0x3F	; 63
    3b5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b60:	88 23       	and	r24, r24
    3b62:	1c f4       	brge	.+6      	; 0x3b6a <lcd_proteus_cmd+0x7d4>
		__ticks = 1;
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	88 8b       	std	Y+16, r24	; 0x10
    3b68:	91 c0       	rjmp	.+290    	; 0x3c8c <lcd_proteus_cmd+0x8f6>
	else if (__tmp > 255)
    3b6a:	69 89       	ldd	r22, Y+17	; 0x11
    3b6c:	7a 89       	ldd	r23, Y+18	; 0x12
    3b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b70:	9c 89       	ldd	r25, Y+20	; 0x14
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	4f e7       	ldi	r20, 0x7F	; 127
    3b78:	53 e4       	ldi	r21, 0x43	; 67
    3b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b7e:	18 16       	cp	r1, r24
    3b80:	0c f0       	brlt	.+2      	; 0x3b84 <lcd_proteus_cmd+0x7ee>
    3b82:	7b c0       	rjmp	.+246    	; 0x3c7a <lcd_proteus_cmd+0x8e4>
	{
		_delay_ms(__us / 1000.0);
    3b84:	6d 89       	ldd	r22, Y+21	; 0x15
    3b86:	7e 89       	ldd	r23, Y+22	; 0x16
    3b88:	8f 89       	ldd	r24, Y+23	; 0x17
    3b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	4a e7       	ldi	r20, 0x7A	; 122
    3b92:	54 e4       	ldi	r21, 0x44	; 68
    3b94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	8c 87       	std	Y+12, r24	; 0x0c
    3b9e:	9d 87       	std	Y+13, r25	; 0x0d
    3ba0:	ae 87       	std	Y+14, r26	; 0x0e
    3ba2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ba4:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ba6:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ba8:	8e 85       	ldd	r24, Y+14	; 0x0e
    3baa:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bac:	20 e0       	ldi	r18, 0x00	; 0
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	4a e7       	ldi	r20, 0x7A	; 122
    3bb2:	55 e4       	ldi	r21, 0x45	; 69
    3bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	88 87       	std	Y+8, r24	; 0x08
    3bbe:	99 87       	std	Y+9, r25	; 0x09
    3bc0:	aa 87       	std	Y+10, r26	; 0x0a
    3bc2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3bc4:	68 85       	ldd	r22, Y+8	; 0x08
    3bc6:	79 85       	ldd	r23, Y+9	; 0x09
    3bc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bca:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	40 e8       	ldi	r20, 0x80	; 128
    3bd2:	5f e3       	ldi	r21, 0x3F	; 63
    3bd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bd8:	88 23       	and	r24, r24
    3bda:	2c f4       	brge	.+10     	; 0x3be6 <lcd_proteus_cmd+0x850>
		__ticks = 1;
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	9f 83       	std	Y+7, r25	; 0x07
    3be2:	8e 83       	std	Y+6, r24	; 0x06
    3be4:	3f c0       	rjmp	.+126    	; 0x3c64 <lcd_proteus_cmd+0x8ce>
	else if (__tmp > 65535)
    3be6:	68 85       	ldd	r22, Y+8	; 0x08
    3be8:	79 85       	ldd	r23, Y+9	; 0x09
    3bea:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bec:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	3f ef       	ldi	r19, 0xFF	; 255
    3bf2:	4f e7       	ldi	r20, 0x7F	; 127
    3bf4:	57 e4       	ldi	r21, 0x47	; 71
    3bf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bfa:	18 16       	cp	r1, r24
    3bfc:	4c f5       	brge	.+82     	; 0x3c50 <lcd_proteus_cmd+0x8ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bfe:	6c 85       	ldd	r22, Y+12	; 0x0c
    3c00:	7d 85       	ldd	r23, Y+13	; 0x0d
    3c02:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c04:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	40 e2       	ldi	r20, 0x20	; 32
    3c0c:	51 e4       	ldi	r21, 0x41	; 65
    3c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	bc 01       	movw	r22, r24
    3c18:	cd 01       	movw	r24, r26
    3c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c1e:	dc 01       	movw	r26, r24
    3c20:	cb 01       	movw	r24, r22
    3c22:	9f 83       	std	Y+7, r25	; 0x07
    3c24:	8e 83       	std	Y+6, r24	; 0x06
    3c26:	0f c0       	rjmp	.+30     	; 0x3c46 <lcd_proteus_cmd+0x8b0>
    3c28:	80 e9       	ldi	r24, 0x90	; 144
    3c2a:	91 e0       	ldi	r25, 0x01	; 1
    3c2c:	9d 83       	std	Y+5, r25	; 0x05
    3c2e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c30:	8c 81       	ldd	r24, Y+4	; 0x04
    3c32:	9d 81       	ldd	r25, Y+5	; 0x05
    3c34:	01 97       	sbiw	r24, 0x01	; 1
    3c36:	f1 f7       	brne	.-4      	; 0x3c34 <lcd_proteus_cmd+0x89e>
    3c38:	9d 83       	std	Y+5, r25	; 0x05
    3c3a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    3c3e:	9f 81       	ldd	r25, Y+7	; 0x07
    3c40:	01 97       	sbiw	r24, 0x01	; 1
    3c42:	9f 83       	std	Y+7, r25	; 0x07
    3c44:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c46:	8e 81       	ldd	r24, Y+6	; 0x06
    3c48:	9f 81       	ldd	r25, Y+7	; 0x07
    3c4a:	00 97       	sbiw	r24, 0x00	; 0
    3c4c:	69 f7       	brne	.-38     	; 0x3c28 <lcd_proteus_cmd+0x892>
    3c4e:	24 c0       	rjmp	.+72     	; 0x3c98 <lcd_proteus_cmd+0x902>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c50:	68 85       	ldd	r22, Y+8	; 0x08
    3c52:	79 85       	ldd	r23, Y+9	; 0x09
    3c54:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c56:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	9f 83       	std	Y+7, r25	; 0x07
    3c62:	8e 83       	std	Y+6, r24	; 0x06
    3c64:	8e 81       	ldd	r24, Y+6	; 0x06
    3c66:	9f 81       	ldd	r25, Y+7	; 0x07
    3c68:	9b 83       	std	Y+3, r25	; 0x03
    3c6a:	8a 83       	std	Y+2, r24	; 0x02
    3c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c70:	01 97       	sbiw	r24, 0x01	; 1
    3c72:	f1 f7       	brne	.-4      	; 0x3c70 <lcd_proteus_cmd+0x8da>
    3c74:	9b 83       	std	Y+3, r25	; 0x03
    3c76:	8a 83       	std	Y+2, r24	; 0x02
    3c78:	0f c0       	rjmp	.+30     	; 0x3c98 <lcd_proteus_cmd+0x902>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c7a:	69 89       	ldd	r22, Y+17	; 0x11
    3c7c:	7a 89       	ldd	r23, Y+18	; 0x12
    3c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c80:	9c 89       	ldd	r25, Y+20	; 0x14
    3c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	88 8b       	std	Y+16, r24	; 0x10
    3c8c:	88 89       	ldd	r24, Y+16	; 0x10
    3c8e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	8a 95       	dec	r24
    3c94:	f1 f7       	brne	.-4      	; 0x3c92 <lcd_proteus_cmd+0x8fc>
    3c96:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    3c98:	cf 59       	subi	r28, 0x9F	; 159
    3c9a:	df 4f       	sbci	r29, 0xFF	; 255
    3c9c:	0f b6       	in	r0, 0x3f	; 63
    3c9e:	f8 94       	cli
    3ca0:	de bf       	out	0x3e, r29	; 62
    3ca2:	0f be       	out	0x3f, r0	; 63
    3ca4:	cd bf       	out	0x3d, r28	; 61
    3ca6:	cf 91       	pop	r28
    3ca8:	df 91       	pop	r29
    3caa:	1f 91       	pop	r17
    3cac:	0f 91       	pop	r16
    3cae:	08 95       	ret

00003cb0 <lcd_proteus_data>:

void lcd_proteus_data(uint8 data) {
    3cb0:	0f 93       	push	r16
    3cb2:	1f 93       	push	r17
    3cb4:	df 93       	push	r29
    3cb6:	cf 93       	push	r28
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
    3cbc:	c1 56       	subi	r28, 0x61	; 97
    3cbe:	d0 40       	sbci	r29, 0x00	; 0
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	f8 94       	cli
    3cc4:	de bf       	out	0x3e, r29	; 62
    3cc6:	0f be       	out	0x3f, r0	; 63
    3cc8:	cd bf       	out	0x3d, r28	; 61
    3cca:	fe 01       	movw	r30, r28
    3ccc:	ef 59       	subi	r30, 0x9F	; 159
    3cce:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd0:	80 83       	st	Z, r24
	CLEAR_BIT(PORTD,2);
    3cd2:	a2 e3       	ldi	r26, 0x32	; 50
    3cd4:	b0 e0       	ldi	r27, 0x00	; 0
    3cd6:	e2 e3       	ldi	r30, 0x32	; 50
    3cd8:	f0 e0       	ldi	r31, 0x00	; 0
    3cda:	80 81       	ld	r24, Z
    3cdc:	8b 7f       	andi	r24, 0xFB	; 251
    3cde:	8c 93       	st	X, r24
	SET_BIT(PORTD,1);
    3ce0:	a2 e3       	ldi	r26, 0x32	; 50
    3ce2:	b0 e0       	ldi	r27, 0x00	; 0
    3ce4:	e2 e3       	ldi	r30, 0x32	; 50
    3ce6:	f0 e0       	ldi	r31, 0x00	; 0
    3ce8:	80 81       	ld	r24, Z
    3cea:	82 60       	ori	r24, 0x02	; 2
    3cec:	8c 93       	st	X, r24
	if(GET_BIT(data, 4)) { SET_BIT(PORTD,4) ;}else{ CLEAR_BIT(PORTD,4);}
    3cee:	fe 01       	movw	r30, r28
    3cf0:	ef 59       	subi	r30, 0x9F	; 159
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	80 81       	ld	r24, Z
    3cf6:	88 2f       	mov	r24, r24
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	80 71       	andi	r24, 0x10	; 16
    3cfc:	90 70       	andi	r25, 0x00	; 0
    3cfe:	00 97       	sbiw	r24, 0x00	; 0
    3d00:	41 f0       	breq	.+16     	; 0x3d12 <lcd_proteus_data+0x62>
    3d02:	a2 e3       	ldi	r26, 0x32	; 50
    3d04:	b0 e0       	ldi	r27, 0x00	; 0
    3d06:	e2 e3       	ldi	r30, 0x32	; 50
    3d08:	f0 e0       	ldi	r31, 0x00	; 0
    3d0a:	80 81       	ld	r24, Z
    3d0c:	80 61       	ori	r24, 0x10	; 16
    3d0e:	8c 93       	st	X, r24
    3d10:	07 c0       	rjmp	.+14     	; 0x3d20 <lcd_proteus_data+0x70>
    3d12:	a2 e3       	ldi	r26, 0x32	; 50
    3d14:	b0 e0       	ldi	r27, 0x00	; 0
    3d16:	e2 e3       	ldi	r30, 0x32	; 50
    3d18:	f0 e0       	ldi	r31, 0x00	; 0
    3d1a:	80 81       	ld	r24, Z
    3d1c:	8f 7e       	andi	r24, 0xEF	; 239
    3d1e:	8c 93       	st	X, r24
	if(GET_BIT(data, 5)) { SET_BIT(PORTD,5) ;}else{ CLEAR_BIT(PORTD,5);}
    3d20:	fe 01       	movw	r30, r28
    3d22:	ef 59       	subi	r30, 0x9F	; 159
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	80 81       	ld	r24, Z
    3d28:	88 2f       	mov	r24, r24
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	80 72       	andi	r24, 0x20	; 32
    3d2e:	90 70       	andi	r25, 0x00	; 0
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	41 f0       	breq	.+16     	; 0x3d44 <lcd_proteus_data+0x94>
    3d34:	a2 e3       	ldi	r26, 0x32	; 50
    3d36:	b0 e0       	ldi	r27, 0x00	; 0
    3d38:	e2 e3       	ldi	r30, 0x32	; 50
    3d3a:	f0 e0       	ldi	r31, 0x00	; 0
    3d3c:	80 81       	ld	r24, Z
    3d3e:	80 62       	ori	r24, 0x20	; 32
    3d40:	8c 93       	st	X, r24
    3d42:	07 c0       	rjmp	.+14     	; 0x3d52 <lcd_proteus_data+0xa2>
    3d44:	a2 e3       	ldi	r26, 0x32	; 50
    3d46:	b0 e0       	ldi	r27, 0x00	; 0
    3d48:	e2 e3       	ldi	r30, 0x32	; 50
    3d4a:	f0 e0       	ldi	r31, 0x00	; 0
    3d4c:	80 81       	ld	r24, Z
    3d4e:	8f 7d       	andi	r24, 0xDF	; 223
    3d50:	8c 93       	st	X, r24
	if(GET_BIT(data, 6)) { SET_BIT(PORTD,6) ;}else{ CLEAR_BIT(PORTD,6);}
    3d52:	fe 01       	movw	r30, r28
    3d54:	ef 59       	subi	r30, 0x9F	; 159
    3d56:	ff 4f       	sbci	r31, 0xFF	; 255
    3d58:	80 81       	ld	r24, Z
    3d5a:	88 2f       	mov	r24, r24
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	80 74       	andi	r24, 0x40	; 64
    3d60:	90 70       	andi	r25, 0x00	; 0
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	41 f0       	breq	.+16     	; 0x3d76 <lcd_proteus_data+0xc6>
    3d66:	a2 e3       	ldi	r26, 0x32	; 50
    3d68:	b0 e0       	ldi	r27, 0x00	; 0
    3d6a:	e2 e3       	ldi	r30, 0x32	; 50
    3d6c:	f0 e0       	ldi	r31, 0x00	; 0
    3d6e:	80 81       	ld	r24, Z
    3d70:	80 64       	ori	r24, 0x40	; 64
    3d72:	8c 93       	st	X, r24
    3d74:	07 c0       	rjmp	.+14     	; 0x3d84 <lcd_proteus_data+0xd4>
    3d76:	a2 e3       	ldi	r26, 0x32	; 50
    3d78:	b0 e0       	ldi	r27, 0x00	; 0
    3d7a:	e2 e3       	ldi	r30, 0x32	; 50
    3d7c:	f0 e0       	ldi	r31, 0x00	; 0
    3d7e:	80 81       	ld	r24, Z
    3d80:	8f 7b       	andi	r24, 0xBF	; 191
    3d82:	8c 93       	st	X, r24
	if(GET_BIT(data, 7)) { SET_BIT(PORTD,7) ;}else{ CLEAR_BIT(PORTD,7);}
    3d84:	fe 01       	movw	r30, r28
    3d86:	ef 59       	subi	r30, 0x9F	; 159
    3d88:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8a:	80 81       	ld	r24, Z
    3d8c:	88 23       	and	r24, r24
    3d8e:	44 f4       	brge	.+16     	; 0x3da0 <lcd_proteus_data+0xf0>
    3d90:	a2 e3       	ldi	r26, 0x32	; 50
    3d92:	b0 e0       	ldi	r27, 0x00	; 0
    3d94:	e2 e3       	ldi	r30, 0x32	; 50
    3d96:	f0 e0       	ldi	r31, 0x00	; 0
    3d98:	80 81       	ld	r24, Z
    3d9a:	80 68       	ori	r24, 0x80	; 128
    3d9c:	8c 93       	st	X, r24
    3d9e:	07 c0       	rjmp	.+14     	; 0x3dae <lcd_proteus_data+0xfe>
    3da0:	a2 e3       	ldi	r26, 0x32	; 50
    3da2:	b0 e0       	ldi	r27, 0x00	; 0
    3da4:	e2 e3       	ldi	r30, 0x32	; 50
    3da6:	f0 e0       	ldi	r31, 0x00	; 0
    3da8:	80 81       	ld	r24, Z
    3daa:	8f 77       	andi	r24, 0x7F	; 127
    3dac:	8c 93       	st	X, r24
	SET_BIT(PORTD,3);
    3dae:	a2 e3       	ldi	r26, 0x32	; 50
    3db0:	b0 e0       	ldi	r27, 0x00	; 0
    3db2:	e2 e3       	ldi	r30, 0x32	; 50
    3db4:	f0 e0       	ldi	r31, 0x00	; 0
    3db6:	80 81       	ld	r24, Z
    3db8:	88 60       	ori	r24, 0x08	; 8
    3dba:	8c 93       	st	X, r24
    3dbc:	fe 01       	movw	r30, r28
    3dbe:	e3 5a       	subi	r30, 0xA3	; 163
    3dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	a0 e2       	ldi	r26, 0x20	; 32
    3dc8:	b1 e4       	ldi	r27, 0x41	; 65
    3dca:	80 83       	st	Z, r24
    3dcc:	91 83       	std	Z+1, r25	; 0x01
    3dce:	a2 83       	std	Z+2, r26	; 0x02
    3dd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3dd2:	8e 01       	movw	r16, r28
    3dd4:	07 5a       	subi	r16, 0xA7	; 167
    3dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd8:	fe 01       	movw	r30, r28
    3dda:	e3 5a       	subi	r30, 0xA3	; 163
    3ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dde:	60 81       	ld	r22, Z
    3de0:	71 81       	ldd	r23, Z+1	; 0x01
    3de2:	82 81       	ldd	r24, Z+2	; 0x02
    3de4:	93 81       	ldd	r25, Z+3	; 0x03
    3de6:	2b ea       	ldi	r18, 0xAB	; 171
    3de8:	3a ea       	ldi	r19, 0xAA	; 170
    3dea:	4a ea       	ldi	r20, 0xAA	; 170
    3dec:	50 e4       	ldi	r21, 0x40	; 64
    3dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df2:	dc 01       	movw	r26, r24
    3df4:	cb 01       	movw	r24, r22
    3df6:	f8 01       	movw	r30, r16
    3df8:	80 83       	st	Z, r24
    3dfa:	91 83       	std	Z+1, r25	; 0x01
    3dfc:	a2 83       	std	Z+2, r26	; 0x02
    3dfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e00:	fe 01       	movw	r30, r28
    3e02:	e7 5a       	subi	r30, 0xA7	; 167
    3e04:	ff 4f       	sbci	r31, 0xFF	; 255
    3e06:	60 81       	ld	r22, Z
    3e08:	71 81       	ldd	r23, Z+1	; 0x01
    3e0a:	82 81       	ldd	r24, Z+2	; 0x02
    3e0c:	93 81       	ldd	r25, Z+3	; 0x03
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	40 e8       	ldi	r20, 0x80	; 128
    3e14:	5f e3       	ldi	r21, 0x3F	; 63
    3e16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e1a:	88 23       	and	r24, r24
    3e1c:	34 f4       	brge	.+12     	; 0x3e2a <lcd_proteus_data+0x17a>
		__ticks = 1;
    3e1e:	fe 01       	movw	r30, r28
    3e20:	e8 5a       	subi	r30, 0xA8	; 168
    3e22:	ff 4f       	sbci	r31, 0xFF	; 255
    3e24:	81 e0       	ldi	r24, 0x01	; 1
    3e26:	80 83       	st	Z, r24
    3e28:	e0 c0       	rjmp	.+448    	; 0x3fea <lcd_proteus_data+0x33a>
	else if (__tmp > 255)
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	e7 5a       	subi	r30, 0xA7	; 167
    3e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e30:	60 81       	ld	r22, Z
    3e32:	71 81       	ldd	r23, Z+1	; 0x01
    3e34:	82 81       	ldd	r24, Z+2	; 0x02
    3e36:	93 81       	ldd	r25, Z+3	; 0x03
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	4f e7       	ldi	r20, 0x7F	; 127
    3e3e:	53 e4       	ldi	r21, 0x43	; 67
    3e40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e44:	18 16       	cp	r1, r24
    3e46:	0c f0       	brlt	.+2      	; 0x3e4a <lcd_proteus_data+0x19a>
    3e48:	c0 c0       	rjmp	.+384    	; 0x3fca <lcd_proteus_data+0x31a>
	{
		_delay_ms(__us / 1000.0);
    3e4a:	fe 01       	movw	r30, r28
    3e4c:	e3 5a       	subi	r30, 0xA3	; 163
    3e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e50:	60 81       	ld	r22, Z
    3e52:	71 81       	ldd	r23, Z+1	; 0x01
    3e54:	82 81       	ldd	r24, Z+2	; 0x02
    3e56:	93 81       	ldd	r25, Z+3	; 0x03
    3e58:	20 e0       	ldi	r18, 0x00	; 0
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	4a e7       	ldi	r20, 0x7A	; 122
    3e5e:	54 e4       	ldi	r21, 0x44	; 68
    3e60:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	fe 01       	movw	r30, r28
    3e6a:	ec 5a       	subi	r30, 0xAC	; 172
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	80 83       	st	Z, r24
    3e70:	91 83       	std	Z+1, r25	; 0x01
    3e72:	a2 83       	std	Z+2, r26	; 0x02
    3e74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e76:	8e 01       	movw	r16, r28
    3e78:	00 5b       	subi	r16, 0xB0	; 176
    3e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	ec 5a       	subi	r30, 0xAC	; 172
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	60 81       	ld	r22, Z
    3e84:	71 81       	ldd	r23, Z+1	; 0x01
    3e86:	82 81       	ldd	r24, Z+2	; 0x02
    3e88:	93 81       	ldd	r25, Z+3	; 0x03
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	4a e7       	ldi	r20, 0x7A	; 122
    3e90:	55 e4       	ldi	r21, 0x45	; 69
    3e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e96:	dc 01       	movw	r26, r24
    3e98:	cb 01       	movw	r24, r22
    3e9a:	f8 01       	movw	r30, r16
    3e9c:	80 83       	st	Z, r24
    3e9e:	91 83       	std	Z+1, r25	; 0x01
    3ea0:	a2 83       	std	Z+2, r26	; 0x02
    3ea2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ea4:	fe 01       	movw	r30, r28
    3ea6:	e0 5b       	subi	r30, 0xB0	; 176
    3ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eaa:	60 81       	ld	r22, Z
    3eac:	71 81       	ldd	r23, Z+1	; 0x01
    3eae:	82 81       	ldd	r24, Z+2	; 0x02
    3eb0:	93 81       	ldd	r25, Z+3	; 0x03
    3eb2:	20 e0       	ldi	r18, 0x00	; 0
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	40 e8       	ldi	r20, 0x80	; 128
    3eb8:	5f e3       	ldi	r21, 0x3F	; 63
    3eba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ebe:	88 23       	and	r24, r24
    3ec0:	44 f4       	brge	.+16     	; 0x3ed2 <lcd_proteus_data+0x222>
		__ticks = 1;
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	e2 5b       	subi	r30, 0xB2	; 178
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	91 83       	std	Z+1, r25	; 0x01
    3ece:	80 83       	st	Z, r24
    3ed0:	64 c0       	rjmp	.+200    	; 0x3f9a <lcd_proteus_data+0x2ea>
	else if (__tmp > 65535)
    3ed2:	fe 01       	movw	r30, r28
    3ed4:	e0 5b       	subi	r30, 0xB0	; 176
    3ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed8:	60 81       	ld	r22, Z
    3eda:	71 81       	ldd	r23, Z+1	; 0x01
    3edc:	82 81       	ldd	r24, Z+2	; 0x02
    3ede:	93 81       	ldd	r25, Z+3	; 0x03
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	3f ef       	ldi	r19, 0xFF	; 255
    3ee4:	4f e7       	ldi	r20, 0x7F	; 127
    3ee6:	57 e4       	ldi	r21, 0x47	; 71
    3ee8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eec:	18 16       	cp	r1, r24
    3eee:	0c f0       	brlt	.+2      	; 0x3ef2 <lcd_proteus_data+0x242>
    3ef0:	43 c0       	rjmp	.+134    	; 0x3f78 <lcd_proteus_data+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	ec 5a       	subi	r30, 0xAC	; 172
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	60 81       	ld	r22, Z
    3efa:	71 81       	ldd	r23, Z+1	; 0x01
    3efc:	82 81       	ldd	r24, Z+2	; 0x02
    3efe:	93 81       	ldd	r25, Z+3	; 0x03
    3f00:	20 e0       	ldi	r18, 0x00	; 0
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	40 e2       	ldi	r20, 0x20	; 32
    3f06:	51 e4       	ldi	r21, 0x41	; 65
    3f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	8e 01       	movw	r16, r28
    3f12:	02 5b       	subi	r16, 0xB2	; 178
    3f14:	1f 4f       	sbci	r17, 0xFF	; 255
    3f16:	bc 01       	movw	r22, r24
    3f18:	cd 01       	movw	r24, r26
    3f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f1e:	dc 01       	movw	r26, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	f8 01       	movw	r30, r16
    3f24:	91 83       	std	Z+1, r25	; 0x01
    3f26:	80 83       	st	Z, r24
    3f28:	1f c0       	rjmp	.+62     	; 0x3f68 <lcd_proteus_data+0x2b8>
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	e4 5b       	subi	r30, 0xB4	; 180
    3f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f30:	80 e9       	ldi	r24, 0x90	; 144
    3f32:	91 e0       	ldi	r25, 0x01	; 1
    3f34:	91 83       	std	Z+1, r25	; 0x01
    3f36:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e4 5b       	subi	r30, 0xB4	; 180
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	80 81       	ld	r24, Z
    3f40:	91 81       	ldd	r25, Z+1	; 0x01
    3f42:	01 97       	sbiw	r24, 0x01	; 1
    3f44:	f1 f7       	brne	.-4      	; 0x3f42 <lcd_proteus_data+0x292>
    3f46:	fe 01       	movw	r30, r28
    3f48:	e4 5b       	subi	r30, 0xB4	; 180
    3f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4c:	91 83       	std	Z+1, r25	; 0x01
    3f4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f50:	de 01       	movw	r26, r28
    3f52:	a2 5b       	subi	r26, 0xB2	; 178
    3f54:	bf 4f       	sbci	r27, 0xFF	; 255
    3f56:	fe 01       	movw	r30, r28
    3f58:	e2 5b       	subi	r30, 0xB2	; 178
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	80 81       	ld	r24, Z
    3f5e:	91 81       	ldd	r25, Z+1	; 0x01
    3f60:	01 97       	sbiw	r24, 0x01	; 1
    3f62:	11 96       	adiw	r26, 0x01	; 1
    3f64:	9c 93       	st	X, r25
    3f66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f68:	fe 01       	movw	r30, r28
    3f6a:	e2 5b       	subi	r30, 0xB2	; 178
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	80 81       	ld	r24, Z
    3f70:	91 81       	ldd	r25, Z+1	; 0x01
    3f72:	00 97       	sbiw	r24, 0x00	; 0
    3f74:	d1 f6       	brne	.-76     	; 0x3f2a <lcd_proteus_data+0x27a>
    3f76:	4b c0       	rjmp	.+150    	; 0x400e <lcd_proteus_data+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f78:	8e 01       	movw	r16, r28
    3f7a:	02 5b       	subi	r16, 0xB2	; 178
    3f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f7e:	fe 01       	movw	r30, r28
    3f80:	e0 5b       	subi	r30, 0xB0	; 176
    3f82:	ff 4f       	sbci	r31, 0xFF	; 255
    3f84:	60 81       	ld	r22, Z
    3f86:	71 81       	ldd	r23, Z+1	; 0x01
    3f88:	82 81       	ldd	r24, Z+2	; 0x02
    3f8a:	93 81       	ldd	r25, Z+3	; 0x03
    3f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f90:	dc 01       	movw	r26, r24
    3f92:	cb 01       	movw	r24, r22
    3f94:	f8 01       	movw	r30, r16
    3f96:	91 83       	std	Z+1, r25	; 0x01
    3f98:	80 83       	st	Z, r24
    3f9a:	de 01       	movw	r26, r28
    3f9c:	a6 5b       	subi	r26, 0xB6	; 182
    3f9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3fa0:	fe 01       	movw	r30, r28
    3fa2:	e2 5b       	subi	r30, 0xB2	; 178
    3fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa6:	80 81       	ld	r24, Z
    3fa8:	91 81       	ldd	r25, Z+1	; 0x01
    3faa:	11 96       	adiw	r26, 0x01	; 1
    3fac:	9c 93       	st	X, r25
    3fae:	8e 93       	st	-X, r24
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	e6 5b       	subi	r30, 0xB6	; 182
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	80 81       	ld	r24, Z
    3fb8:	91 81       	ldd	r25, Z+1	; 0x01
    3fba:	01 97       	sbiw	r24, 0x01	; 1
    3fbc:	f1 f7       	brne	.-4      	; 0x3fba <lcd_proteus_data+0x30a>
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	e6 5b       	subi	r30, 0xB6	; 182
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	91 83       	std	Z+1, r25	; 0x01
    3fc6:	80 83       	st	Z, r24
    3fc8:	22 c0       	rjmp	.+68     	; 0x400e <lcd_proteus_data+0x35e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3fca:	8e 01       	movw	r16, r28
    3fcc:	08 5a       	subi	r16, 0xA8	; 168
    3fce:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	e7 5a       	subi	r30, 0xA7	; 167
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	60 81       	ld	r22, Z
    3fd8:	71 81       	ldd	r23, Z+1	; 0x01
    3fda:	82 81       	ldd	r24, Z+2	; 0x02
    3fdc:	93 81       	ldd	r25, Z+3	; 0x03
    3fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	f8 01       	movw	r30, r16
    3fe8:	80 83       	st	Z, r24
    3fea:	de 01       	movw	r26, r28
    3fec:	a7 5b       	subi	r26, 0xB7	; 183
    3fee:	bf 4f       	sbci	r27, 0xFF	; 255
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	e8 5a       	subi	r30, 0xA8	; 168
    3ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff6:	80 81       	ld	r24, Z
    3ff8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ffa:	fe 01       	movw	r30, r28
    3ffc:	e7 5b       	subi	r30, 0xB7	; 183
    3ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    4000:	80 81       	ld	r24, Z
    4002:	8a 95       	dec	r24
    4004:	f1 f7       	brne	.-4      	; 0x4002 <lcd_proteus_data+0x352>
    4006:	fe 01       	movw	r30, r28
    4008:	e7 5b       	subi	r30, 0xB7	; 183
    400a:	ff 4f       	sbci	r31, 0xFF	; 255
    400c:	80 83       	st	Z, r24
	_delay_us(10);
	CLEAR_BIT(PORTD,3);
    400e:	a2 e3       	ldi	r26, 0x32	; 50
    4010:	b0 e0       	ldi	r27, 0x00	; 0
    4012:	e2 e3       	ldi	r30, 0x32	; 50
    4014:	f0 e0       	ldi	r31, 0x00	; 0
    4016:	80 81       	ld	r24, Z
    4018:	87 7f       	andi	r24, 0xF7	; 247
    401a:	8c 93       	st	X, r24
    401c:	fe 01       	movw	r30, r28
    401e:	eb 5b       	subi	r30, 0xBB	; 187
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	a8 e4       	ldi	r26, 0x48	; 72
    4028:	b3 e4       	ldi	r27, 0x43	; 67
    402a:	80 83       	st	Z, r24
    402c:	91 83       	std	Z+1, r25	; 0x01
    402e:	a2 83       	std	Z+2, r26	; 0x02
    4030:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4032:	8e 01       	movw	r16, r28
    4034:	0f 5b       	subi	r16, 0xBF	; 191
    4036:	1f 4f       	sbci	r17, 0xFF	; 255
    4038:	fe 01       	movw	r30, r28
    403a:	eb 5b       	subi	r30, 0xBB	; 187
    403c:	ff 4f       	sbci	r31, 0xFF	; 255
    403e:	60 81       	ld	r22, Z
    4040:	71 81       	ldd	r23, Z+1	; 0x01
    4042:	82 81       	ldd	r24, Z+2	; 0x02
    4044:	93 81       	ldd	r25, Z+3	; 0x03
    4046:	2b ea       	ldi	r18, 0xAB	; 171
    4048:	3a ea       	ldi	r19, 0xAA	; 170
    404a:	4a ea       	ldi	r20, 0xAA	; 170
    404c:	50 e4       	ldi	r21, 0x40	; 64
    404e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4052:	dc 01       	movw	r26, r24
    4054:	cb 01       	movw	r24, r22
    4056:	f8 01       	movw	r30, r16
    4058:	80 83       	st	Z, r24
    405a:	91 83       	std	Z+1, r25	; 0x01
    405c:	a2 83       	std	Z+2, r26	; 0x02
    405e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4060:	fe 01       	movw	r30, r28
    4062:	ef 5b       	subi	r30, 0xBF	; 191
    4064:	ff 4f       	sbci	r31, 0xFF	; 255
    4066:	60 81       	ld	r22, Z
    4068:	71 81       	ldd	r23, Z+1	; 0x01
    406a:	82 81       	ldd	r24, Z+2	; 0x02
    406c:	93 81       	ldd	r25, Z+3	; 0x03
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	40 e8       	ldi	r20, 0x80	; 128
    4074:	5f e3       	ldi	r21, 0x3F	; 63
    4076:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    407a:	88 23       	and	r24, r24
    407c:	34 f4       	brge	.+12     	; 0x408a <lcd_proteus_data+0x3da>
		__ticks = 1;
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	fe 01       	movw	r30, r28
    4082:	e0 5c       	subi	r30, 0xC0	; 192
    4084:	ff 4f       	sbci	r31, 0xFF	; 255
    4086:	80 83       	st	Z, r24
    4088:	9d c0       	rjmp	.+314    	; 0x41c4 <lcd_proteus_data+0x514>
	else if (__tmp > 255)
    408a:	fe 01       	movw	r30, r28
    408c:	ef 5b       	subi	r30, 0xBF	; 191
    408e:	ff 4f       	sbci	r31, 0xFF	; 255
    4090:	60 81       	ld	r22, Z
    4092:	71 81       	ldd	r23, Z+1	; 0x01
    4094:	82 81       	ldd	r24, Z+2	; 0x02
    4096:	93 81       	ldd	r25, Z+3	; 0x03
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	4f e7       	ldi	r20, 0x7F	; 127
    409e:	53 e4       	ldi	r21, 0x43	; 67
    40a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40a4:	18 16       	cp	r1, r24
    40a6:	0c f0       	brlt	.+2      	; 0x40aa <lcd_proteus_data+0x3fa>
    40a8:	7e c0       	rjmp	.+252    	; 0x41a6 <lcd_proteus_data+0x4f6>
	{
		_delay_ms(__us / 1000.0);
    40aa:	fe 01       	movw	r30, r28
    40ac:	eb 5b       	subi	r30, 0xBB	; 187
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	60 81       	ld	r22, Z
    40b2:	71 81       	ldd	r23, Z+1	; 0x01
    40b4:	82 81       	ldd	r24, Z+2	; 0x02
    40b6:	93 81       	ldd	r25, Z+3	; 0x03
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	4a e7       	ldi	r20, 0x7A	; 122
    40be:	54 e4       	ldi	r21, 0x44	; 68
    40c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	8c af       	std	Y+60, r24	; 0x3c
    40ca:	9d af       	std	Y+61, r25	; 0x3d
    40cc:	ae af       	std	Y+62, r26	; 0x3e
    40ce:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40d0:	6c ad       	ldd	r22, Y+60	; 0x3c
    40d2:	7d ad       	ldd	r23, Y+61	; 0x3d
    40d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    40d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    40d8:	20 e0       	ldi	r18, 0x00	; 0
    40da:	30 e0       	ldi	r19, 0x00	; 0
    40dc:	4a e7       	ldi	r20, 0x7A	; 122
    40de:	55 e4       	ldi	r21, 0x45	; 69
    40e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e4:	dc 01       	movw	r26, r24
    40e6:	cb 01       	movw	r24, r22
    40e8:	88 af       	std	Y+56, r24	; 0x38
    40ea:	99 af       	std	Y+57, r25	; 0x39
    40ec:	aa af       	std	Y+58, r26	; 0x3a
    40ee:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    40f0:	68 ad       	ldd	r22, Y+56	; 0x38
    40f2:	79 ad       	ldd	r23, Y+57	; 0x39
    40f4:	8a ad       	ldd	r24, Y+58	; 0x3a
    40f6:	9b ad       	ldd	r25, Y+59	; 0x3b
    40f8:	20 e0       	ldi	r18, 0x00	; 0
    40fa:	30 e0       	ldi	r19, 0x00	; 0
    40fc:	40 e8       	ldi	r20, 0x80	; 128
    40fe:	5f e3       	ldi	r21, 0x3F	; 63
    4100:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4104:	88 23       	and	r24, r24
    4106:	2c f4       	brge	.+10     	; 0x4112 <lcd_proteus_data+0x462>
		__ticks = 1;
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	9f ab       	std	Y+55, r25	; 0x37
    410e:	8e ab       	std	Y+54, r24	; 0x36
    4110:	3f c0       	rjmp	.+126    	; 0x4190 <lcd_proteus_data+0x4e0>
	else if (__tmp > 65535)
    4112:	68 ad       	ldd	r22, Y+56	; 0x38
    4114:	79 ad       	ldd	r23, Y+57	; 0x39
    4116:	8a ad       	ldd	r24, Y+58	; 0x3a
    4118:	9b ad       	ldd	r25, Y+59	; 0x3b
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	3f ef       	ldi	r19, 0xFF	; 255
    411e:	4f e7       	ldi	r20, 0x7F	; 127
    4120:	57 e4       	ldi	r21, 0x47	; 71
    4122:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4126:	18 16       	cp	r1, r24
    4128:	4c f5       	brge	.+82     	; 0x417c <lcd_proteus_data+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    412a:	6c ad       	ldd	r22, Y+60	; 0x3c
    412c:	7d ad       	ldd	r23, Y+61	; 0x3d
    412e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4130:	9f ad       	ldd	r25, Y+63	; 0x3f
    4132:	20 e0       	ldi	r18, 0x00	; 0
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	40 e2       	ldi	r20, 0x20	; 32
    4138:	51 e4       	ldi	r21, 0x41	; 65
    413a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    413e:	dc 01       	movw	r26, r24
    4140:	cb 01       	movw	r24, r22
    4142:	bc 01       	movw	r22, r24
    4144:	cd 01       	movw	r24, r26
    4146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    414a:	dc 01       	movw	r26, r24
    414c:	cb 01       	movw	r24, r22
    414e:	9f ab       	std	Y+55, r25	; 0x37
    4150:	8e ab       	std	Y+54, r24	; 0x36
    4152:	0f c0       	rjmp	.+30     	; 0x4172 <lcd_proteus_data+0x4c2>
    4154:	80 e9       	ldi	r24, 0x90	; 144
    4156:	91 e0       	ldi	r25, 0x01	; 1
    4158:	9d ab       	std	Y+53, r25	; 0x35
    415a:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    415c:	8c a9       	ldd	r24, Y+52	; 0x34
    415e:	9d a9       	ldd	r25, Y+53	; 0x35
    4160:	01 97       	sbiw	r24, 0x01	; 1
    4162:	f1 f7       	brne	.-4      	; 0x4160 <lcd_proteus_data+0x4b0>
    4164:	9d ab       	std	Y+53, r25	; 0x35
    4166:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4168:	8e a9       	ldd	r24, Y+54	; 0x36
    416a:	9f a9       	ldd	r25, Y+55	; 0x37
    416c:	01 97       	sbiw	r24, 0x01	; 1
    416e:	9f ab       	std	Y+55, r25	; 0x37
    4170:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4172:	8e a9       	ldd	r24, Y+54	; 0x36
    4174:	9f a9       	ldd	r25, Y+55	; 0x37
    4176:	00 97       	sbiw	r24, 0x00	; 0
    4178:	69 f7       	brne	.-38     	; 0x4154 <lcd_proteus_data+0x4a4>
    417a:	2d c0       	rjmp	.+90     	; 0x41d6 <lcd_proteus_data+0x526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    417c:	68 ad       	ldd	r22, Y+56	; 0x38
    417e:	79 ad       	ldd	r23, Y+57	; 0x39
    4180:	8a ad       	ldd	r24, Y+58	; 0x3a
    4182:	9b ad       	ldd	r25, Y+59	; 0x3b
    4184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22
    418c:	9f ab       	std	Y+55, r25	; 0x37
    418e:	8e ab       	std	Y+54, r24	; 0x36
    4190:	8e a9       	ldd	r24, Y+54	; 0x36
    4192:	9f a9       	ldd	r25, Y+55	; 0x37
    4194:	9b ab       	std	Y+51, r25	; 0x33
    4196:	8a ab       	std	Y+50, r24	; 0x32
    4198:	8a a9       	ldd	r24, Y+50	; 0x32
    419a:	9b a9       	ldd	r25, Y+51	; 0x33
    419c:	01 97       	sbiw	r24, 0x01	; 1
    419e:	f1 f7       	brne	.-4      	; 0x419c <lcd_proteus_data+0x4ec>
    41a0:	9b ab       	std	Y+51, r25	; 0x33
    41a2:	8a ab       	std	Y+50, r24	; 0x32
    41a4:	18 c0       	rjmp	.+48     	; 0x41d6 <lcd_proteus_data+0x526>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    41a6:	fe 01       	movw	r30, r28
    41a8:	ef 5b       	subi	r30, 0xBF	; 191
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	60 81       	ld	r22, Z
    41ae:	71 81       	ldd	r23, Z+1	; 0x01
    41b0:	82 81       	ldd	r24, Z+2	; 0x02
    41b2:	93 81       	ldd	r25, Z+3	; 0x03
    41b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	fe 01       	movw	r30, r28
    41be:	e0 5c       	subi	r30, 0xC0	; 192
    41c0:	ff 4f       	sbci	r31, 0xFF	; 255
    41c2:	80 83       	st	Z, r24
    41c4:	fe 01       	movw	r30, r28
    41c6:	e0 5c       	subi	r30, 0xC0	; 192
    41c8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ca:	80 81       	ld	r24, Z
    41cc:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    41ce:	89 a9       	ldd	r24, Y+49	; 0x31
    41d0:	8a 95       	dec	r24
    41d2:	f1 f7       	brne	.-4      	; 0x41d0 <lcd_proteus_data+0x520>
    41d4:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);
	if(GET_BIT(data, 0)) { SET_BIT(PORTD,4); }else{ CLEAR_BIT(PORTD,4);}
    41d6:	fe 01       	movw	r30, r28
    41d8:	ef 59       	subi	r30, 0x9F	; 159
    41da:	ff 4f       	sbci	r31, 0xFF	; 255
    41dc:	80 81       	ld	r24, Z
    41de:	88 2f       	mov	r24, r24
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	81 70       	andi	r24, 0x01	; 1
    41e4:	90 70       	andi	r25, 0x00	; 0
    41e6:	88 23       	and	r24, r24
    41e8:	41 f0       	breq	.+16     	; 0x41fa <lcd_proteus_data+0x54a>
    41ea:	a2 e3       	ldi	r26, 0x32	; 50
    41ec:	b0 e0       	ldi	r27, 0x00	; 0
    41ee:	e2 e3       	ldi	r30, 0x32	; 50
    41f0:	f0 e0       	ldi	r31, 0x00	; 0
    41f2:	80 81       	ld	r24, Z
    41f4:	80 61       	ori	r24, 0x10	; 16
    41f6:	8c 93       	st	X, r24
    41f8:	07 c0       	rjmp	.+14     	; 0x4208 <lcd_proteus_data+0x558>
    41fa:	a2 e3       	ldi	r26, 0x32	; 50
    41fc:	b0 e0       	ldi	r27, 0x00	; 0
    41fe:	e2 e3       	ldi	r30, 0x32	; 50
    4200:	f0 e0       	ldi	r31, 0x00	; 0
    4202:	80 81       	ld	r24, Z
    4204:	8f 7e       	andi	r24, 0xEF	; 239
    4206:	8c 93       	st	X, r24
	if(GET_BIT(data, 1)) { SET_BIT(PORTD,5) ;}else{ CLEAR_BIT(PORTD,5);}
    4208:	fe 01       	movw	r30, r28
    420a:	ef 59       	subi	r30, 0x9F	; 159
    420c:	ff 4f       	sbci	r31, 0xFF	; 255
    420e:	80 81       	ld	r24, Z
    4210:	88 2f       	mov	r24, r24
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	82 70       	andi	r24, 0x02	; 2
    4216:	90 70       	andi	r25, 0x00	; 0
    4218:	00 97       	sbiw	r24, 0x00	; 0
    421a:	41 f0       	breq	.+16     	; 0x422c <lcd_proteus_data+0x57c>
    421c:	a2 e3       	ldi	r26, 0x32	; 50
    421e:	b0 e0       	ldi	r27, 0x00	; 0
    4220:	e2 e3       	ldi	r30, 0x32	; 50
    4222:	f0 e0       	ldi	r31, 0x00	; 0
    4224:	80 81       	ld	r24, Z
    4226:	80 62       	ori	r24, 0x20	; 32
    4228:	8c 93       	st	X, r24
    422a:	07 c0       	rjmp	.+14     	; 0x423a <lcd_proteus_data+0x58a>
    422c:	a2 e3       	ldi	r26, 0x32	; 50
    422e:	b0 e0       	ldi	r27, 0x00	; 0
    4230:	e2 e3       	ldi	r30, 0x32	; 50
    4232:	f0 e0       	ldi	r31, 0x00	; 0
    4234:	80 81       	ld	r24, Z
    4236:	8f 7d       	andi	r24, 0xDF	; 223
    4238:	8c 93       	st	X, r24
	if(GET_BIT(data, 2)) { SET_BIT(PORTD,6) ;}else{ CLEAR_BIT(PORTD,6);}
    423a:	fe 01       	movw	r30, r28
    423c:	ef 59       	subi	r30, 0x9F	; 159
    423e:	ff 4f       	sbci	r31, 0xFF	; 255
    4240:	80 81       	ld	r24, Z
    4242:	88 2f       	mov	r24, r24
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	84 70       	andi	r24, 0x04	; 4
    4248:	90 70       	andi	r25, 0x00	; 0
    424a:	00 97       	sbiw	r24, 0x00	; 0
    424c:	41 f0       	breq	.+16     	; 0x425e <lcd_proteus_data+0x5ae>
    424e:	a2 e3       	ldi	r26, 0x32	; 50
    4250:	b0 e0       	ldi	r27, 0x00	; 0
    4252:	e2 e3       	ldi	r30, 0x32	; 50
    4254:	f0 e0       	ldi	r31, 0x00	; 0
    4256:	80 81       	ld	r24, Z
    4258:	80 64       	ori	r24, 0x40	; 64
    425a:	8c 93       	st	X, r24
    425c:	07 c0       	rjmp	.+14     	; 0x426c <lcd_proteus_data+0x5bc>
    425e:	a2 e3       	ldi	r26, 0x32	; 50
    4260:	b0 e0       	ldi	r27, 0x00	; 0
    4262:	e2 e3       	ldi	r30, 0x32	; 50
    4264:	f0 e0       	ldi	r31, 0x00	; 0
    4266:	80 81       	ld	r24, Z
    4268:	8f 7b       	andi	r24, 0xBF	; 191
    426a:	8c 93       	st	X, r24
	if(GET_BIT(data, 3)) { SET_BIT(PORTD,7) ;}else{ CLEAR_BIT(PORTD,7);}
    426c:	fe 01       	movw	r30, r28
    426e:	ef 59       	subi	r30, 0x9F	; 159
    4270:	ff 4f       	sbci	r31, 0xFF	; 255
    4272:	80 81       	ld	r24, Z
    4274:	88 2f       	mov	r24, r24
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	88 70       	andi	r24, 0x08	; 8
    427a:	90 70       	andi	r25, 0x00	; 0
    427c:	00 97       	sbiw	r24, 0x00	; 0
    427e:	41 f0       	breq	.+16     	; 0x4290 <lcd_proteus_data+0x5e0>
    4280:	a2 e3       	ldi	r26, 0x32	; 50
    4282:	b0 e0       	ldi	r27, 0x00	; 0
    4284:	e2 e3       	ldi	r30, 0x32	; 50
    4286:	f0 e0       	ldi	r31, 0x00	; 0
    4288:	80 81       	ld	r24, Z
    428a:	80 68       	ori	r24, 0x80	; 128
    428c:	8c 93       	st	X, r24
    428e:	07 c0       	rjmp	.+14     	; 0x429e <lcd_proteus_data+0x5ee>
    4290:	a2 e3       	ldi	r26, 0x32	; 50
    4292:	b0 e0       	ldi	r27, 0x00	; 0
    4294:	e2 e3       	ldi	r30, 0x32	; 50
    4296:	f0 e0       	ldi	r31, 0x00	; 0
    4298:	80 81       	ld	r24, Z
    429a:	8f 77       	andi	r24, 0x7F	; 127
    429c:	8c 93       	st	X, r24
	SET_BIT(PORTD,3);
    429e:	a2 e3       	ldi	r26, 0x32	; 50
    42a0:	b0 e0       	ldi	r27, 0x00	; 0
    42a2:	e2 e3       	ldi	r30, 0x32	; 50
    42a4:	f0 e0       	ldi	r31, 0x00	; 0
    42a6:	80 81       	ld	r24, Z
    42a8:	88 60       	ori	r24, 0x08	; 8
    42aa:	8c 93       	st	X, r24
    42ac:	80 e0       	ldi	r24, 0x00	; 0
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	a0 e2       	ldi	r26, 0x20	; 32
    42b2:	b1 e4       	ldi	r27, 0x41	; 65
    42b4:	8d a7       	std	Y+45, r24	; 0x2d
    42b6:	9e a7       	std	Y+46, r25	; 0x2e
    42b8:	af a7       	std	Y+47, r26	; 0x2f
    42ba:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    42bc:	6d a5       	ldd	r22, Y+45	; 0x2d
    42be:	7e a5       	ldd	r23, Y+46	; 0x2e
    42c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    42c2:	98 a9       	ldd	r25, Y+48	; 0x30
    42c4:	2b ea       	ldi	r18, 0xAB	; 171
    42c6:	3a ea       	ldi	r19, 0xAA	; 170
    42c8:	4a ea       	ldi	r20, 0xAA	; 170
    42ca:	50 e4       	ldi	r21, 0x40	; 64
    42cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d0:	dc 01       	movw	r26, r24
    42d2:	cb 01       	movw	r24, r22
    42d4:	89 a7       	std	Y+41, r24	; 0x29
    42d6:	9a a7       	std	Y+42, r25	; 0x2a
    42d8:	ab a7       	std	Y+43, r26	; 0x2b
    42da:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    42dc:	69 a5       	ldd	r22, Y+41	; 0x29
    42de:	7a a5       	ldd	r23, Y+42	; 0x2a
    42e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    42e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	40 e8       	ldi	r20, 0x80	; 128
    42ea:	5f e3       	ldi	r21, 0x3F	; 63
    42ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42f0:	88 23       	and	r24, r24
    42f2:	1c f4       	brge	.+6      	; 0x42fa <lcd_proteus_data+0x64a>
		__ticks = 1;
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	88 a7       	std	Y+40, r24	; 0x28
    42f8:	91 c0       	rjmp	.+290    	; 0x441c <lcd_proteus_data+0x76c>
	else if (__tmp > 255)
    42fa:	69 a5       	ldd	r22, Y+41	; 0x29
    42fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    42fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    4300:	9c a5       	ldd	r25, Y+44	; 0x2c
    4302:	20 e0       	ldi	r18, 0x00	; 0
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	4f e7       	ldi	r20, 0x7F	; 127
    4308:	53 e4       	ldi	r21, 0x43	; 67
    430a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    430e:	18 16       	cp	r1, r24
    4310:	0c f0       	brlt	.+2      	; 0x4314 <lcd_proteus_data+0x664>
    4312:	7b c0       	rjmp	.+246    	; 0x440a <lcd_proteus_data+0x75a>
	{
		_delay_ms(__us / 1000.0);
    4314:	6d a5       	ldd	r22, Y+45	; 0x2d
    4316:	7e a5       	ldd	r23, Y+46	; 0x2e
    4318:	8f a5       	ldd	r24, Y+47	; 0x2f
    431a:	98 a9       	ldd	r25, Y+48	; 0x30
    431c:	20 e0       	ldi	r18, 0x00	; 0
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	4a e7       	ldi	r20, 0x7A	; 122
    4322:	54 e4       	ldi	r21, 0x44	; 68
    4324:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4328:	dc 01       	movw	r26, r24
    432a:	cb 01       	movw	r24, r22
    432c:	8c a3       	std	Y+36, r24	; 0x24
    432e:	9d a3       	std	Y+37, r25	; 0x25
    4330:	ae a3       	std	Y+38, r26	; 0x26
    4332:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4334:	6c a1       	ldd	r22, Y+36	; 0x24
    4336:	7d a1       	ldd	r23, Y+37	; 0x25
    4338:	8e a1       	ldd	r24, Y+38	; 0x26
    433a:	9f a1       	ldd	r25, Y+39	; 0x27
    433c:	20 e0       	ldi	r18, 0x00	; 0
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	4a e7       	ldi	r20, 0x7A	; 122
    4342:	55 e4       	ldi	r21, 0x45	; 69
    4344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4348:	dc 01       	movw	r26, r24
    434a:	cb 01       	movw	r24, r22
    434c:	88 a3       	std	Y+32, r24	; 0x20
    434e:	99 a3       	std	Y+33, r25	; 0x21
    4350:	aa a3       	std	Y+34, r26	; 0x22
    4352:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4354:	68 a1       	ldd	r22, Y+32	; 0x20
    4356:	79 a1       	ldd	r23, Y+33	; 0x21
    4358:	8a a1       	ldd	r24, Y+34	; 0x22
    435a:	9b a1       	ldd	r25, Y+35	; 0x23
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	40 e8       	ldi	r20, 0x80	; 128
    4362:	5f e3       	ldi	r21, 0x3F	; 63
    4364:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4368:	88 23       	and	r24, r24
    436a:	2c f4       	brge	.+10     	; 0x4376 <lcd_proteus_data+0x6c6>
		__ticks = 1;
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	9f 8f       	std	Y+31, r25	; 0x1f
    4372:	8e 8f       	std	Y+30, r24	; 0x1e
    4374:	3f c0       	rjmp	.+126    	; 0x43f4 <lcd_proteus_data+0x744>
	else if (__tmp > 65535)
    4376:	68 a1       	ldd	r22, Y+32	; 0x20
    4378:	79 a1       	ldd	r23, Y+33	; 0x21
    437a:	8a a1       	ldd	r24, Y+34	; 0x22
    437c:	9b a1       	ldd	r25, Y+35	; 0x23
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	3f ef       	ldi	r19, 0xFF	; 255
    4382:	4f e7       	ldi	r20, 0x7F	; 127
    4384:	57 e4       	ldi	r21, 0x47	; 71
    4386:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    438a:	18 16       	cp	r1, r24
    438c:	4c f5       	brge	.+82     	; 0x43e0 <lcd_proteus_data+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    438e:	6c a1       	ldd	r22, Y+36	; 0x24
    4390:	7d a1       	ldd	r23, Y+37	; 0x25
    4392:	8e a1       	ldd	r24, Y+38	; 0x26
    4394:	9f a1       	ldd	r25, Y+39	; 0x27
    4396:	20 e0       	ldi	r18, 0x00	; 0
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	40 e2       	ldi	r20, 0x20	; 32
    439c:	51 e4       	ldi	r21, 0x41	; 65
    439e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a2:	dc 01       	movw	r26, r24
    43a4:	cb 01       	movw	r24, r22
    43a6:	bc 01       	movw	r22, r24
    43a8:	cd 01       	movw	r24, r26
    43aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	9f 8f       	std	Y+31, r25	; 0x1f
    43b4:	8e 8f       	std	Y+30, r24	; 0x1e
    43b6:	0f c0       	rjmp	.+30     	; 0x43d6 <lcd_proteus_data+0x726>
    43b8:	80 e9       	ldi	r24, 0x90	; 144
    43ba:	91 e0       	ldi	r25, 0x01	; 1
    43bc:	9d 8f       	std	Y+29, r25	; 0x1d
    43be:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    43c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    43c2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    43c4:	01 97       	sbiw	r24, 0x01	; 1
    43c6:	f1 f7       	brne	.-4      	; 0x43c4 <lcd_proteus_data+0x714>
    43c8:	9d 8f       	std	Y+29, r25	; 0x1d
    43ca:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43d0:	01 97       	sbiw	r24, 0x01	; 1
    43d2:	9f 8f       	std	Y+31, r25	; 0x1f
    43d4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43da:	00 97       	sbiw	r24, 0x00	; 0
    43dc:	69 f7       	brne	.-38     	; 0x43b8 <lcd_proteus_data+0x708>
    43de:	24 c0       	rjmp	.+72     	; 0x4428 <lcd_proteus_data+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e0:	68 a1       	ldd	r22, Y+32	; 0x20
    43e2:	79 a1       	ldd	r23, Y+33	; 0x21
    43e4:	8a a1       	ldd	r24, Y+34	; 0x22
    43e6:	9b a1       	ldd	r25, Y+35	; 0x23
    43e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	9f 8f       	std	Y+31, r25	; 0x1f
    43f2:	8e 8f       	std	Y+30, r24	; 0x1e
    43f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43f8:	9b 8f       	std	Y+27, r25	; 0x1b
    43fa:	8a 8f       	std	Y+26, r24	; 0x1a
    43fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    43fe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4400:	01 97       	sbiw	r24, 0x01	; 1
    4402:	f1 f7       	brne	.-4      	; 0x4400 <lcd_proteus_data+0x750>
    4404:	9b 8f       	std	Y+27, r25	; 0x1b
    4406:	8a 8f       	std	Y+26, r24	; 0x1a
    4408:	0f c0       	rjmp	.+30     	; 0x4428 <lcd_proteus_data+0x778>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    440a:	69 a5       	ldd	r22, Y+41	; 0x29
    440c:	7a a5       	ldd	r23, Y+42	; 0x2a
    440e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4410:	9c a5       	ldd	r25, Y+44	; 0x2c
    4412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4416:	dc 01       	movw	r26, r24
    4418:	cb 01       	movw	r24, r22
    441a:	88 a7       	std	Y+40, r24	; 0x28
    441c:	88 a5       	ldd	r24, Y+40	; 0x28
    441e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4420:	89 8d       	ldd	r24, Y+25	; 0x19
    4422:	8a 95       	dec	r24
    4424:	f1 f7       	brne	.-4      	; 0x4422 <lcd_proteus_data+0x772>
    4426:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	CLEAR_BIT(PORTD,3);
    4428:	a2 e3       	ldi	r26, 0x32	; 50
    442a:	b0 e0       	ldi	r27, 0x00	; 0
    442c:	e2 e3       	ldi	r30, 0x32	; 50
    442e:	f0 e0       	ldi	r31, 0x00	; 0
    4430:	80 81       	ld	r24, Z
    4432:	87 7f       	andi	r24, 0xF7	; 247
    4434:	8c 93       	st	X, r24
    4436:	80 e0       	ldi	r24, 0x00	; 0
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	a8 e4       	ldi	r26, 0x48	; 72
    443c:	b3 e4       	ldi	r27, 0x43	; 67
    443e:	8d 8b       	std	Y+21, r24	; 0x15
    4440:	9e 8b       	std	Y+22, r25	; 0x16
    4442:	af 8b       	std	Y+23, r26	; 0x17
    4444:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4446:	6d 89       	ldd	r22, Y+21	; 0x15
    4448:	7e 89       	ldd	r23, Y+22	; 0x16
    444a:	8f 89       	ldd	r24, Y+23	; 0x17
    444c:	98 8d       	ldd	r25, Y+24	; 0x18
    444e:	2b ea       	ldi	r18, 0xAB	; 171
    4450:	3a ea       	ldi	r19, 0xAA	; 170
    4452:	4a ea       	ldi	r20, 0xAA	; 170
    4454:	50 e4       	ldi	r21, 0x40	; 64
    4456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    445a:	dc 01       	movw	r26, r24
    445c:	cb 01       	movw	r24, r22
    445e:	89 8b       	std	Y+17, r24	; 0x11
    4460:	9a 8b       	std	Y+18, r25	; 0x12
    4462:	ab 8b       	std	Y+19, r26	; 0x13
    4464:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4466:	69 89       	ldd	r22, Y+17	; 0x11
    4468:	7a 89       	ldd	r23, Y+18	; 0x12
    446a:	8b 89       	ldd	r24, Y+19	; 0x13
    446c:	9c 89       	ldd	r25, Y+20	; 0x14
    446e:	20 e0       	ldi	r18, 0x00	; 0
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	40 e8       	ldi	r20, 0x80	; 128
    4474:	5f e3       	ldi	r21, 0x3F	; 63
    4476:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    447a:	88 23       	and	r24, r24
    447c:	1c f4       	brge	.+6      	; 0x4484 <lcd_proteus_data+0x7d4>
		__ticks = 1;
    447e:	81 e0       	ldi	r24, 0x01	; 1
    4480:	88 8b       	std	Y+16, r24	; 0x10
    4482:	91 c0       	rjmp	.+290    	; 0x45a6 <lcd_proteus_data+0x8f6>
	else if (__tmp > 255)
    4484:	69 89       	ldd	r22, Y+17	; 0x11
    4486:	7a 89       	ldd	r23, Y+18	; 0x12
    4488:	8b 89       	ldd	r24, Y+19	; 0x13
    448a:	9c 89       	ldd	r25, Y+20	; 0x14
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	30 e0       	ldi	r19, 0x00	; 0
    4490:	4f e7       	ldi	r20, 0x7F	; 127
    4492:	53 e4       	ldi	r21, 0x43	; 67
    4494:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4498:	18 16       	cp	r1, r24
    449a:	0c f0       	brlt	.+2      	; 0x449e <lcd_proteus_data+0x7ee>
    449c:	7b c0       	rjmp	.+246    	; 0x4594 <lcd_proteus_data+0x8e4>
	{
		_delay_ms(__us / 1000.0);
    449e:	6d 89       	ldd	r22, Y+21	; 0x15
    44a0:	7e 89       	ldd	r23, Y+22	; 0x16
    44a2:	8f 89       	ldd	r24, Y+23	; 0x17
    44a4:	98 8d       	ldd	r25, Y+24	; 0x18
    44a6:	20 e0       	ldi	r18, 0x00	; 0
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	4a e7       	ldi	r20, 0x7A	; 122
    44ac:	54 e4       	ldi	r21, 0x44	; 68
    44ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    44b2:	dc 01       	movw	r26, r24
    44b4:	cb 01       	movw	r24, r22
    44b6:	8c 87       	std	Y+12, r24	; 0x0c
    44b8:	9d 87       	std	Y+13, r25	; 0x0d
    44ba:	ae 87       	std	Y+14, r26	; 0x0e
    44bc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44be:	6c 85       	ldd	r22, Y+12	; 0x0c
    44c0:	7d 85       	ldd	r23, Y+13	; 0x0d
    44c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    44c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	4a e7       	ldi	r20, 0x7A	; 122
    44cc:	55 e4       	ldi	r21, 0x45	; 69
    44ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d2:	dc 01       	movw	r26, r24
    44d4:	cb 01       	movw	r24, r22
    44d6:	88 87       	std	Y+8, r24	; 0x08
    44d8:	99 87       	std	Y+9, r25	; 0x09
    44da:	aa 87       	std	Y+10, r26	; 0x0a
    44dc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    44de:	68 85       	ldd	r22, Y+8	; 0x08
    44e0:	79 85       	ldd	r23, Y+9	; 0x09
    44e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    44e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	40 e8       	ldi	r20, 0x80	; 128
    44ec:	5f e3       	ldi	r21, 0x3F	; 63
    44ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44f2:	88 23       	and	r24, r24
    44f4:	2c f4       	brge	.+10     	; 0x4500 <lcd_proteus_data+0x850>
		__ticks = 1;
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	9f 83       	std	Y+7, r25	; 0x07
    44fc:	8e 83       	std	Y+6, r24	; 0x06
    44fe:	3f c0       	rjmp	.+126    	; 0x457e <lcd_proteus_data+0x8ce>
	else if (__tmp > 65535)
    4500:	68 85       	ldd	r22, Y+8	; 0x08
    4502:	79 85       	ldd	r23, Y+9	; 0x09
    4504:	8a 85       	ldd	r24, Y+10	; 0x0a
    4506:	9b 85       	ldd	r25, Y+11	; 0x0b
    4508:	20 e0       	ldi	r18, 0x00	; 0
    450a:	3f ef       	ldi	r19, 0xFF	; 255
    450c:	4f e7       	ldi	r20, 0x7F	; 127
    450e:	57 e4       	ldi	r21, 0x47	; 71
    4510:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4514:	18 16       	cp	r1, r24
    4516:	4c f5       	brge	.+82     	; 0x456a <lcd_proteus_data+0x8ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4518:	6c 85       	ldd	r22, Y+12	; 0x0c
    451a:	7d 85       	ldd	r23, Y+13	; 0x0d
    451c:	8e 85       	ldd	r24, Y+14	; 0x0e
    451e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	40 e2       	ldi	r20, 0x20	; 32
    4526:	51 e4       	ldi	r21, 0x41	; 65
    4528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    452c:	dc 01       	movw	r26, r24
    452e:	cb 01       	movw	r24, r22
    4530:	bc 01       	movw	r22, r24
    4532:	cd 01       	movw	r24, r26
    4534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	9f 83       	std	Y+7, r25	; 0x07
    453e:	8e 83       	std	Y+6, r24	; 0x06
    4540:	0f c0       	rjmp	.+30     	; 0x4560 <lcd_proteus_data+0x8b0>
    4542:	80 e9       	ldi	r24, 0x90	; 144
    4544:	91 e0       	ldi	r25, 0x01	; 1
    4546:	9d 83       	std	Y+5, r25	; 0x05
    4548:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    454a:	8c 81       	ldd	r24, Y+4	; 0x04
    454c:	9d 81       	ldd	r25, Y+5	; 0x05
    454e:	01 97       	sbiw	r24, 0x01	; 1
    4550:	f1 f7       	brne	.-4      	; 0x454e <lcd_proteus_data+0x89e>
    4552:	9d 83       	std	Y+5, r25	; 0x05
    4554:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4556:	8e 81       	ldd	r24, Y+6	; 0x06
    4558:	9f 81       	ldd	r25, Y+7	; 0x07
    455a:	01 97       	sbiw	r24, 0x01	; 1
    455c:	9f 83       	std	Y+7, r25	; 0x07
    455e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4560:	8e 81       	ldd	r24, Y+6	; 0x06
    4562:	9f 81       	ldd	r25, Y+7	; 0x07
    4564:	00 97       	sbiw	r24, 0x00	; 0
    4566:	69 f7       	brne	.-38     	; 0x4542 <lcd_proteus_data+0x892>
    4568:	24 c0       	rjmp	.+72     	; 0x45b2 <lcd_proteus_data+0x902>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    456a:	68 85       	ldd	r22, Y+8	; 0x08
    456c:	79 85       	ldd	r23, Y+9	; 0x09
    456e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4570:	9b 85       	ldd	r25, Y+11	; 0x0b
    4572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4576:	dc 01       	movw	r26, r24
    4578:	cb 01       	movw	r24, r22
    457a:	9f 83       	std	Y+7, r25	; 0x07
    457c:	8e 83       	std	Y+6, r24	; 0x06
    457e:	8e 81       	ldd	r24, Y+6	; 0x06
    4580:	9f 81       	ldd	r25, Y+7	; 0x07
    4582:	9b 83       	std	Y+3, r25	; 0x03
    4584:	8a 83       	std	Y+2, r24	; 0x02
    4586:	8a 81       	ldd	r24, Y+2	; 0x02
    4588:	9b 81       	ldd	r25, Y+3	; 0x03
    458a:	01 97       	sbiw	r24, 0x01	; 1
    458c:	f1 f7       	brne	.-4      	; 0x458a <lcd_proteus_data+0x8da>
    458e:	9b 83       	std	Y+3, r25	; 0x03
    4590:	8a 83       	std	Y+2, r24	; 0x02
    4592:	0f c0       	rjmp	.+30     	; 0x45b2 <lcd_proteus_data+0x902>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4594:	69 89       	ldd	r22, Y+17	; 0x11
    4596:	7a 89       	ldd	r23, Y+18	; 0x12
    4598:	8b 89       	ldd	r24, Y+19	; 0x13
    459a:	9c 89       	ldd	r25, Y+20	; 0x14
    459c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a0:	dc 01       	movw	r26, r24
    45a2:	cb 01       	movw	r24, r22
    45a4:	88 8b       	std	Y+16, r24	; 0x10
    45a6:	88 89       	ldd	r24, Y+16	; 0x10
    45a8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    45aa:	89 81       	ldd	r24, Y+1	; 0x01
    45ac:	8a 95       	dec	r24
    45ae:	f1 f7       	brne	.-4      	; 0x45ac <lcd_proteus_data+0x8fc>
    45b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    45b2:	cf 59       	subi	r28, 0x9F	; 159
    45b4:	df 4f       	sbci	r29, 0xFF	; 255
    45b6:	0f b6       	in	r0, 0x3f	; 63
    45b8:	f8 94       	cli
    45ba:	de bf       	out	0x3e, r29	; 62
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	cd bf       	out	0x3d, r28	; 61
    45c0:	cf 91       	pop	r28
    45c2:	df 91       	pop	r29
    45c4:	1f 91       	pop	r17
    45c6:	0f 91       	pop	r16
    45c8:	08 95       	ret

000045ca <lcd_proteus_string>:

void lcd_proteus_string(uint8 *str) {
    45ca:	df 93       	push	r29
    45cc:	cf 93       	push	r28
    45ce:	00 d0       	rcall	.+0      	; 0x45d0 <lcd_proteus_string+0x6>
    45d0:	0f 92       	push	r0
    45d2:	cd b7       	in	r28, 0x3d	; 61
    45d4:	de b7       	in	r29, 0x3e	; 62
    45d6:	9b 83       	std	Y+3, r25	; 0x03
    45d8:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i = 0; str[i]; i++) {
    45da:	19 82       	std	Y+1, r1	; 0x01
    45dc:	14 c0       	rjmp	.+40     	; 0x4606 <lcd_proteus_string+0x3c>
		if (i == 16) {
    45de:	89 81       	ldd	r24, Y+1	; 0x01
    45e0:	80 31       	cpi	r24, 0x10	; 16
    45e2:	19 f4       	brne	.+6      	; 0x45ea <lcd_proteus_string+0x20>
			lcd_proteus_cmd(0xc0);
    45e4:	80 ec       	ldi	r24, 0xC0	; 192
    45e6:	0e 94 cb 19 	call	0x3396	; 0x3396 <lcd_proteus_cmd>
		}
		lcd_proteus_data(str[i]);
    45ea:	89 81       	ldd	r24, Y+1	; 0x01
    45ec:	28 2f       	mov	r18, r24
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	8a 81       	ldd	r24, Y+2	; 0x02
    45f2:	9b 81       	ldd	r25, Y+3	; 0x03
    45f4:	fc 01       	movw	r30, r24
    45f6:	e2 0f       	add	r30, r18
    45f8:	f3 1f       	adc	r31, r19
    45fa:	80 81       	ld	r24, Z
    45fc:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <lcd_proteus_data>
	CLEAR_BIT(PORTD,3);
	_delay_us(200);
}

void lcd_proteus_string(uint8 *str) {
	for (uint8 i = 0; str[i]; i++) {
    4600:	89 81       	ldd	r24, Y+1	; 0x01
    4602:	8f 5f       	subi	r24, 0xFF	; 255
    4604:	89 83       	std	Y+1, r24	; 0x01
    4606:	89 81       	ldd	r24, Y+1	; 0x01
    4608:	28 2f       	mov	r18, r24
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	8a 81       	ldd	r24, Y+2	; 0x02
    460e:	9b 81       	ldd	r25, Y+3	; 0x03
    4610:	fc 01       	movw	r30, r24
    4612:	e2 0f       	add	r30, r18
    4614:	f3 1f       	adc	r31, r19
    4616:	80 81       	ld	r24, Z
    4618:	88 23       	and	r24, r24
    461a:	09 f7       	brne	.-62     	; 0x45de <lcd_proteus_string+0x14>
		if (i == 16) {
			lcd_proteus_cmd(0xc0);
		}
		lcd_proteus_data(str[i]);
	}
}
    461c:	0f 90       	pop	r0
    461e:	0f 90       	pop	r0
    4620:	0f 90       	pop	r0
    4622:	cf 91       	pop	r28
    4624:	df 91       	pop	r29
    4626:	08 95       	ret

00004628 <lcd_proteus_sent_num>:

void lcd_proteus_sent_num(uint32 num) {
    4628:	df 93       	push	r29
    462a:	cf 93       	push	r28
    462c:	cd b7       	in	r28, 0x3d	; 61
    462e:	de b7       	in	r29, 0x3e	; 62
    4630:	2e 97       	sbiw	r28, 0x0e	; 14
    4632:	0f b6       	in	r0, 0x3f	; 63
    4634:	f8 94       	cli
    4636:	de bf       	out	0x3e, r29	; 62
    4638:	0f be       	out	0x3f, r0	; 63
    463a:	cd bf       	out	0x3d, r28	; 61
    463c:	6b 87       	std	Y+11, r22	; 0x0b
    463e:	7c 87       	std	Y+12, r23	; 0x0c
    4640:	8d 87       	std	Y+13, r24	; 0x0d
    4642:	9e 87       	std	Y+14, r25	; 0x0e
	uint8 n[10];
	itoa(num, n, 10);
    4644:	8b 85       	ldd	r24, Y+11	; 0x0b
    4646:	9c 85       	ldd	r25, Y+12	; 0x0c
    4648:	9e 01       	movw	r18, r28
    464a:	2f 5f       	subi	r18, 0xFF	; 255
    464c:	3f 4f       	sbci	r19, 0xFF	; 255
    464e:	b9 01       	movw	r22, r18
    4650:	4a e0       	ldi	r20, 0x0A	; 10
    4652:	50 e0       	ldi	r21, 0x00	; 0
    4654:	0e 94 4f 06 	call	0xc9e	; 0xc9e <itoa>
	lcd_proteus_string(n);
    4658:	ce 01       	movw	r24, r28
    465a:	01 96       	adiw	r24, 0x01	; 1
    465c:	0e 94 e5 22 	call	0x45ca	; 0x45ca <lcd_proteus_string>
}
    4660:	2e 96       	adiw	r28, 0x0e	; 14
    4662:	0f b6       	in	r0, 0x3f	; 63
    4664:	f8 94       	cli
    4666:	de bf       	out	0x3e, r29	; 62
    4668:	0f be       	out	0x3f, r0	; 63
    466a:	cd bf       	out	0x3d, r28	; 61
    466c:	cf 91       	pop	r28
    466e:	df 91       	pop	r29
    4670:	08 95       	ret

00004672 <keypad_Init>:
uint8 key[4][4] = { { '1', '4', '7', 'C' },
					{ '2', '5', '8', '0' },
					{ '3', '6', '9', '#' },
					{ '+', '-', '*', '/' } };

void keypad_Init(void) {
    4672:	df 93       	push	r29
    4674:	cf 93       	push	r28
    4676:	cd b7       	in	r28, 0x3d	; 61
    4678:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0xf0;
    467a:	e4 e3       	ldi	r30, 0x34	; 52
    467c:	f0 e0       	ldi	r31, 0x00	; 0
    467e:	80 ef       	ldi	r24, 0xF0	; 240
    4680:	80 83       	st	Z, r24
}
    4682:	cf 91       	pop	r28
    4684:	df 91       	pop	r29
    4686:	08 95       	ret

00004688 <get_key>:

uint8 get_key(void) {
    4688:	df 93       	push	r29
    468a:	cf 93       	push	r28
    468c:	cd b7       	in	r28, 0x3d	; 61
    468e:	de b7       	in	r29, 0x3e	; 62
    4690:	6f 97       	sbiw	r28, 0x1f	; 31
    4692:	0f b6       	in	r0, 0x3f	; 63
    4694:	f8 94       	cli
    4696:	de bf       	out	0x3e, r29	; 62
    4698:	0f be       	out	0x3f, r0	; 63
    469a:	cd bf       	out	0x3d, r28	; 61
	uint8 i,j,ch;
	for (i=0; i < 4; i++) {
    469c:	1f 8e       	std	Y+31, r1	; 0x1f
    469e:	14 c1       	rjmp	.+552    	; 0x48c8 <get_key+0x240>
		PORTC &= 0x0f;
    46a0:	a5 e3       	ldi	r26, 0x35	; 53
    46a2:	b0 e0       	ldi	r27, 0x00	; 0
    46a4:	e5 e3       	ldi	r30, 0x35	; 53
    46a6:	f0 e0       	ldi	r31, 0x00	; 0
    46a8:	80 81       	ld	r24, Z
    46aa:	8f 70       	andi	r24, 0x0F	; 15
    46ac:	8c 93       	st	X, r24
		DIO_Write(20 + i, High);
    46ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46b0:	8c 5e       	subi	r24, 0xEC	; 236
    46b2:	61 e0       	ldi	r22, 0x01	; 1
    46b4:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    46b8:	80 e0       	ldi	r24, 0x00	; 0
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	aa e7       	ldi	r26, 0x7A	; 122
    46be:	b3 e4       	ldi	r27, 0x43	; 67
    46c0:	89 8f       	std	Y+25, r24	; 0x19
    46c2:	9a 8f       	std	Y+26, r25	; 0x1a
    46c4:	ab 8f       	std	Y+27, r26	; 0x1b
    46c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46c8:	69 8d       	ldd	r22, Y+25	; 0x19
    46ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46d0:	20 e0       	ldi	r18, 0x00	; 0
    46d2:	30 e0       	ldi	r19, 0x00	; 0
    46d4:	4a e7       	ldi	r20, 0x7A	; 122
    46d6:	55 e4       	ldi	r21, 0x45	; 69
    46d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46dc:	dc 01       	movw	r26, r24
    46de:	cb 01       	movw	r24, r22
    46e0:	8d 8b       	std	Y+21, r24	; 0x15
    46e2:	9e 8b       	std	Y+22, r25	; 0x16
    46e4:	af 8b       	std	Y+23, r26	; 0x17
    46e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46e8:	6d 89       	ldd	r22, Y+21	; 0x15
    46ea:	7e 89       	ldd	r23, Y+22	; 0x16
    46ec:	8f 89       	ldd	r24, Y+23	; 0x17
    46ee:	98 8d       	ldd	r25, Y+24	; 0x18
    46f0:	20 e0       	ldi	r18, 0x00	; 0
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	40 e8       	ldi	r20, 0x80	; 128
    46f6:	5f e3       	ldi	r21, 0x3F	; 63
    46f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46fc:	88 23       	and	r24, r24
    46fe:	2c f4       	brge	.+10     	; 0x470a <get_key+0x82>
		__ticks = 1;
    4700:	81 e0       	ldi	r24, 0x01	; 1
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	9c 8b       	std	Y+20, r25	; 0x14
    4706:	8b 8b       	std	Y+19, r24	; 0x13
    4708:	3f c0       	rjmp	.+126    	; 0x4788 <get_key+0x100>
	else if (__tmp > 65535)
    470a:	6d 89       	ldd	r22, Y+21	; 0x15
    470c:	7e 89       	ldd	r23, Y+22	; 0x16
    470e:	8f 89       	ldd	r24, Y+23	; 0x17
    4710:	98 8d       	ldd	r25, Y+24	; 0x18
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	3f ef       	ldi	r19, 0xFF	; 255
    4716:	4f e7       	ldi	r20, 0x7F	; 127
    4718:	57 e4       	ldi	r21, 0x47	; 71
    471a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    471e:	18 16       	cp	r1, r24
    4720:	4c f5       	brge	.+82     	; 0x4774 <get_key+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4722:	69 8d       	ldd	r22, Y+25	; 0x19
    4724:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4726:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4728:	9c 8d       	ldd	r25, Y+28	; 0x1c
    472a:	20 e0       	ldi	r18, 0x00	; 0
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	40 e2       	ldi	r20, 0x20	; 32
    4730:	51 e4       	ldi	r21, 0x41	; 65
    4732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4736:	dc 01       	movw	r26, r24
    4738:	cb 01       	movw	r24, r22
    473a:	bc 01       	movw	r22, r24
    473c:	cd 01       	movw	r24, r26
    473e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4742:	dc 01       	movw	r26, r24
    4744:	cb 01       	movw	r24, r22
    4746:	9c 8b       	std	Y+20, r25	; 0x14
    4748:	8b 8b       	std	Y+19, r24	; 0x13
    474a:	0f c0       	rjmp	.+30     	; 0x476a <get_key+0xe2>
    474c:	80 e9       	ldi	r24, 0x90	; 144
    474e:	91 e0       	ldi	r25, 0x01	; 1
    4750:	9a 8b       	std	Y+18, r25	; 0x12
    4752:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4754:	89 89       	ldd	r24, Y+17	; 0x11
    4756:	9a 89       	ldd	r25, Y+18	; 0x12
    4758:	01 97       	sbiw	r24, 0x01	; 1
    475a:	f1 f7       	brne	.-4      	; 0x4758 <get_key+0xd0>
    475c:	9a 8b       	std	Y+18, r25	; 0x12
    475e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4760:	8b 89       	ldd	r24, Y+19	; 0x13
    4762:	9c 89       	ldd	r25, Y+20	; 0x14
    4764:	01 97       	sbiw	r24, 0x01	; 1
    4766:	9c 8b       	std	Y+20, r25	; 0x14
    4768:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    476a:	8b 89       	ldd	r24, Y+19	; 0x13
    476c:	9c 89       	ldd	r25, Y+20	; 0x14
    476e:	00 97       	sbiw	r24, 0x00	; 0
    4770:	69 f7       	brne	.-38     	; 0x474c <get_key+0xc4>
    4772:	14 c0       	rjmp	.+40     	; 0x479c <get_key+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4774:	6d 89       	ldd	r22, Y+21	; 0x15
    4776:	7e 89       	ldd	r23, Y+22	; 0x16
    4778:	8f 89       	ldd	r24, Y+23	; 0x17
    477a:	98 8d       	ldd	r25, Y+24	; 0x18
    477c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4780:	dc 01       	movw	r26, r24
    4782:	cb 01       	movw	r24, r22
    4784:	9c 8b       	std	Y+20, r25	; 0x14
    4786:	8b 8b       	std	Y+19, r24	; 0x13
    4788:	8b 89       	ldd	r24, Y+19	; 0x13
    478a:	9c 89       	ldd	r25, Y+20	; 0x14
    478c:	98 8b       	std	Y+16, r25	; 0x10
    478e:	8f 87       	std	Y+15, r24	; 0x0f
    4790:	8f 85       	ldd	r24, Y+15	; 0x0f
    4792:	98 89       	ldd	r25, Y+16	; 0x10
    4794:	01 97       	sbiw	r24, 0x01	; 1
    4796:	f1 f7       	brne	.-4      	; 0x4794 <get_key+0x10c>
    4798:	98 8b       	std	Y+16, r25	; 0x10
    479a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		for (j=0; j < 4; j++) {
    479c:	1e 8e       	std	Y+30, r1	; 0x1e
    479e:	8d c0       	rjmp	.+282    	; 0x48ba <get_key+0x232>
    47a0:	80 e0       	ldi	r24, 0x00	; 0
    47a2:	90 e0       	ldi	r25, 0x00	; 0
    47a4:	aa e7       	ldi	r26, 0x7A	; 122
    47a6:	b3 e4       	ldi	r27, 0x43	; 67
    47a8:	8b 87       	std	Y+11, r24	; 0x0b
    47aa:	9c 87       	std	Y+12, r25	; 0x0c
    47ac:	ad 87       	std	Y+13, r26	; 0x0d
    47ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    47b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    47b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    47b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    47b8:	20 e0       	ldi	r18, 0x00	; 0
    47ba:	30 e0       	ldi	r19, 0x00	; 0
    47bc:	4a e7       	ldi	r20, 0x7A	; 122
    47be:	55 e4       	ldi	r21, 0x45	; 69
    47c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47c4:	dc 01       	movw	r26, r24
    47c6:	cb 01       	movw	r24, r22
    47c8:	8f 83       	std	Y+7, r24	; 0x07
    47ca:	98 87       	std	Y+8, r25	; 0x08
    47cc:	a9 87       	std	Y+9, r26	; 0x09
    47ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47d0:	6f 81       	ldd	r22, Y+7	; 0x07
    47d2:	78 85       	ldd	r23, Y+8	; 0x08
    47d4:	89 85       	ldd	r24, Y+9	; 0x09
    47d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	40 e8       	ldi	r20, 0x80	; 128
    47de:	5f e3       	ldi	r21, 0x3F	; 63
    47e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47e4:	88 23       	and	r24, r24
    47e6:	2c f4       	brge	.+10     	; 0x47f2 <get_key+0x16a>
		__ticks = 1;
    47e8:	81 e0       	ldi	r24, 0x01	; 1
    47ea:	90 e0       	ldi	r25, 0x00	; 0
    47ec:	9e 83       	std	Y+6, r25	; 0x06
    47ee:	8d 83       	std	Y+5, r24	; 0x05
    47f0:	3f c0       	rjmp	.+126    	; 0x4870 <get_key+0x1e8>
	else if (__tmp > 65535)
    47f2:	6f 81       	ldd	r22, Y+7	; 0x07
    47f4:	78 85       	ldd	r23, Y+8	; 0x08
    47f6:	89 85       	ldd	r24, Y+9	; 0x09
    47f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    47fa:	20 e0       	ldi	r18, 0x00	; 0
    47fc:	3f ef       	ldi	r19, 0xFF	; 255
    47fe:	4f e7       	ldi	r20, 0x7F	; 127
    4800:	57 e4       	ldi	r21, 0x47	; 71
    4802:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4806:	18 16       	cp	r1, r24
    4808:	4c f5       	brge	.+82     	; 0x485c <get_key+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    480a:	6b 85       	ldd	r22, Y+11	; 0x0b
    480c:	7c 85       	ldd	r23, Y+12	; 0x0c
    480e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4810:	9e 85       	ldd	r25, Y+14	; 0x0e
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	40 e2       	ldi	r20, 0x20	; 32
    4818:	51 e4       	ldi	r21, 0x41	; 65
    481a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    481e:	dc 01       	movw	r26, r24
    4820:	cb 01       	movw	r24, r22
    4822:	bc 01       	movw	r22, r24
    4824:	cd 01       	movw	r24, r26
    4826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    482a:	dc 01       	movw	r26, r24
    482c:	cb 01       	movw	r24, r22
    482e:	9e 83       	std	Y+6, r25	; 0x06
    4830:	8d 83       	std	Y+5, r24	; 0x05
    4832:	0f c0       	rjmp	.+30     	; 0x4852 <get_key+0x1ca>
    4834:	80 e9       	ldi	r24, 0x90	; 144
    4836:	91 e0       	ldi	r25, 0x01	; 1
    4838:	9c 83       	std	Y+4, r25	; 0x04
    483a:	8b 83       	std	Y+3, r24	; 0x03
    483c:	8b 81       	ldd	r24, Y+3	; 0x03
    483e:	9c 81       	ldd	r25, Y+4	; 0x04
    4840:	01 97       	sbiw	r24, 0x01	; 1
    4842:	f1 f7       	brne	.-4      	; 0x4840 <get_key+0x1b8>
    4844:	9c 83       	std	Y+4, r25	; 0x04
    4846:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4848:	8d 81       	ldd	r24, Y+5	; 0x05
    484a:	9e 81       	ldd	r25, Y+6	; 0x06
    484c:	01 97       	sbiw	r24, 0x01	; 1
    484e:	9e 83       	std	Y+6, r25	; 0x06
    4850:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4852:	8d 81       	ldd	r24, Y+5	; 0x05
    4854:	9e 81       	ldd	r25, Y+6	; 0x06
    4856:	00 97       	sbiw	r24, 0x00	; 0
    4858:	69 f7       	brne	.-38     	; 0x4834 <get_key+0x1ac>
    485a:	14 c0       	rjmp	.+40     	; 0x4884 <get_key+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    485c:	6f 81       	ldd	r22, Y+7	; 0x07
    485e:	78 85       	ldd	r23, Y+8	; 0x08
    4860:	89 85       	ldd	r24, Y+9	; 0x09
    4862:	9a 85       	ldd	r25, Y+10	; 0x0a
    4864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4868:	dc 01       	movw	r26, r24
    486a:	cb 01       	movw	r24, r22
    486c:	9e 83       	std	Y+6, r25	; 0x06
    486e:	8d 83       	std	Y+5, r24	; 0x05
    4870:	8d 81       	ldd	r24, Y+5	; 0x05
    4872:	9e 81       	ldd	r25, Y+6	; 0x06
    4874:	9a 83       	std	Y+2, r25	; 0x02
    4876:	89 83       	std	Y+1, r24	; 0x01
    4878:	89 81       	ldd	r24, Y+1	; 0x01
    487a:	9a 81       	ldd	r25, Y+2	; 0x02
    487c:	01 97       	sbiw	r24, 0x01	; 1
    487e:	f1 f7       	brne	.-4      	; 0x487c <get_key+0x1f4>
    4880:	9a 83       	std	Y+2, r25	; 0x02
    4882:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			if (DIO_Read(16+j)) {
    4884:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4886:	80 5f       	subi	r24, 0xF0	; 240
    4888:	0e 94 3d 0c 	call	0x187a	; 0x187a <DIO_Read>
    488c:	88 23       	and	r24, r24
    488e:	91 f0       	breq	.+36     	; 0x48b4 <get_key+0x22c>
				ch=key[i][j];
    4890:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4892:	48 2f       	mov	r20, r24
    4894:	50 e0       	ldi	r21, 0x00	; 0
    4896:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4898:	28 2f       	mov	r18, r24
    489a:	30 e0       	ldi	r19, 0x00	; 0
    489c:	ca 01       	movw	r24, r20
    489e:	88 0f       	add	r24, r24
    48a0:	99 1f       	adc	r25, r25
    48a2:	88 0f       	add	r24, r24
    48a4:	99 1f       	adc	r25, r25
    48a6:	82 0f       	add	r24, r18
    48a8:	93 1f       	adc	r25, r19
    48aa:	fc 01       	movw	r30, r24
    48ac:	e4 59       	subi	r30, 0x94	; 148
    48ae:	ff 4f       	sbci	r31, 0xFF	; 255
    48b0:	80 81       	ld	r24, Z
    48b2:	8d 8f       	std	Y+29, r24	; 0x1d
	uint8 i,j,ch;
	for (i=0; i < 4; i++) {
		PORTC &= 0x0f;
		DIO_Write(20 + i, High);
		_delay_ms(250);
		for (j=0; j < 4; j++) {
    48b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    48b6:	8f 5f       	subi	r24, 0xFF	; 255
    48b8:	8e 8f       	std	Y+30, r24	; 0x1e
    48ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    48bc:	84 30       	cpi	r24, 0x04	; 4
    48be:	08 f4       	brcc	.+2      	; 0x48c2 <get_key+0x23a>
    48c0:	6f cf       	rjmp	.-290    	; 0x47a0 <get_key+0x118>
	DDRC = 0xf0;
}

uint8 get_key(void) {
	uint8 i,j,ch;
	for (i=0; i < 4; i++) {
    48c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    48c4:	8f 5f       	subi	r24, 0xFF	; 255
    48c6:	8f 8f       	std	Y+31, r24	; 0x1f
    48c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    48ca:	84 30       	cpi	r24, 0x04	; 4
    48cc:	08 f4       	brcc	.+2      	; 0x48d0 <get_key+0x248>
    48ce:	e8 ce       	rjmp	.-560    	; 0x46a0 <get_key+0x18>
			if (DIO_Read(16+j)) {
				ch=key[i][j];
			}
		}
	}
	return ch;
    48d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    48d2:	6f 96       	adiw	r28, 0x1f	; 31
    48d4:	0f b6       	in	r0, 0x3f	; 63
    48d6:	f8 94       	cli
    48d8:	de bf       	out	0x3e, r29	; 62
    48da:	0f be       	out	0x3f, r0	; 63
    48dc:	cd bf       	out	0x3d, r28	; 61
    48de:	cf 91       	pop	r28
    48e0:	df 91       	pop	r29
    48e2:	08 95       	ret

000048e4 <main>:

#include "MCAL/DIO/DIO.h"
#include "MCAL/SPI/spi.h"

int main()
{
    48e4:	df 93       	push	r29
    48e6:	cf 93       	push	r28
    48e8:	cd b7       	in	r28, 0x3d	; 61
    48ea:	de b7       	in	r29, 0x3e	; 62
    48ec:	2f 97       	sbiw	r28, 0x0f	; 15
    48ee:	0f b6       	in	r0, 0x3f	; 63
    48f0:	f8 94       	cli
    48f2:	de bf       	out	0x3e, r29	; 62
    48f4:	0f be       	out	0x3f, r0	; 63
    48f6:	cd bf       	out	0x3d, r28	; 61
	DIO_Init();
    48f8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <DIO_Init>
	spi_slave_init();
    48fc:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <spi_slave_init>
    4900:	80 e0       	ldi	r24, 0x00	; 0
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	a0 e2       	ldi	r26, 0x20	; 32
    4906:	b1 e4       	ldi	r27, 0x41	; 65
    4908:	8b 87       	std	Y+11, r24	; 0x0b
    490a:	9c 87       	std	Y+12, r25	; 0x0c
    490c:	ad 87       	std	Y+13, r26	; 0x0d
    490e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4910:	6b 85       	ldd	r22, Y+11	; 0x0b
    4912:	7c 85       	ldd	r23, Y+12	; 0x0c
    4914:	8d 85       	ldd	r24, Y+13	; 0x0d
    4916:	9e 85       	ldd	r25, Y+14	; 0x0e
    4918:	20 e0       	ldi	r18, 0x00	; 0
    491a:	30 e0       	ldi	r19, 0x00	; 0
    491c:	4a e7       	ldi	r20, 0x7A	; 122
    491e:	55 e4       	ldi	r21, 0x45	; 69
    4920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4924:	dc 01       	movw	r26, r24
    4926:	cb 01       	movw	r24, r22
    4928:	8f 83       	std	Y+7, r24	; 0x07
    492a:	98 87       	std	Y+8, r25	; 0x08
    492c:	a9 87       	std	Y+9, r26	; 0x09
    492e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4930:	6f 81       	ldd	r22, Y+7	; 0x07
    4932:	78 85       	ldd	r23, Y+8	; 0x08
    4934:	89 85       	ldd	r24, Y+9	; 0x09
    4936:	9a 85       	ldd	r25, Y+10	; 0x0a
    4938:	20 e0       	ldi	r18, 0x00	; 0
    493a:	30 e0       	ldi	r19, 0x00	; 0
    493c:	40 e8       	ldi	r20, 0x80	; 128
    493e:	5f e3       	ldi	r21, 0x3F	; 63
    4940:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4944:	88 23       	and	r24, r24
    4946:	2c f4       	brge	.+10     	; 0x4952 <main+0x6e>
		__ticks = 1;
    4948:	81 e0       	ldi	r24, 0x01	; 1
    494a:	90 e0       	ldi	r25, 0x00	; 0
    494c:	9e 83       	std	Y+6, r25	; 0x06
    494e:	8d 83       	std	Y+5, r24	; 0x05
    4950:	3f c0       	rjmp	.+126    	; 0x49d0 <main+0xec>
	else if (__tmp > 65535)
    4952:	6f 81       	ldd	r22, Y+7	; 0x07
    4954:	78 85       	ldd	r23, Y+8	; 0x08
    4956:	89 85       	ldd	r24, Y+9	; 0x09
    4958:	9a 85       	ldd	r25, Y+10	; 0x0a
    495a:	20 e0       	ldi	r18, 0x00	; 0
    495c:	3f ef       	ldi	r19, 0xFF	; 255
    495e:	4f e7       	ldi	r20, 0x7F	; 127
    4960:	57 e4       	ldi	r21, 0x47	; 71
    4962:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4966:	18 16       	cp	r1, r24
    4968:	4c f5       	brge	.+82     	; 0x49bc <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    496a:	6b 85       	ldd	r22, Y+11	; 0x0b
    496c:	7c 85       	ldd	r23, Y+12	; 0x0c
    496e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4970:	9e 85       	ldd	r25, Y+14	; 0x0e
    4972:	20 e0       	ldi	r18, 0x00	; 0
    4974:	30 e0       	ldi	r19, 0x00	; 0
    4976:	40 e2       	ldi	r20, 0x20	; 32
    4978:	51 e4       	ldi	r21, 0x41	; 65
    497a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    497e:	dc 01       	movw	r26, r24
    4980:	cb 01       	movw	r24, r22
    4982:	bc 01       	movw	r22, r24
    4984:	cd 01       	movw	r24, r26
    4986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    498a:	dc 01       	movw	r26, r24
    498c:	cb 01       	movw	r24, r22
    498e:	9e 83       	std	Y+6, r25	; 0x06
    4990:	8d 83       	std	Y+5, r24	; 0x05
    4992:	0f c0       	rjmp	.+30     	; 0x49b2 <main+0xce>
    4994:	80 e9       	ldi	r24, 0x90	; 144
    4996:	91 e0       	ldi	r25, 0x01	; 1
    4998:	9c 83       	std	Y+4, r25	; 0x04
    499a:	8b 83       	std	Y+3, r24	; 0x03
    499c:	8b 81       	ldd	r24, Y+3	; 0x03
    499e:	9c 81       	ldd	r25, Y+4	; 0x04
    49a0:	01 97       	sbiw	r24, 0x01	; 1
    49a2:	f1 f7       	brne	.-4      	; 0x49a0 <main+0xbc>
    49a4:	9c 83       	std	Y+4, r25	; 0x04
    49a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49a8:	8d 81       	ldd	r24, Y+5	; 0x05
    49aa:	9e 81       	ldd	r25, Y+6	; 0x06
    49ac:	01 97       	sbiw	r24, 0x01	; 1
    49ae:	9e 83       	std	Y+6, r25	; 0x06
    49b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49b2:	8d 81       	ldd	r24, Y+5	; 0x05
    49b4:	9e 81       	ldd	r25, Y+6	; 0x06
    49b6:	00 97       	sbiw	r24, 0x00	; 0
    49b8:	69 f7       	brne	.-38     	; 0x4994 <main+0xb0>
    49ba:	14 c0       	rjmp	.+40     	; 0x49e4 <main+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49bc:	6f 81       	ldd	r22, Y+7	; 0x07
    49be:	78 85       	ldd	r23, Y+8	; 0x08
    49c0:	89 85       	ldd	r24, Y+9	; 0x09
    49c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    49c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49c8:	dc 01       	movw	r26, r24
    49ca:	cb 01       	movw	r24, r22
    49cc:	9e 83       	std	Y+6, r25	; 0x06
    49ce:	8d 83       	std	Y+5, r24	; 0x05
    49d0:	8d 81       	ldd	r24, Y+5	; 0x05
    49d2:	9e 81       	ldd	r25, Y+6	; 0x06
    49d4:	9a 83       	std	Y+2, r25	; 0x02
    49d6:	89 83       	std	Y+1, r24	; 0x01
    49d8:	89 81       	ldd	r24, Y+1	; 0x01
    49da:	9a 81       	ldd	r25, Y+2	; 0x02
    49dc:	01 97       	sbiw	r24, 0x01	; 1
    49de:	f1 f7       	brne	.-4      	; 0x49dc <main+0xf8>
    49e0:	9a 83       	std	Y+2, r25	; 0x02
    49e2:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		_delay_ms(10);
		uint8 data=spi_slave_receive();
    49e4:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <spi_slave_receive>
    49e8:	8f 87       	std	Y+15, r24	; 0x0f
		if(data=='1'){
    49ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    49ec:	81 33       	cpi	r24, 0x31	; 49
    49ee:	49 f4       	brne	.+18     	; 0x4a02 <main+0x11e>
			TOGGLE_BIT(PORTA,0);
    49f0:	ab e3       	ldi	r26, 0x3B	; 59
    49f2:	b0 e0       	ldi	r27, 0x00	; 0
    49f4:	eb e3       	ldi	r30, 0x3B	; 59
    49f6:	f0 e0       	ldi	r31, 0x00	; 0
    49f8:	90 81       	ld	r25, Z
    49fa:	81 e0       	ldi	r24, 0x01	; 1
    49fc:	89 27       	eor	r24, r25
    49fe:	8c 93       	st	X, r24
    4a00:	7f cf       	rjmp	.-258    	; 0x4900 <main+0x1c>
		}else if(data=='2'){
    4a02:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a04:	82 33       	cpi	r24, 0x32	; 50
    4a06:	49 f4       	brne	.+18     	; 0x4a1a <main+0x136>
			TOGGLE_BIT(PORTA,1);
    4a08:	ab e3       	ldi	r26, 0x3B	; 59
    4a0a:	b0 e0       	ldi	r27, 0x00	; 0
    4a0c:	eb e3       	ldi	r30, 0x3B	; 59
    4a0e:	f0 e0       	ldi	r31, 0x00	; 0
    4a10:	90 81       	ld	r25, Z
    4a12:	82 e0       	ldi	r24, 0x02	; 2
    4a14:	89 27       	eor	r24, r25
    4a16:	8c 93       	st	X, r24
    4a18:	73 cf       	rjmp	.-282    	; 0x4900 <main+0x1c>
		}else if(data=='3'){
    4a1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a1c:	83 33       	cpi	r24, 0x33	; 51
    4a1e:	49 f4       	brne	.+18     	; 0x4a32 <main+0x14e>
			DIO_Write(PORT_A0, High);
    4a20:	80 e0       	ldi	r24, 0x00	; 0
    4a22:	61 e0       	ldi	r22, 0x01	; 1
    4a24:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
			DIO_Write(PORT_A1, High);
    4a28:	81 e0       	ldi	r24, 0x01	; 1
    4a2a:	61 e0       	ldi	r22, 0x01	; 1
    4a2c:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    4a30:	67 cf       	rjmp	.-306    	; 0x4900 <main+0x1c>
		}else if(data=='4'){
    4a32:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a34:	84 33       	cpi	r24, 0x34	; 52
    4a36:	09 f0       	breq	.+2      	; 0x4a3a <main+0x156>
    4a38:	63 cf       	rjmp	.-314    	; 0x4900 <main+0x1c>
			DIO_Write(PORT_A0, Low);
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	60 e0       	ldi	r22, 0x00	; 0
    4a3e:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
			DIO_Write(PORT_A1, Low);
    4a42:	81 e0       	ldi	r24, 0x01	; 1
    4a44:	60 e0       	ldi	r22, 0x00	; 0
    4a46:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_Write>
    4a4a:	5a cf       	rjmp	.-332    	; 0x4900 <main+0x1c>

00004a4c <__udivmodqi4>:
    4a4c:	99 1b       	sub	r25, r25
    4a4e:	79 e0       	ldi	r23, 0x09	; 9
    4a50:	04 c0       	rjmp	.+8      	; 0x4a5a <__udivmodqi4_ep>

00004a52 <__udivmodqi4_loop>:
    4a52:	99 1f       	adc	r25, r25
    4a54:	96 17       	cp	r25, r22
    4a56:	08 f0       	brcs	.+2      	; 0x4a5a <__udivmodqi4_ep>
    4a58:	96 1b       	sub	r25, r22

00004a5a <__udivmodqi4_ep>:
    4a5a:	88 1f       	adc	r24, r24
    4a5c:	7a 95       	dec	r23
    4a5e:	c9 f7       	brne	.-14     	; 0x4a52 <__udivmodqi4_loop>
    4a60:	80 95       	com	r24
    4a62:	08 95       	ret

00004a64 <__prologue_saves__>:
    4a64:	2f 92       	push	r2
    4a66:	3f 92       	push	r3
    4a68:	4f 92       	push	r4
    4a6a:	5f 92       	push	r5
    4a6c:	6f 92       	push	r6
    4a6e:	7f 92       	push	r7
    4a70:	8f 92       	push	r8
    4a72:	9f 92       	push	r9
    4a74:	af 92       	push	r10
    4a76:	bf 92       	push	r11
    4a78:	cf 92       	push	r12
    4a7a:	df 92       	push	r13
    4a7c:	ef 92       	push	r14
    4a7e:	ff 92       	push	r15
    4a80:	0f 93       	push	r16
    4a82:	1f 93       	push	r17
    4a84:	cf 93       	push	r28
    4a86:	df 93       	push	r29
    4a88:	cd b7       	in	r28, 0x3d	; 61
    4a8a:	de b7       	in	r29, 0x3e	; 62
    4a8c:	ca 1b       	sub	r28, r26
    4a8e:	db 0b       	sbc	r29, r27
    4a90:	0f b6       	in	r0, 0x3f	; 63
    4a92:	f8 94       	cli
    4a94:	de bf       	out	0x3e, r29	; 62
    4a96:	0f be       	out	0x3f, r0	; 63
    4a98:	cd bf       	out	0x3d, r28	; 61
    4a9a:	09 94       	ijmp

00004a9c <__epilogue_restores__>:
    4a9c:	2a 88       	ldd	r2, Y+18	; 0x12
    4a9e:	39 88       	ldd	r3, Y+17	; 0x11
    4aa0:	48 88       	ldd	r4, Y+16	; 0x10
    4aa2:	5f 84       	ldd	r5, Y+15	; 0x0f
    4aa4:	6e 84       	ldd	r6, Y+14	; 0x0e
    4aa6:	7d 84       	ldd	r7, Y+13	; 0x0d
    4aa8:	8c 84       	ldd	r8, Y+12	; 0x0c
    4aaa:	9b 84       	ldd	r9, Y+11	; 0x0b
    4aac:	aa 84       	ldd	r10, Y+10	; 0x0a
    4aae:	b9 84       	ldd	r11, Y+9	; 0x09
    4ab0:	c8 84       	ldd	r12, Y+8	; 0x08
    4ab2:	df 80       	ldd	r13, Y+7	; 0x07
    4ab4:	ee 80       	ldd	r14, Y+6	; 0x06
    4ab6:	fd 80       	ldd	r15, Y+5	; 0x05
    4ab8:	0c 81       	ldd	r16, Y+4	; 0x04
    4aba:	1b 81       	ldd	r17, Y+3	; 0x03
    4abc:	aa 81       	ldd	r26, Y+2	; 0x02
    4abe:	b9 81       	ldd	r27, Y+1	; 0x01
    4ac0:	ce 0f       	add	r28, r30
    4ac2:	d1 1d       	adc	r29, r1
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	f8 94       	cli
    4ac8:	de bf       	out	0x3e, r29	; 62
    4aca:	0f be       	out	0x3f, r0	; 63
    4acc:	cd bf       	out	0x3d, r28	; 61
    4ace:	ed 01       	movw	r28, r26
    4ad0:	08 95       	ret

00004ad2 <__udivmodhi4>:
    4ad2:	aa 1b       	sub	r26, r26
    4ad4:	bb 1b       	sub	r27, r27
    4ad6:	51 e1       	ldi	r21, 0x11	; 17
    4ad8:	07 c0       	rjmp	.+14     	; 0x4ae8 <__udivmodhi4_ep>

00004ada <__udivmodhi4_loop>:
    4ada:	aa 1f       	adc	r26, r26
    4adc:	bb 1f       	adc	r27, r27
    4ade:	a6 17       	cp	r26, r22
    4ae0:	b7 07       	cpc	r27, r23
    4ae2:	10 f0       	brcs	.+4      	; 0x4ae8 <__udivmodhi4_ep>
    4ae4:	a6 1b       	sub	r26, r22
    4ae6:	b7 0b       	sbc	r27, r23

00004ae8 <__udivmodhi4_ep>:
    4ae8:	88 1f       	adc	r24, r24
    4aea:	99 1f       	adc	r25, r25
    4aec:	5a 95       	dec	r21
    4aee:	a9 f7       	brne	.-22     	; 0x4ada <__udivmodhi4_loop>
    4af0:	80 95       	com	r24
    4af2:	90 95       	com	r25
    4af4:	bc 01       	movw	r22, r24
    4af6:	cd 01       	movw	r24, r26
    4af8:	08 95       	ret

00004afa <_exit>:
    4afa:	f8 94       	cli

00004afc <__stop_program>:
    4afc:	ff cf       	rjmp	.-2      	; 0x4afc <__stop_program>
